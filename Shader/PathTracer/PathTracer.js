// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'PathTracer.data';
    var REMOTE_PACKAGE_BASE = 'PathTracer.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'Data', true, true);

    function DataRequest(start, end, audio) {
      this.start = start;
      this.end = end;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);
        this.finish(byteArray);
      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_PathTracer.data');

    };
    Module['addRunDependency']('datafile_PathTracer.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"start": 0, "audio": 0, "end": 174949, "filename": "/Data/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"}, {"start": 174949, "audio": 0, "end": 276878, "filename": "/Data/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"}, {"start": 276878, "audio": 0, "end": 540960, "filename": "/Data/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"}, {"start": 540960, "audio": 0, "end": 547089, "filename": "/Data/PathTrace.frag"}, {"start": 547089, "audio": 0, "end": 548322, "filename": "/Data/Screen.frag"}, {"start": 548322, "audio": 0, "end": 548548, "filename": "/Data/Screen.vert"}, {"start": 548548, "audio": 0, "end": 574288, "filename": "/Data/Snail.frag"}, {"start": 574288, "audio": 0, "end": 575348, "filename": "/Data/Test.frag"}], "remote_package_size": 575348, "package_uuid": "d03ba8b5-5e97-4ccb-9404-8ce1e76459b5"});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  assert(STATICTOP < TOTAL_MEMORY, 'not enough memory for static allocation - increase TOTAL_MEMORY');
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is currently only used for LLVM backend under certain
// circumstance: RESERVED_FUNCTION_POINTERS=1, EMULATED_FUNCTION_POINTERS=0.
function addFunction(func, sig) {

  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 8944;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
    }

  function ___lock() {}

  
    

  
  
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { abort("random_device"); /*Math.random() is not safe for random number generation, so this fallback random_device implementation aborts... see kripken/emscripten/pull/7096 */ };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

   

   

  
  
  var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          err('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            delta = event.detail;
            break;
          case 'mousewheel':
            delta = event.wheelDelta;
            break;
          case 'wheel':
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        // If the current GL context is an OffscreenCanvas, but it was initialized with implicit swap mode, perform the swap on behalf of the user.
        if (typeof GL !== 'undefined' && GL.currentContext && !GL.currentContextIsProxied && !GL.currentContext.attributes.explicitSwapControl && GL.currentContext.GLctx.commit) {
          GL.currentContext.GLctx.commit();
        }
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          err('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],queries:[],samplers:[],transformFeedbacks:[],syncs:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},stringiCache:{},tempFixedLengthArray:[],unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        // For functions such as glDrawBuffers, glInvalidateFramebuffer and glInvalidateSubFramebuffer that need to pass a short array to the WebGL API,
        // create a set of short fixed-length arrays to avoid having to generate any garbage when calling those functions.
        for (var i = 0; i < 32; i++) {
          GL.tempFixedLengthArray.push(new Array(i));
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : undefined;
          source += Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len >= 0 ? len : undefined);
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes['majorVersion'] === 'undefined' && typeof webGLContextAttributes['minorVersion'] === 'undefined') {
          // If caller did not specify a context, initialize the best one that is possibly available.
          // To explicitly create a WebGL 1 or a WebGL 2 context, call this function with a specific
          // majorVersion set.
          if (typeof WebGL2RenderingContext !== 'undefined') webGLContextAttributes['majorVersion'] = 2;
          else webGLContextAttributes['majorVersion'] = 1;
          webGLContextAttributes['minorVersion'] = 0;
        }
  
  
  
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes['majorVersion'] == 1 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes['majorVersion'] == 2 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          return 0;
        }
  
        if (!ctx) return 0;
        var context = GL.registerContext(ctx, webGLContextAttributes);
        return context;
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = _malloc(8); // Make space on the heap to store GL context attributes that need to be accessible as shared between threads.
        HEAP32[((handle)>>2)]=webGLContextAttributes["explicitSwapControl"]; // explicitSwapControl
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes['majorVersion'],
          GLctx: ctx
        };
  
        // BUG: Workaround Chrome WebGL 2 issue: the first shipped versions of WebGL 2 in Chrome did not actually implement the new WebGL 2 functions.
        //      Those are supported only in Chrome 58 and newer.
        function getChromeVersion() {
          var raw = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
          return raw ? parseInt(raw[2], 10) : false;
        }
        context.supportsWebGL2EntryPoints = (context.version >= 2) && (getChromeVersion() === false || getChromeVersion() >= 58);
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes['enableExtensionsByDefault']) {
          GL.initExtensions(context);
        }
  
  
  
  
        return handle;
      },makeContextCurrent:function (contextHandle) {
        // Deactivating current context?
        if (!contextHandle) {
          GLctx = Module.ctx = GL.currentContext = null;
          return true;
        }
        var context = GL.contexts[contextHandle];
        if (!context) {
          return false;
        }
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        _free(GL.contexts[contextHandle]);
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc != null)
          {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      if (target == 0x88EB /*GL_PIXEL_PACK_BUFFER*/) {
        // In WebGL 2 glReadPixels entry point, we need to use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_PACK_BUFFER_BINDING point, so must keep track whether that binding point is non-null to know what is
        // the proper API function to call.
        GLctx.currentPixelPackBufferBinding = buffer;
      } else if (target == 0x88EC /*GL_PIXEL_UNPACK_BUFFER*/) {
        // In WebGL 2 gl(Compressed)Tex(Sub)Image[23]D entry points, we need to
        // use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_UNPACK_BUFFER_BINDING point, so must keep track whether that
        // binding point is non-null to know what is the proper API function to
        // call.
        GLctx.currentPixelUnpackBufferBinding = buffer;
      }
      GLctx.bindBuffer(target, bufferObj);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _glBufferData(target, size, data, usage) {
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        if (GL.currentContext.supportsWebGL2EntryPoints) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
          GLctx.bufferData(target, HEAPU8, usage, data, size);
          return;
        }
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  
  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(objectTable);
        buffer.name = id;
        objectTable[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGenVertexArrays(n, arrays) {
      __glGenObject(n, arrays, 'createVertexArray', GL.vaos
        );
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }
  
  var __colorChannelsInGlTextureFormat={6402:1,6403:1,6406:1,6407:3,6408:4,6409:1,6410:2,33319:2,33320:2,35904:3,35906:4,36244:1,36248:3,36249:4};
  
  var __sizeOfGlTextureElementType={5120:1,5121:1,5122:2,5123:2,5124:4,5125:4,5126:4,5131:2,32819:2,32820:2,33635:2,33640:4,34042:4,35899:4,35902:4,36193:2};function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel = __colorChannelsInGlTextureFormat[format] * __sizeOfGlTextureElementType[type];
      if (!sizePerPixel) {
        GL.recordError(0x0500); // GL_INVALID_ENUM
        return;
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      switch(type) {
        case 0x1400 /* GL_BYTE */:
          return HEAP8.subarray((pixels),(pixels+bytes));
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray((pixels),(pixels+bytes));
        case 0x1402 /* GL_SHORT */:
          return HEAP16.subarray((pixels)>>1,(pixels+bytes)>>1);
        case 0x1404 /* GL_INT */:
          return HEAP32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
        case 0x8C3E /* GL_UNSIGNED_INT_5_9_9_9_REV */:
        case 0x8368 /* GL_UNSIGNED_INT_2_10_10_10_REV */:
        case 0x8C3B /* GL_UNSIGNED_INT_10F_11F_11F_REV */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
        case 0x140B /* GL_HALF_FLOAT */:
          return HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
      }
    }
  
  function __heapObjectForWebGLType(type) {
      switch(type) {
        case 0x1400 /* GL_BYTE */:
          return HEAP8;
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8;
        case 0x1402 /* GL_SHORT */:
          return HEAP16;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
        case 0x140B /* GL_HALF_FLOAT */:
          return HEAPU16;
        case 0x1404 /* GL_INT */:
          return HEAP32;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
        case 0x8C3E /* GL_UNSIGNED_INT_5_9_9_9_REV */:
        case 0x8368 /* GL_UNSIGNED_INT_2_10_10_10_REV */:
        case 0x8C3B /* GL_UNSIGNED_INT_10F_11F_11F_REV */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8 */:
          return HEAPU32;
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32;
      }
    }
  
  var __heapAccessShiftForWebGLType={5122:1,5123:1,5124:2,5125:2,5126:2,5131:1,32819:1,32820:1,33635:1,33640:2,34042:2,35899:2,35902:2,36193:1};function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (GL.currentContext.supportsWebGL2EntryPoints) {
        // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
        } else if (pixels != 0) {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, __heapObjectForWebGLType(type), pixels >> (__heapAccessShiftForWebGLType[type]|0));
        } else {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, null);
        }
        return;
      }
  
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

  function _glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  
  
  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          }
          ret = allocate(intArrayFromString(s), 'i8', ALLOC_NORMAL);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          if (GL.currentContext.version >= 2) glVersion = 'OpenGL ES 3.0 (' + glVersion + ')';
          else
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = allocate(intArrayFromString(glVersion), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }var GLEW={isLinaroFork:1,extensions:null,error:{0:null,1:null,2:null,3:null,4:null,5:null,6:null,7:null,8:null},version:{1:null,2:null,3:null,4:null},errorStringConstantFromCode:function (error) {
        if (GLEW.isLinaroFork) {
          switch (error) {
            case 4:return "OpenGL ES lib expected, found OpenGL lib"; // GLEW_ERROR_NOT_GLES_VERSION
            case 5:return "OpenGL lib expected, found OpenGL ES lib"; // GLEW_ERROR_GLES_VERSION
            case 6:return "Missing EGL version"; // GLEW_ERROR_NO_EGL_VERSION
            case 7:return "EGL 1.1 and up are supported"; // GLEW_ERROR_EGL_VERSION_10_ONLY
            default:break;
          }
        }
  
        switch (error) {
          case 0:return "No error"; // GLEW_OK || GLEW_NO_ERROR
          case 1:return "Missing GL version"; // GLEW_ERROR_NO_GL_VERSION
          case 2:return "GL 1.1 and up are supported"; // GLEW_ERROR_GL_VERSION_10_ONLY
          case 3:return "GLX 1.2 and up are supported"; // GLEW_ERROR_GLX_VERSION_11_ONLY
          default:return null;
        }
      },errorString:function (error) {
        if (!GLEW.error[error]) {
          var string = GLEW.errorStringConstantFromCode(error);
          if (!string) {
            string = "Unknown error";
            error = 8; // prevent array from growing more than this
          }
          GLEW.error[error] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.error[error];
      },versionStringConstantFromCode:function (name) {
        switch (name) {
          case 1:return "1.10.0"; // GLEW_VERSION
          case 2:return "1"; // GLEW_VERSION_MAJOR
          case 3:return "10"; // GLEW_VERSION_MINOR
          case 4:return "0"; // GLEW_VERSION_MICRO
          default:return null;
        }
      },versionString:function (name) {
        if (!GLEW.version[name]) {
          var string = GLEW.versionStringConstantFromCode(name);
          if (!string)
            return 0;
          GLEW.version[name] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.version[name];
      },extensionIsSupported:function (name) {
        if (!GLEW.extensions) {
          GLEW.extensions = Pointer_stringify(_glGetString(0x1F03)).split(' ');
        }
  
        if (GLEW.extensions.indexOf(name) != -1)
          return 1;
  
        // extensions from GLEmulations do not come unprefixed
        // so, try with prefix
        return (GLEW.extensions.indexOf("GL_" + name) != -1);
      }};function _glewInit() { return 0; }

  
  var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        Module['dynCall_vii'](GLFW.active.charFunc, GLFW.active.id, charCode);
      },onKeyChanged:function (keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        if (repeat) status = 2; // GLFW_REPEAT
        Module['dynCall_viiiii'](GLFW.active.keyFunc, GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
      },onGamepadConnected:function (event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function (event) {
        GLFW.refreshJoysticks();
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function (event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        Module['dynCall_vidd'](GLFW.active.cursorPosFunc, GLFW.active.id, Browser.mouseX, Browser.mouseY);
      },DOMToGLFWMouseButton:function (event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Module['dynCall_vii'](GLFW.active.cursorEnterFunc, GLFW.active.id, 1);
      },onMouseleave:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Module['dynCall_vii'](GLFW.active.cursorEnterFunc, GLFW.active.id, 0);
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        var eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
  
        Module['dynCall_viiii'](GLFW.active.mouseButtonFunc, GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        Module['dynCall_vidd'](GLFW.active.scrollFunc, GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function (width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        Module['dynCall_viii'](GLFW.active.windowSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },onFramebufferSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        Module['dynCall_viii'](GLFW.active.framebufferSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },requestFullscreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },requestFullScreen:function () {
        err('GLFW.requestFullScreen() is deprecated. Please call GLFW.requestFullscreen instead.');
        GLFW.requestFullScreen = function() {
          return GLFW.requestFullscreen();
        }
        return GLFW.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        err('GLFW.cancelFullScreen() is deprecated. Please call GLFW.exitFullscreen instead.');
        GLFW.cancelFullScreen = function() {
          return GLFW.exitFullscreen();
        }
        return GLFW.exitFullscreen();
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function (cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function () {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), 'i8', ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), 'i8', ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), 'float', ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  Module['dynCall_vii'](GLFW.joystickFunc, joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  Module['dynCall_vii'](GLFW.joystickFunc, joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setDropCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.dropFunc = cbfun;
      },onDrop:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
        var filenames = allocate(new Array(event.dataTransfer.files.length*4), 'i8*', ALLOC_NORMAL);
        var filenamesArray = [];
        var count = event.dataTransfer.files.length;
  
        // Read and save the files to emscripten's FS
        var written = 0;
        var drop_dir = '.glfw_dropped_files';
        FS.createPath('/', drop_dir);
  
        function save(file) {
          var path = '/' + drop_dir + '/' + file.name.replace(/\//g, '_');
          var reader = new FileReader();
          reader.onloadend = function(e) {
            if (reader.readyState != 2) { // not DONE
              ++written;
              console.log('failed to read dropped file: '+file.name+': '+reader.error);
              return;
            }
  
            var data = e.target.result;
            FS.writeFile(path, new Uint8Array(data));
            if (++written === count) {
              Module['dynCall_viii'](GLFW.active.dropFunc, GLFW.active.id, count, filenames);
  
              for (var i = 0; i < filenamesArray.length; ++i) {
                _free(filenamesArray[i]);
              }
              _free(filenames);
            }
          };
          reader.readAsArrayBuffer(file);
  
          var filename = allocate(intArrayFromString(path), 'i8', ALLOC_NORMAL);
          filenamesArray.push(filename);
          setValue(filenames + i*4, filename, 'i8*');
        }
  
        for (var i = 0; i < count; ++i) {
          save(event.dataTransfer.files[i]);
        }
  
        return false;
      },onDragover:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
       
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },onClickRequestPointerLock:function (e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function (winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullscreen();
          } else {
            GLFW.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
  
        Module['dynCall_viii'](win.windowSizeFunc, win.id, width, height);
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS 
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          Module['dynCall_vi'](win.windowCloseFunc, win.id);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        var table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwMakeContextCurrent(winid) {}

  function _glfwPollEvents() {}

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }



   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { err("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
var GLctx; GL.init();
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { err("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { err("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { err("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "setTempRet0": setTempRet0, "getTempRet0": getTempRet0, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiiiii": nullFunc_viiiiii, "___assert_fail": ___assert_fail, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "__glGenObject": __glGenObject, "__heapObjectForWebGLType": __heapObjectForWebGLType, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_glActiveTexture": _glActiveTexture, "_glAttachShader": _glAttachShader, "_glBindBuffer": _glBindBuffer, "_glBindTexture": _glBindTexture, "_glBindVertexArray": _glBindVertexArray, "_glBufferData": _glBufferData, "_glCompileShader": _glCompileShader, "_glCreateProgram": _glCreateProgram, "_glCreateShader": _glCreateShader, "_glDrawElements": _glDrawElements, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_glGenBuffers": _glGenBuffers, "_glGenTextures": _glGenTextures, "_glGenVertexArrays": _glGenVertexArrays, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_glGetProgramiv": _glGetProgramiv, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_glGetShaderiv": _glGetShaderiv, "_glGetString": _glGetString, "_glGetUniformLocation": _glGetUniformLocation, "_glLinkProgram": _glLinkProgram, "_glShaderSource": _glShaderSource, "_glTexImage2D": _glTexImage2D, "_glTexParameteri": _glTexParameteri, "_glUniform1f": _glUniform1f, "_glUniform1i": _glUniform1i, "_glUniform3f": _glUniform3f, "_glUniform4f": _glUniform4f, "_glUseProgram": _glUseProgram, "_glVertexAttribPointer": _glVertexAttribPointer, "_glewInit": _glewInit, "_glfwCreateWindow": _glfwCreateWindow, "_glfwGetCursorPos": _glfwGetCursorPos, "_glfwGetTime": _glfwGetTime, "_glfwInit": _glfwInit, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "_glfwPollEvents": _glfwPollEvents, "_glfwSwapBuffers": _glfwSwapBuffers, "_glfwTerminate": _glfwTerminate, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var setTempRet0=env.setTempRet0;
  var getTempRet0=env.getTempRet0;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var ___assert_fail=env.___assert_fail;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var __glGenObject=env.__glGenObject;
  var __heapObjectForWebGLType=env.__heapObjectForWebGLType;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _glActiveTexture=env._glActiveTexture;
  var _glAttachShader=env._glAttachShader;
  var _glBindBuffer=env._glBindBuffer;
  var _glBindTexture=env._glBindTexture;
  var _glBindVertexArray=env._glBindVertexArray;
  var _glBufferData=env._glBufferData;
  var _glCompileShader=env._glCompileShader;
  var _glCreateProgram=env._glCreateProgram;
  var _glCreateShader=env._glCreateShader;
  var _glDrawElements=env._glDrawElements;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _glGenBuffers=env._glGenBuffers;
  var _glGenTextures=env._glGenTextures;
  var _glGenVertexArrays=env._glGenVertexArrays;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _glGetProgramiv=env._glGetProgramiv;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _glGetShaderiv=env._glGetShaderiv;
  var _glGetString=env._glGetString;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _glLinkProgram=env._glLinkProgram;
  var _glShaderSource=env._glShaderSource;
  var _glTexImage2D=env._glTexImage2D;
  var _glTexParameteri=env._glTexParameteri;
  var _glUniform1f=env._glUniform1f;
  var _glUniform1i=env._glUniform1i;
  var _glUniform3f=env._glUniform3f;
  var _glUniform4f=env._glUniform4f;
  var _glUseProgram=env._glUseProgram;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _glewInit=env._glewInit;
  var _glfwCreateWindow=env._glfwCreateWindow;
  var _glfwGetCursorPos=env._glfwGetCursorPos;
  var _glfwGetTime=env._glfwGetTime;
  var _glfwInit=env._glfwInit;
  var _glfwMakeContextCurrent=env._glfwMakeContextCurrent;
  var _glfwPollEvents=env._glfwPollEvents;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var _glfwTerminate=env._glfwTerminate;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function _stbi_load($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $6;
 $14 = (_stbi__fopen($13,4436)|0);
 $11 = $14;
 $15 = $11;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $22 = $11;
  $23 = $7;
  $24 = $8;
  $25 = $9;
  $26 = $10;
  $27 = (_stbi_load_from_file($22,$23,$24,$25,$26)|0);
  $12 = $27;
  $28 = $11;
  (_fclose($28)|0);
  $29 = $12;
  $5 = $29;
  $30 = $5;
  STACKTOP = sp;return ($30|0);
 } else {
  $17 = (_stbi__err(4439)|0);
  $18 = ($17|0)!=(0);
  $19 = $18 ? 0 : 0;
  $20 = $19;
  $21 = $20;
  $5 = $21;
  $30 = $5;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _stbi__fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_fopen($5,$6)|0);
 $4 = $7;
 $8 = $4;
 STACKTOP = sp;return ($8|0);
}
function _stbi__err($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[2088] = $2;
 STACKTOP = sp;return 0;
}
function _stbi_load_from_file($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $11 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $5;
 _stbi__start_file($11,$12);
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 $17 = (_stbi__load_and_postprocess_8bit($11,$13,$14,$15,$16)|0);
 $10 = $17;
 $18 = $10;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $29 = $10;
  STACKTOP = sp;return ($29|0);
 }
 $20 = $5;
 $21 = ((($11)) + 172|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($11)) + 168|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $22;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (0 - ($27))|0;
 (_fseek($20,$28,1)|0);
 $29 = $10;
 STACKTOP = sp;return ($29|0);
}
function _stbi__start_file($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _stbi__start_callbacks($4,4048,$5);
 STACKTOP = sp;return;
}
function _stbi__load_and_postprocess_8bit($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = $10;
 $19 = (_stbi__load_main($14,$15,$16,$17,$18,$11,8)|0);
 $12 = $19;
 $20 = $12;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $5 = 0;
  $53 = $5;
  STACKTOP = sp;return ($53|0);
 }
 $22 = HEAP32[$11>>2]|0;
 $23 = ($22|0)!=(8);
 if ($23) {
  $24 = HEAP32[$11>>2]|0;
  $25 = ($24|0)==(16);
  if (!($25)) {
   ___assert_fail((4945|0),(4971|0),1094,(5038|0));
   // unreachable;
  }
  $26 = $12;
  $27 = $7;
  $28 = HEAP32[$27>>2]|0;
  $29 = $8;
  $30 = HEAP32[$29>>2]|0;
  $31 = $10;
  $32 = ($31|0)==(0);
  if ($32) {
   $33 = $9;
   $34 = HEAP32[$33>>2]|0;
   $36 = $34;
  } else {
   $35 = $10;
   $36 = $35;
  }
  $37 = (_stbi__convert_16_to_8($26,$28,$30,$36)|0);
  $12 = $37;
  HEAP32[$11>>2] = 8;
 }
 $38 = (0)!=(0);
 if ($38) {
  $39 = $10;
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = $10;
   $44 = $41;
  } else {
   $42 = $9;
   $43 = HEAP32[$42>>2]|0;
   $44 = $43;
  }
  $13 = $44;
  $45 = $12;
  $46 = $7;
  $47 = HEAP32[$46>>2]|0;
  $48 = $8;
  $49 = HEAP32[$48>>2]|0;
  $50 = $13;
  $51 = $50;
  _stbi__vertical_flip($45,$47,$49,$51);
 }
 $52 = $12;
 $5 = $52;
 $53 = $5;
 STACKTOP = sp;return ($53|0);
}
function _stbi__start_callbacks($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 16|0);
 $8 = $4;
 ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
 $9 = $5;
 $10 = $3;
 $11 = ((($10)) + 28|0);
 HEAP32[$11>>2] = $9;
 $12 = $3;
 $13 = ((($12)) + 36|0);
 HEAP32[$13>>2] = 128;
 $14 = $3;
 $15 = ((($14)) + 32|0);
 HEAP32[$15>>2] = 1;
 $16 = $3;
 $17 = ((($16)) + 40|0);
 $18 = $3;
 $19 = ((($18)) + 176|0);
 HEAP32[$19>>2] = $17;
 $20 = $3;
 _stbi__refill_buffer($20);
 $21 = $3;
 $22 = ((($21)) + 172|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $3;
 $25 = ((($24)) + 180|0);
 HEAP32[$25>>2] = $23;
 STACKTOP = sp;return;
}
function _stbi__hdr_test($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_stbi__hdr_test_core($3,7200)|0);
 $2 = $4;
 $5 = $1;
 _stbi__rewind($5);
 $6 = $2;
 $7 = ($6|0)!=(0);
 if ($7) {
  $11 = $2;
  STACKTOP = sp;return ($11|0);
 }
 $8 = $1;
 $9 = (_stbi__hdr_test_core($8,7212)|0);
 $2 = $9;
 $10 = $1;
 _stbi__rewind($10);
 $11 = $2;
 STACKTOP = sp;return ($11|0);
}
function _stbi__malloc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_malloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _stbi__do_zlib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $6;
 $11 = $5;
 $12 = ((($11)) + 20|0);
 HEAP32[$12>>2] = $10;
 $13 = $6;
 $14 = $5;
 $15 = ((($14)) + 16|0);
 HEAP32[$15>>2] = $13;
 $16 = $6;
 $17 = $7;
 $18 = (($16) + ($17)|0);
 $19 = $5;
 $20 = ((($19)) + 24|0);
 HEAP32[$20>>2] = $18;
 $21 = $8;
 $22 = $5;
 $23 = ((($22)) + 28|0);
 HEAP32[$23>>2] = $21;
 $24 = $5;
 $25 = $9;
 $26 = (_stbi__parse_zlib($24,$25)|0);
 STACKTOP = sp;return ($26|0);
}
function _stbi_zlib_decode_malloc_guesssize_headerflag($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $11 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $8;
 $14 = (_stbi__malloc($13)|0);
 $12 = $14;
 $15 = $12;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $5 = 0;
  $41 = $5;
  STACKTOP = sp;return ($41|0);
 }
 $17 = $6;
 HEAP32[$11>>2] = $17;
 $18 = $6;
 $19 = $7;
 $20 = (($18) + ($19)|0);
 $21 = ((($11)) + 4|0);
 HEAP32[$21>>2] = $20;
 $22 = $12;
 $23 = $8;
 $24 = $10;
 $25 = (_stbi__do_zlib($11,$22,$23,1,$24)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $39 = ((($11)) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  _free($40);
  $5 = 0;
  $41 = $5;
  STACKTOP = sp;return ($41|0);
 }
 $27 = $9;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = ((($11)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($11)) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $30;
  $34 = $32;
  $35 = (($33) - ($34))|0;
  $36 = $9;
  HEAP32[$36>>2] = $35;
 }
 $37 = ((($11)) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 $5 = $38;
 $41 = $5;
 STACKTOP = sp;return ($41|0);
}
function _loadFromFile($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = $2;
 $7 = (_fopen($6,4436)|0);
 $3 = $7;
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $3;
  (_fseek($10,0,2)|0);
  $11 = $3;
  $12 = (_ftell($11)|0);
  $4 = $12;
  $13 = $3;
  (_fseek($13,0,0)|0);
  $14 = $4;
  $15 = (($14) + 1)|0;
  $16 = (_malloc($15)|0);
  $5 = $16;
  $17 = $5;
  $18 = $4;
  $19 = $3;
  (_fread($17,1,$18,$19)|0);
  $20 = $5;
  $21 = $4;
  $22 = (($20) + ($21)|0);
  HEAP8[$22>>0] = 0;
  $23 = $3;
  (_fclose($23)|0);
  $24 = $5;
  $1 = $24;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 } else {
  $1 = 0;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _compileShader($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = (_glCreateShader(($10|0))|0);
 $6 = $11;
 $12 = $6;
 $13 = $5;
 $14 = $4;
 _glShaderSource(($12|0),($13|0),($14|0),(0|0));
 $15 = $6;
 _glCompileShader(($15|0));
 $16 = $6;
 _glGetShaderiv(($16|0),35713,($7|0));
 $17 = $6;
 _glGetShaderiv(($17|0),35716,($8|0));
 $18 = HEAP32[$7>>2]|0;
 $19 = ($18|0)==(0);
 $20 = HEAP32[$8>>2]|0;
 $21 = ($20|0)>(0);
 $or$cond = $19 & $21;
 if (!($or$cond)) {
  $30 = $6;
  STACKTOP = sp;return ($30|0);
 }
 $22 = HEAP32[$8>>2]|0;
 $23 = (($22) + 1)|0;
 $24 = (_malloc($23)|0);
 $9 = $24;
 $25 = $6;
 $26 = HEAP32[$8>>2]|0;
 $27 = $9;
 _glGetShaderInfoLog(($25|0),($26|0),(0|0),($27|0));
 $28 = $9;
 HEAP32[$vararg_buffer>>2] = $28;
 (_printf(4457,$vararg_buffer)|0);
 $29 = $9;
 _free($29);
 $30 = $6;
 STACKTOP = sp;return ($30|0);
}
function _loadTexture($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $7 = sp;
 $2 = $0;
 $8 = $2;
 $9 = (_stbi_load($8,$3,$4,$5,4)|0);
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  _glGenTextures(1,($7|0));
  $12 = HEAP32[$7>>2]|0;
  _glBindTexture(3553,($12|0));
  $13 = HEAP32[$3>>2]|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = $6;
  _glTexImage2D(3553,0,6408,($13|0),($14|0),0,6408,5121,($15|0));
  _glTexParameteri(3553,10242,10497);
  _glTexParameteri(3553,10243,10497);
  _glTexParameteri(3553,10240,9728);
  _glTexParameteri(3553,10241,9728);
  $16 = $6;
  _free($16);
  $17 = HEAP32[$7>>2]|0;
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $1 = 0;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _mainLoop() {
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = (+_glfwGetTime());
 HEAPF64[1042] = $3;
 $4 = +HEAPF64[1042];
 $5 = +HEAPF64[1043];
 $6 = $4 - $5;
 $7 = $6;
 $0 = $7;
 $8 = +HEAPF64[1042];
 HEAPF64[1043] = $8;
 $9 = HEAP32[2090]|0;
 _glfwGetCursorPos(($9|0),($1|0),($2|0));
 $10 = HEAP32[2091]|0;
 $11 = (_glGetUniformLocation(($10|0),(4485|0))|0);
 $12 = +HEAPF64[1042];
 $13 = $12;
 _glUniform1f(($11|0),(+$13));
 $14 = HEAP32[2091]|0;
 $15 = (_glGetUniformLocation(($14|0),(4491|0))|0);
 $16 = $0;
 _glUniform1f(($15|0),(+$16));
 $17 = HEAP32[2091]|0;
 $18 = (_glGetUniformLocation(($17|0),(4502|0))|0);
 $19 = HEAP32[2089]|0;
 _glUniform1i(($18|0),($19|0));
 $20 = HEAP32[2091]|0;
 $21 = (_glGetUniformLocation(($20|0),(4509|0))|0);
 $22 = +HEAPF64[1042];
 $23 = $22;
 _glUniform1f(($21|0),(+$23));
 $24 = HEAP32[2091]|0;
 $25 = (_glGetUniformLocation(($24|0),(4525|0))|0);
 $26 = +HEAPF64[1042];
 $27 = $26;
 _glUniform1f(($25|0),(+$27));
 $28 = HEAP32[2091]|0;
 $29 = (_glGetUniformLocation(($28|0),(4541|0))|0);
 $30 = +HEAPF64[1042];
 $31 = $30;
 _glUniform1f(($29|0),(+$31));
 $32 = HEAP32[2091]|0;
 $33 = (_glGetUniformLocation(($32|0),(4557|0))|0);
 $34 = +HEAPF64[1042];
 $35 = $34;
 _glUniform1f(($33|0),(+$35));
 $36 = HEAP32[2091]|0;
 $37 = (_glGetUniformLocation(($36|0),(4573|0))|0);
 $38 = +HEAPF64[$1>>3];
 $39 = $38;
 $40 = +HEAPF64[$2>>3];
 $41 = $40;
 $42 = +HEAPF64[$1>>3];
 $43 = $42;
 $44 = +HEAPF64[$2>>3];
 $45 = $44;
 _glUniform4f(($37|0),(+$39),(+$41),(+$43),(+$45));
 _glDrawElements(4,6,5121,(0|0));
 $46 = HEAP32[2090]|0;
 _glfwSwapBuffers(($46|0));
 _glfwPollEvents();
 $47 = HEAP32[2089]|0;
 $48 = (($47) + 1)|0;
 HEAP32[2089] = $48;
 STACKTOP = sp;return;
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp + 16|0;
 $5 = sp + 64|0;
 $6 = sp + 56|0;
 $7 = sp + 48|0;
 $8 = sp + 40|0;
 $9 = sp + 32|0;
 $10 = sp + 28|0;
 $11 = sp + 24|0;
 $13 = sp;
 $2 = 0;
 $3 = $0;
 $4 = $1;
 (_glfwInit()|0);
 $14 = (_glfwCreateWindow(640,360,(4580|0),(0|0),(0|0))|0);
 HEAP32[2090] = $14;
 $15 = HEAP32[2090]|0;
 _glfwMakeContextCurrent(($15|0));
 (_glewInit()|0);
 _glGenVertexArrays(1,($5|0));
 $16 = HEAP32[$5>>2]|0;
 _glBindVertexArray(($16|0));
 _glGenBuffers(2,($6|0));
 $17 = HEAP32[$6>>2]|0;
 _glBindBuffer(34962,($17|0));
 _glBufferData(34962,32,(16|0),35044);
 $18 = ((($6)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 _glBindBuffer(34963,($19|0));
 _glBufferData(34963,6,(4451|0),35044);
 _glEnableVertexAttribArray(0);
 _glVertexAttribPointer(0,2,5126,0,8,(0|0));
 $20 = (_loadFromFile(4591)|0);
 HEAP32[$7>>2] = $20;
 $21 = (_loadFromFile(4608)|0);
 HEAP32[$8>>2] = $21;
 $22 = ((($8)) + 4|0);
 $23 = (_loadFromFile(4625)|0);
 HEAP32[$22>>2] = $23;
 $24 = (_compileShader(35633,$7,1)|0);
 HEAP32[$9>>2] = $24;
 $25 = ((($9)) + 4|0);
 $26 = (_compileShader(35632,$8,2)|0);
 HEAP32[$25>>2] = $26;
 $27 = (_glCreateProgram()|0);
 HEAP32[2091] = $27;
 $28 = HEAP32[2091]|0;
 $29 = HEAP32[$9>>2]|0;
 _glAttachShader(($28|0),($29|0));
 $30 = HEAP32[2091]|0;
 $31 = ((($9)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 _glAttachShader(($30|0),($32|0));
 $33 = HEAP32[2091]|0;
 _glLinkProgram(($33|0));
 $34 = HEAP32[2091]|0;
 _glGetProgramiv(($34|0),35714,($10|0));
 $35 = HEAP32[2091]|0;
 _glGetProgramiv(($35|0),35716,($11|0));
 $36 = HEAP32[$10>>2]|0;
 $37 = ($36|0)==(0);
 $38 = HEAP32[$11>>2]|0;
 $39 = ($38|0)>(0);
 $or$cond = $37 & $39;
 if ($or$cond) {
  $40 = HEAP32[$11>>2]|0;
  $41 = (($40) + 1)|0;
  $42 = (_malloc($41)|0);
  $12 = $42;
  $43 = HEAP32[2091]|0;
  $44 = HEAP32[$11>>2]|0;
  $45 = $12;
  _glGetProgramInfoLog(($43|0),($44|0),(0|0),($45|0));
  $46 = $12;
  HEAP32[$vararg_buffer>>2] = $46;
  (_printf(4645,$vararg_buffer)|0);
  $47 = $12;
  _free($47);
 }
 HEAP32[$13>>2] = 0;
 $48 = ((($13)) + 4|0);
 $49 = (_loadTexture(4671)|0);
 HEAP32[$48>>2] = $49;
 $50 = ((($48)) + 4|0);
 $51 = (_loadTexture(4745)|0);
 HEAP32[$50>>2] = $51;
 $52 = ((($50)) + 4|0);
 $53 = (_loadTexture(4819)|0);
 HEAP32[$52>>2] = $53;
 $54 = HEAP32[2091]|0;
 _glUseProgram(($54|0));
 $55 = HEAP32[2091]|0;
 $56 = (_glGetUniformLocation(($55|0),(4893|0))|0);
 _glUniform3f(($56|0),640.0,360.0,0.0);
 _glActiveTexture(33985);
 $57 = HEAP32[$13>>2]|0;
 _glBindTexture(3553,($57|0));
 $58 = HEAP32[2091]|0;
 $59 = (_glGetUniformLocation(($58|0),(4905|0))|0);
 _glUniform1i(($59|0),1);
 _glActiveTexture(33986);
 $60 = ((($13)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 _glBindTexture(3553,($61|0));
 $62 = HEAP32[2091]|0;
 $63 = (_glGetUniformLocation(($62|0),(4915|0))|0);
 _glUniform1i(($63|0),2);
 _glActiveTexture(33987);
 $64 = ((($13)) + 8|0);
 $65 = HEAP32[$64>>2]|0;
 _glBindTexture(3553,($65|0));
 $66 = HEAP32[2091]|0;
 $67 = (_glGetUniformLocation(($66|0),(4925|0))|0);
 _glUniform1i(($67|0),3);
 _glActiveTexture(33988);
 $68 = ((($13)) + 12|0);
 $69 = HEAP32[$68>>2]|0;
 _glBindTexture(3553,($69|0));
 $70 = HEAP32[2091]|0;
 $71 = (_glGetUniformLocation(($70|0),(4935|0))|0);
 _glUniform1i(($71|0),4);
 $72 = (+_glfwGetTime());
 HEAPF64[1043] = $72;
 _emscripten_set_main_loop((7|0),0,1);
 _glfwTerminate();
 STACKTOP = sp;return 0;
}
function _stbi__stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 $8 = $3;
 $9 = (_fread($6,1,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _stbi__stdio_skip($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 (_fseek($4,$5,1)|0);
 STACKTOP = sp;return;
}
function _stbi__stdio_eof($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_feof($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _stbi__load_main($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $16 = $13;
 ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
 $17 = $13;
 HEAP32[$17>>2] = 8;
 $18 = $13;
 $19 = ((($18)) + 8|0);
 HEAP32[$19>>2] = 0;
 $20 = $13;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = 0;
 $22 = $8;
 $23 = (_stbi__jpeg_test($22)|0);
 $24 = ($23|0)!=(0);
 $25 = $8;
 if ($24) {
  $26 = $9;
  $27 = $10;
  $28 = $11;
  $29 = $12;
  $30 = $13;
  $31 = (_stbi__jpeg_load($25,$26,$27,$28,$29,$30)|0);
  $7 = $31;
  $122 = $7;
  STACKTOP = sp;return ($122|0);
 }
 $32 = (_stbi__png_test($25)|0);
 $33 = ($32|0)!=(0);
 $34 = $8;
 if ($33) {
  $35 = $9;
  $36 = $10;
  $37 = $11;
  $38 = $12;
  $39 = $13;
  $40 = (_stbi__png_load($34,$35,$36,$37,$38,$39)|0);
  $7 = $40;
  $122 = $7;
  STACKTOP = sp;return ($122|0);
 }
 $41 = (_stbi__bmp_test($34)|0);
 $42 = ($41|0)!=(0);
 $43 = $8;
 if ($42) {
  $44 = $9;
  $45 = $10;
  $46 = $11;
  $47 = $12;
  $48 = $13;
  $49 = (_stbi__bmp_load($43,$44,$45,$46,$47,$48)|0);
  $7 = $49;
  $122 = $7;
  STACKTOP = sp;return ($122|0);
 }
 $50 = (_stbi__gif_test($43)|0);
 $51 = ($50|0)!=(0);
 $52 = $8;
 if ($51) {
  $53 = $9;
  $54 = $10;
  $55 = $11;
  $56 = $12;
  $57 = $13;
  $58 = (_stbi__gif_load($52,$53,$54,$55,$56,$57)|0);
  $7 = $58;
  $122 = $7;
  STACKTOP = sp;return ($122|0);
 }
 $59 = (_stbi__psd_test($52)|0);
 $60 = ($59|0)!=(0);
 $61 = $8;
 if ($60) {
  $62 = $9;
  $63 = $10;
  $64 = $11;
  $65 = $12;
  $66 = $13;
  $67 = $14;
  $68 = (_stbi__psd_load($61,$62,$63,$64,$65,$66,$67)|0);
  $7 = $68;
  $122 = $7;
  STACKTOP = sp;return ($122|0);
 }
 $69 = (_stbi__pic_test($61)|0);
 $70 = ($69|0)!=(0);
 $71 = $8;
 if ($70) {
  $72 = $9;
  $73 = $10;
  $74 = $11;
  $75 = $12;
  $76 = $13;
  $77 = (_stbi__pic_load($71,$72,$73,$74,$75,$76)|0);
  $7 = $77;
  $122 = $7;
  STACKTOP = sp;return ($122|0);
 }
 $78 = (_stbi__pnm_test($71)|0);
 $79 = ($78|0)!=(0);
 $80 = $8;
 if ($79) {
  $81 = $9;
  $82 = $10;
  $83 = $11;
  $84 = $12;
  $85 = $13;
  $86 = (_stbi__pnm_load($80,$81,$82,$83,$84,$85)|0);
  $7 = $86;
  $122 = $7;
  STACKTOP = sp;return ($122|0);
 }
 $87 = (_stbi__hdr_test($80)|0);
 $88 = ($87|0)!=(0);
 $89 = $8;
 if ($88) {
  $90 = $9;
  $91 = $10;
  $92 = $11;
  $93 = $12;
  $94 = $13;
  $95 = (_stbi__hdr_load($89,$90,$91,$92,$93,$94)|0);
  $15 = $95;
  $96 = $15;
  $97 = $9;
  $98 = HEAP32[$97>>2]|0;
  $99 = $10;
  $100 = HEAP32[$99>>2]|0;
  $101 = $12;
  $102 = ($101|0)!=(0);
  if ($102) {
   $103 = $12;
   $106 = $103;
  } else {
   $104 = $11;
   $105 = HEAP32[$104>>2]|0;
   $106 = $105;
  }
  $107 = (_stbi__hdr_to_ldr($96,$98,$100,$106)|0);
  $7 = $107;
  $122 = $7;
  STACKTOP = sp;return ($122|0);
 } else {
  $108 = (_stbi__tga_test($89)|0);
  $109 = ($108|0)!=(0);
  if ($109) {
   $110 = $8;
   $111 = $9;
   $112 = $10;
   $113 = $11;
   $114 = $12;
   $115 = $13;
   $116 = (_stbi__tga_load($110,$111,$112,$113,$114,$115)|0);
   $7 = $116;
   $122 = $7;
   STACKTOP = sp;return ($122|0);
  } else {
   $117 = (_stbi__err(5070)|0);
   $118 = ($117|0)!=(0);
   $119 = $118 ? 0 : 0;
   $120 = $119;
   $121 = $120;
   $7 = $121;
   $122 = $7;
   STACKTOP = sp;return ($122|0);
  }
 }
 return (0)|0;
}
function _stbi__convert_16_to_8($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $6;
 $13 = $7;
 $14 = Math_imul($12, $13)|0;
 $15 = $8;
 $16 = Math_imul($14, $15)|0;
 $10 = $16;
 $17 = $10;
 $18 = (_stbi__malloc($17)|0);
 $11 = $18;
 $19 = $11;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = (_stbi__err(5340)|0);
  $22 = ($21|0)!=(0);
  $23 = $22 ? 0 : 0;
  $24 = $23;
  $25 = $24;
  $4 = $25;
  $43 = $4;
  STACKTOP = sp;return ($43|0);
 }
 $9 = 0;
 while(1) {
  $26 = $9;
  $27 = $10;
  $28 = ($26|0)<($27|0);
  $29 = $5;
  if (!($28)) {
   break;
  }
  $30 = $9;
  $31 = (($29) + ($30<<1)|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32&65535;
  $34 = $33 >> 8;
  $35 = $34 & 255;
  $36 = $35&255;
  $37 = $11;
  $38 = $9;
  $39 = (($37) + ($38)|0);
  HEAP8[$39>>0] = $36;
  $40 = $9;
  $41 = (($40) + 1)|0;
  $9 = $41;
 }
 _free($29);
 $42 = $11;
 $4 = $42;
 $43 = $4;
 STACKTOP = sp;return ($43|0);
}
function _stbi__vertical_flip($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2096|0);
 $10 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $16 = $5;
 $17 = $7;
 $18 = Math_imul($16, $17)|0;
 $9 = $18;
 $19 = $4;
 $11 = $19;
 $8 = 0;
 while(1) {
  $20 = $8;
  $21 = $6;
  $22 = $21 >> 1;
  $23 = ($20|0)<($22|0);
  if (!($23)) {
   break;
  }
  $24 = $11;
  $25 = $8;
  $26 = $9;
  $27 = Math_imul($25, $26)|0;
  $28 = (($24) + ($27)|0);
  $12 = $28;
  $29 = $11;
  $30 = $6;
  $31 = $8;
  $32 = (($30) - ($31))|0;
  $33 = (($32) - 1)|0;
  $34 = $9;
  $35 = Math_imul($33, $34)|0;
  $36 = (($29) + ($35)|0);
  $13 = $36;
  $37 = $9;
  $14 = $37;
  while(1) {
   $38 = $14;
   $39 = ($38|0)!=(0);
   if (!($39)) {
    break;
   }
   $40 = $14;
   $41 = ($40>>>0)<(2048);
   $42 = $14;
   $43 = $41 ? $42 : 2048;
   $15 = $43;
   $44 = $12;
   $45 = $15;
   _memcpy(($10|0),($44|0),($45|0))|0;
   $46 = $12;
   $47 = $13;
   $48 = $15;
   _memcpy(($46|0),($47|0),($48|0))|0;
   $49 = $13;
   $50 = $15;
   _memcpy(($49|0),($10|0),($50|0))|0;
   $51 = $15;
   $52 = $12;
   $53 = (($52) + ($51)|0);
   $12 = $53;
   $54 = $15;
   $55 = $13;
   $56 = (($55) + ($54)|0);
   $13 = $56;
   $57 = $15;
   $58 = $14;
   $59 = (($58) - ($57))|0;
   $14 = $59;
  }
  $60 = $8;
  $61 = (($60) + 1)|0;
  $8 = $61;
 }
 STACKTOP = sp;return;
}
function _stbi__jpeg_test($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = (_stbi__malloc(18456)|0);
 $3 = $4;
 $5 = $1;
 $6 = $3;
 HEAP32[$6>>2] = $5;
 $7 = $3;
 _stbi__setup_jpeg($7);
 $8 = $3;
 $9 = (_stbi__decode_jpeg_header($8,1)|0);
 $2 = $9;
 $10 = $1;
 _stbi__rewind($10);
 $11 = $3;
 _free($11);
 $12 = $2;
 STACKTOP = sp;return ($12|0);
}
function _stbi__jpeg_load($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = (_stbi__malloc(18456)|0);
 $13 = $14;
 $15 = $6;
 $16 = $13;
 HEAP32[$16>>2] = $15;
 $17 = $13;
 _stbi__setup_jpeg($17);
 $18 = $13;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = (_load_jpeg_image($18,$19,$20,$21,$22)|0);
 $12 = $23;
 $24 = $13;
 _free($24);
 $25 = $12;
 STACKTOP = sp;return ($25|0);
}
function _stbi__png_test($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_stbi__check_png_header($3)|0);
 $2 = $4;
 $5 = $1;
 _stbi__rewind($5);
 $6 = $2;
 STACKTOP = sp;return ($6|0);
}
function _stbi__png_load($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = $6;
 HEAP32[$12>>2] = $13;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 $17 = $10;
 $18 = $11;
 $19 = (_stbi__do_png($12,$14,$15,$16,$17,$18)|0);
 STACKTOP = sp;return ($19|0);
}
function _stbi__bmp_test($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_stbi__bmp_test_raw($3)|0);
 $2 = $4;
 $5 = $1;
 _stbi__rewind($5);
 $6 = $2;
 STACKTOP = sp;return ($6|0);
}
function _stbi__bmp_load($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1232|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1232|0);
 $19 = sp;
 $27 = sp + 1112|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = 0;
 $15 = 0;
 $16 = 0;
 $17 = 0;
 $20 = 0;
 $51 = ((($27)) + 28|0);
 HEAP32[$51>>2] = 255;
 $52 = $7;
 $53 = (_stbi__bmp_parse_header($52,$27)|0);
 $54 = ($53|0)==(0|0);
 if ($54) {
  $6 = 0;
  $652 = $6;
  STACKTOP = sp;return ($652|0);
 }
 $55 = $7;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)>(0);
 $59 = $58&1;
 $24 = $59;
 $60 = $7;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (Math_abs(($62|0))|0);
 $64 = $7;
 $65 = ((($64)) + 4|0);
 HEAP32[$65>>2] = $63;
 $66 = ((($27)) + 12|0);
 $67 = HEAP32[$66>>2]|0;
 $14 = $67;
 $68 = ((($27)) + 16|0);
 $69 = HEAP32[$68>>2]|0;
 $15 = $69;
 $70 = ((($27)) + 20|0);
 $71 = HEAP32[$70>>2]|0;
 $16 = $71;
 $72 = ((($27)) + 24|0);
 $73 = HEAP32[$72>>2]|0;
 $17 = $73;
 $74 = ((($27)) + 28|0);
 $75 = HEAP32[$74>>2]|0;
 $18 = $75;
 $76 = ((($27)) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(12);
 $79 = HEAP32[$27>>2]|0;
 if ($78) {
  $80 = ($79|0)<(24);
  if ($80) {
   $81 = ((($27)) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) - 14)|0;
   $84 = (($83) - 24)|0;
   $85 = (($84|0) / 3)&-1;
   $20 = $85;
  }
 } else {
  $86 = ($79|0)<(16);
  if ($86) {
   $87 = ((($27)) + 4|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($88) - 14)|0;
   $90 = ((($27)) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($89) - ($91))|0;
   $93 = $92 >> 2;
   $20 = $93;
  }
 }
 $94 = $17;
 $95 = ($94|0)!=(0);
 $96 = $95 ? 4 : 3;
 $97 = $7;
 $98 = ((($97)) + 8|0);
 HEAP32[$98>>2] = $96;
 $99 = $11;
 $100 = ($99|0)!=(0);
 $101 = $11;
 $102 = ($101|0)>=(3);
 $or$cond = $100 & $102;
 if ($or$cond) {
  $103 = $11;
  $26 = $103;
 } else {
  $104 = $7;
  $105 = ((($104)) + 8|0);
  $106 = HEAP32[$105>>2]|0;
  $26 = $106;
 }
 $107 = $26;
 $108 = $7;
 $109 = HEAP32[$108>>2]|0;
 $110 = $7;
 $111 = ((($110)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = (_stbi__mad3sizes_valid($107,$109,$112,0)|0);
 $114 = ($113|0)!=(0);
 if (!($114)) {
  $115 = (_stbi__err(5330)|0);
  $116 = ($115|0)!=(0);
  $117 = $116 ? 0 : 0;
  $118 = $117;
  $119 = $118;
  $6 = $119;
  $652 = $6;
  STACKTOP = sp;return ($652|0);
 }
 $120 = $26;
 $121 = $7;
 $122 = HEAP32[$121>>2]|0;
 $123 = $7;
 $124 = ((($123)) + 4|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (_stbi__malloc_mad3($120,$122,$125,0)|0);
 $13 = $126;
 $127 = $13;
 $128 = ($127|0)!=(0|0);
 if (!($128)) {
  $129 = (_stbi__err(5340)|0);
  $130 = ($129|0)!=(0);
  $131 = $130 ? 0 : 0;
  $132 = $131;
  $133 = $132;
  $6 = $133;
  $652 = $6;
  STACKTOP = sp;return ($652|0);
 }
 $134 = HEAP32[$27>>2]|0;
 $135 = ($134|0)<(16);
 L23: do {
  if ($135) {
   $28 = 0;
   $136 = $20;
   $137 = ($136|0)==(0);
   $138 = $20;
   $139 = ($138|0)>(256);
   $or$cond3 = $137 | $139;
   if ($or$cond3) {
    $140 = $13;
    _free($140);
    $141 = (_stbi__err(6303)|0);
    $142 = ($141|0)!=(0);
    $143 = $142 ? 0 : 0;
    $144 = $143;
    $145 = $144;
    $6 = $145;
    $652 = $6;
    STACKTOP = sp;return ($652|0);
   }
   $21 = 0;
   while(1) {
    $146 = $21;
    $147 = $20;
    $148 = ($146|0)<($147|0);
    $149 = $7;
    if (!($148)) {
     break;
    }
    $150 = (_stbi__get8($149)|0);
    $151 = $21;
    $152 = (($19) + ($151<<2)|0);
    $153 = ((($152)) + 2|0);
    HEAP8[$153>>0] = $150;
    $154 = $7;
    $155 = (_stbi__get8($154)|0);
    $156 = $21;
    $157 = (($19) + ($156<<2)|0);
    $158 = ((($157)) + 1|0);
    HEAP8[$158>>0] = $155;
    $159 = $7;
    $160 = (_stbi__get8($159)|0);
    $161 = $21;
    $162 = (($19) + ($161<<2)|0);
    HEAP8[$162>>0] = $160;
    $163 = ((($27)) + 8|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ($164|0)!=(12);
    if ($165) {
     $166 = $7;
     (_stbi__get8($166)|0);
    }
    $167 = $21;
    $168 = (($19) + ($167<<2)|0);
    $169 = ((($168)) + 3|0);
    HEAP8[$169>>0] = -1;
    $170 = $21;
    $171 = (($170) + 1)|0;
    $21 = $171;
   }
   $172 = ((($27)) + 4|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = (($173) - 14)|0;
   $175 = ((($27)) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = (($174) - ($176))|0;
   $178 = $20;
   $179 = ((($27)) + 8|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($180|0)==(12);
   $182 = $181 ? 3 : 4;
   $183 = Math_imul($178, $182)|0;
   $184 = (($177) - ($183))|0;
   _stbi__skip($149,$184);
   $185 = HEAP32[$27>>2]|0;
   $186 = ($185|0)==(1);
   do {
    if ($186) {
     $187 = $7;
     $188 = HEAP32[$187>>2]|0;
     $189 = (($188) + 7)|0;
     $190 = $189 >>> 3;
     $23 = $190;
    } else {
     $191 = HEAP32[$27>>2]|0;
     $192 = ($191|0)==(4);
     if ($192) {
      $193 = $7;
      $194 = HEAP32[$193>>2]|0;
      $195 = (($194) + 1)|0;
      $196 = $195 >>> 1;
      $23 = $196;
      break;
     }
     $197 = HEAP32[$27>>2]|0;
     $198 = ($197|0)==(8);
     if ($198) {
      $199 = $7;
      $200 = HEAP32[$199>>2]|0;
      $23 = $200;
      break;
     }
     $201 = $13;
     _free($201);
     $202 = (_stbi__err(6311)|0);
     $203 = ($202|0)!=(0);
     $204 = $203 ? 0 : 0;
     $205 = $204;
     $206 = $205;
     $6 = $206;
     $652 = $6;
     STACKTOP = sp;return ($652|0);
    }
   } while(0);
   $207 = $23;
   $208 = (0 - ($207))|0;
   $209 = $208 & 3;
   $25 = $209;
   $210 = HEAP32[$27>>2]|0;
   $211 = ($210|0)==(1);
   $22 = 0;
   if ($211) {
    while(1) {
     $212 = $22;
     $213 = $7;
     $214 = ((($213)) + 4|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = ($212|0)<($215|0);
     if (!($216)) {
      break L23;
     }
     $29 = 7;
     $217 = $7;
     $218 = (_stbi__get8($217)|0);
     $219 = $218&255;
     $30 = $219;
     $21 = 0;
     while(1) {
      $220 = $21;
      $221 = $7;
      $222 = HEAP32[$221>>2]|0;
      $223 = ($220|0)<($222|0);
      if (!($223)) {
       break;
      }
      $224 = $30;
      $225 = $29;
      $226 = $224 >> $225;
      $227 = $226 & 1;
      $31 = $227;
      $228 = $31;
      $229 = (($19) + ($228<<2)|0);
      $230 = HEAP8[$229>>0]|0;
      $231 = $13;
      $232 = $28;
      $233 = (($232) + 1)|0;
      $28 = $233;
      $234 = (($231) + ($232)|0);
      HEAP8[$234>>0] = $230;
      $235 = $31;
      $236 = (($19) + ($235<<2)|0);
      $237 = ((($236)) + 1|0);
      $238 = HEAP8[$237>>0]|0;
      $239 = $13;
      $240 = $28;
      $241 = (($240) + 1)|0;
      $28 = $241;
      $242 = (($239) + ($240)|0);
      HEAP8[$242>>0] = $238;
      $243 = $31;
      $244 = (($19) + ($243<<2)|0);
      $245 = ((($244)) + 2|0);
      $246 = HEAP8[$245>>0]|0;
      $247 = $13;
      $248 = $28;
      $249 = (($248) + 1)|0;
      $28 = $249;
      $250 = (($247) + ($248)|0);
      HEAP8[$250>>0] = $246;
      $251 = $29;
      $252 = (($251) + -1)|0;
      $29 = $252;
      $253 = ($252|0)<(0);
      if ($253) {
       $29 = 7;
       $254 = $7;
       $255 = (_stbi__get8($254)|0);
       $256 = $255&255;
       $30 = $256;
      }
      $257 = $21;
      $258 = (($257) + 1)|0;
      $21 = $258;
     }
     $259 = $7;
     $260 = $25;
     _stbi__skip($259,$260);
     $261 = $22;
     $262 = (($261) + 1)|0;
     $22 = $262;
    }
   }
   while(1) {
    $263 = $22;
    $264 = $7;
    $265 = ((($264)) + 4|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = ($263|0)<($266|0);
    if (!($267)) {
     break L23;
    }
    $21 = 0;
    while(1) {
     $268 = $21;
     $269 = $7;
     $270 = HEAP32[$269>>2]|0;
     $271 = ($268|0)<($270|0);
     if (!($271)) {
      break;
     }
     $272 = $7;
     $273 = (_stbi__get8($272)|0);
     $274 = $273&255;
     $32 = $274;
     $33 = 0;
     $275 = HEAP32[$27>>2]|0;
     $276 = ($275|0)==(4);
     if ($276) {
      $277 = $32;
      $278 = $277 & 15;
      $33 = $278;
      $279 = $32;
      $280 = $279 >> 4;
      $32 = $280;
     }
     $281 = $32;
     $282 = (($19) + ($281<<2)|0);
     $283 = HEAP8[$282>>0]|0;
     $284 = $13;
     $285 = $28;
     $286 = (($285) + 1)|0;
     $28 = $286;
     $287 = (($284) + ($285)|0);
     HEAP8[$287>>0] = $283;
     $288 = $32;
     $289 = (($19) + ($288<<2)|0);
     $290 = ((($289)) + 1|0);
     $291 = HEAP8[$290>>0]|0;
     $292 = $13;
     $293 = $28;
     $294 = (($293) + 1)|0;
     $28 = $294;
     $295 = (($292) + ($293)|0);
     HEAP8[$295>>0] = $291;
     $296 = $32;
     $297 = (($19) + ($296<<2)|0);
     $298 = ((($297)) + 2|0);
     $299 = HEAP8[$298>>0]|0;
     $300 = $13;
     $301 = $28;
     $302 = (($301) + 1)|0;
     $28 = $302;
     $303 = (($300) + ($301)|0);
     HEAP8[$303>>0] = $299;
     $304 = $26;
     $305 = ($304|0)==(4);
     if ($305) {
      $306 = $13;
      $307 = $28;
      $308 = (($307) + 1)|0;
      $28 = $308;
      $309 = (($306) + ($307)|0);
      HEAP8[$309>>0] = -1;
     }
     $310 = $21;
     $311 = (($310) + 1)|0;
     $312 = $7;
     $313 = HEAP32[$312>>2]|0;
     $314 = ($311|0)==($313|0);
     if ($314) {
      break;
     }
     $315 = HEAP32[$27>>2]|0;
     $316 = ($315|0)==(8);
     if ($316) {
      $317 = $7;
      $318 = (_stbi__get8($317)|0);
      $319 = $318&255;
      $321 = $319;
     } else {
      $320 = $33;
      $321 = $320;
     }
     $32 = $321;
     $322 = $32;
     $323 = (($19) + ($322<<2)|0);
     $324 = HEAP8[$323>>0]|0;
     $325 = $13;
     $326 = $28;
     $327 = (($326) + 1)|0;
     $28 = $327;
     $328 = (($325) + ($326)|0);
     HEAP8[$328>>0] = $324;
     $329 = $32;
     $330 = (($19) + ($329<<2)|0);
     $331 = ((($330)) + 1|0);
     $332 = HEAP8[$331>>0]|0;
     $333 = $13;
     $334 = $28;
     $335 = (($334) + 1)|0;
     $28 = $335;
     $336 = (($333) + ($334)|0);
     HEAP8[$336>>0] = $332;
     $337 = $32;
     $338 = (($19) + ($337<<2)|0);
     $339 = ((($338)) + 2|0);
     $340 = HEAP8[$339>>0]|0;
     $341 = $13;
     $342 = $28;
     $343 = (($342) + 1)|0;
     $28 = $343;
     $344 = (($341) + ($342)|0);
     HEAP8[$344>>0] = $340;
     $345 = $26;
     $346 = ($345|0)==(4);
     if ($346) {
      $347 = $13;
      $348 = $28;
      $349 = (($348) + 1)|0;
      $28 = $349;
      $350 = (($347) + ($348)|0);
      HEAP8[$350>>0] = -1;
     }
     $351 = $21;
     $352 = (($351) + 2)|0;
     $21 = $352;
    }
    $353 = $7;
    $354 = $25;
    _stbi__skip($353,$354);
    $355 = $22;
    $356 = (($355) + 1)|0;
    $22 = $356;
   }
  } else {
   $34 = 0;
   $35 = 0;
   $36 = 0;
   $37 = 0;
   $38 = 0;
   $39 = 0;
   $40 = 0;
   $41 = 0;
   $42 = 0;
   $43 = 0;
   $357 = $7;
   $358 = ((($27)) + 4|0);
   $359 = HEAP32[$358>>2]|0;
   $360 = (($359) - 14)|0;
   $361 = ((($27)) + 8|0);
   $362 = HEAP32[$361>>2]|0;
   $363 = (($360) - ($362))|0;
   _stbi__skip($357,$363);
   $364 = HEAP32[$27>>2]|0;
   $365 = ($364|0)==(24);
   do {
    if ($365) {
     $366 = $7;
     $367 = HEAP32[$366>>2]|0;
     $368 = ($367*3)|0;
     $23 = $368;
    } else {
     $369 = HEAP32[$27>>2]|0;
     $370 = ($369|0)==(16);
     if ($370) {
      $371 = $7;
      $372 = HEAP32[$371>>2]|0;
      $373 = $372<<1;
      $23 = $373;
      break;
     } else {
      $23 = 0;
      break;
     }
    }
   } while(0);
   $374 = $23;
   $375 = (0 - ($374))|0;
   $376 = $375 & 3;
   $25 = $376;
   $377 = HEAP32[$27>>2]|0;
   $378 = ($377|0)==(24);
   if ($378) {
    $43 = 1;
   } else {
    $379 = HEAP32[$27>>2]|0;
    $380 = ($379|0)==(32);
    if ($380) {
     $381 = $16;
     $382 = ($381|0)==(255);
     $383 = $15;
     $384 = ($383|0)==(65280);
     $or$cond5 = $382 & $384;
     $385 = $14;
     $386 = ($385|0)==(16711680);
     $or$cond7 = $or$cond5 & $386;
     $387 = $17;
     $388 = ($387|0)==(-16777216);
     $or$cond9 = $or$cond7 & $388;
     if ($or$cond9) {
      $43 = 2;
     }
    }
   }
   $389 = $43;
   $390 = ($389|0)!=(0);
   do {
    if (!($390)) {
     $391 = $14;
     $392 = ($391|0)!=(0);
     $393 = $15;
     $394 = ($393|0)!=(0);
     $or$cond11 = $392 & $394;
     $395 = $16;
     $396 = ($395|0)!=(0);
     $or$cond13 = $or$cond11 & $396;
     if ($or$cond13) {
      $403 = $14;
      $404 = (_stbi__high_bit($403)|0);
      $405 = (($404) - 7)|0;
      $34 = $405;
      $406 = $14;
      $407 = (_stbi__bitcount($406)|0);
      $38 = $407;
      $408 = $15;
      $409 = (_stbi__high_bit($408)|0);
      $410 = (($409) - 7)|0;
      $35 = $410;
      $411 = $15;
      $412 = (_stbi__bitcount($411)|0);
      $39 = $412;
      $413 = $16;
      $414 = (_stbi__high_bit($413)|0);
      $415 = (($414) - 7)|0;
      $36 = $415;
      $416 = $16;
      $417 = (_stbi__bitcount($416)|0);
      $40 = $417;
      $418 = $17;
      $419 = (_stbi__high_bit($418)|0);
      $420 = (($419) - 7)|0;
      $37 = $420;
      $421 = $17;
      $422 = (_stbi__bitcount($421)|0);
      $41 = $422;
      break;
     }
     $397 = $13;
     _free($397);
     $398 = (_stbi__err(6319)|0);
     $399 = ($398|0)!=(0);
     $400 = $399 ? 0 : 0;
     $401 = $400;
     $402 = $401;
     $6 = $402;
     $652 = $6;
     STACKTOP = sp;return ($652|0);
    }
   } while(0);
   $22 = 0;
   while(1) {
    $423 = $22;
    $424 = $7;
    $425 = ((($424)) + 4|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = ($423|0)<($426|0);
    if (!($427)) {
     break L23;
    }
    $428 = $43;
    $429 = ($428|0)!=(0);
    L105: do {
     if ($429) {
      $21 = 0;
      while(1) {
       $430 = $21;
       $431 = $7;
       $432 = HEAP32[$431>>2]|0;
       $433 = ($430|0)<($432|0);
       if (!($433)) {
        break L105;
       }
       $434 = $7;
       $435 = (_stbi__get8($434)|0);
       $436 = $13;
       $437 = $42;
       $438 = (($437) + 2)|0;
       $439 = (($436) + ($438)|0);
       HEAP8[$439>>0] = $435;
       $440 = $7;
       $441 = (_stbi__get8($440)|0);
       $442 = $13;
       $443 = $42;
       $444 = (($443) + 1)|0;
       $445 = (($442) + ($444)|0);
       HEAP8[$445>>0] = $441;
       $446 = $7;
       $447 = (_stbi__get8($446)|0);
       $448 = $13;
       $449 = $42;
       $450 = (($449) + 0)|0;
       $451 = (($448) + ($450)|0);
       HEAP8[$451>>0] = $447;
       $452 = $42;
       $453 = (($452) + 3)|0;
       $42 = $453;
       $454 = $43;
       $455 = ($454|0)==(2);
       if ($455) {
        $456 = $7;
        $457 = (_stbi__get8($456)|0);
        $458 = $457&255;
        $460 = $458;
       } else {
        $460 = 255;
       }
       $459 = $460&255;
       $44 = $459;
       $461 = $44;
       $462 = $461&255;
       $463 = $18;
       $464 = $463 | $462;
       $18 = $464;
       $465 = $26;
       $466 = ($465|0)==(4);
       if ($466) {
        $467 = $44;
        $468 = $13;
        $469 = $42;
        $470 = (($469) + 1)|0;
        $42 = $470;
        $471 = (($468) + ($469)|0);
        HEAP8[$471>>0] = $467;
       }
       $472 = $21;
       $473 = (($472) + 1)|0;
       $21 = $473;
      }
     } else {
      $474 = HEAP32[$27>>2]|0;
      $45 = $474;
      $21 = 0;
      while(1) {
       $475 = $21;
       $476 = $7;
       $477 = HEAP32[$476>>2]|0;
       $478 = ($475|0)<($477|0);
       if (!($478)) {
        break L105;
       }
       $479 = $45;
       $480 = ($479|0)==(16);
       $481 = $7;
       if ($480) {
        $482 = (_stbi__get16le($481)|0);
        $484 = $482;
       } else {
        $483 = (_stbi__get32le($481)|0);
        $484 = $483;
       }
       $46 = $484;
       $485 = $46;
       $486 = $14;
       $487 = $485 & $486;
       $488 = $34;
       $489 = $38;
       $490 = (_stbi__shiftsigned($487,$488,$489)|0);
       $491 = $490 & 255;
       $492 = $491&255;
       $493 = $13;
       $494 = $42;
       $495 = (($494) + 1)|0;
       $42 = $495;
       $496 = (($493) + ($494)|0);
       HEAP8[$496>>0] = $492;
       $497 = $46;
       $498 = $15;
       $499 = $497 & $498;
       $500 = $35;
       $501 = $39;
       $502 = (_stbi__shiftsigned($499,$500,$501)|0);
       $503 = $502 & 255;
       $504 = $503&255;
       $505 = $13;
       $506 = $42;
       $507 = (($506) + 1)|0;
       $42 = $507;
       $508 = (($505) + ($506)|0);
       HEAP8[$508>>0] = $504;
       $509 = $46;
       $510 = $16;
       $511 = $509 & $510;
       $512 = $36;
       $513 = $40;
       $514 = (_stbi__shiftsigned($511,$512,$513)|0);
       $515 = $514 & 255;
       $516 = $515&255;
       $517 = $13;
       $518 = $42;
       $519 = (($518) + 1)|0;
       $42 = $519;
       $520 = (($517) + ($518)|0);
       HEAP8[$520>>0] = $516;
       $521 = $17;
       $522 = ($521|0)!=(0);
       if ($522) {
        $523 = $46;
        $524 = $17;
        $525 = $523 & $524;
        $526 = $37;
        $527 = $41;
        $528 = (_stbi__shiftsigned($525,$526,$527)|0);
        $529 = $528;
       } else {
        $529 = 255;
       }
       $47 = $529;
       $530 = $47;
       $531 = $18;
       $532 = $531 | $530;
       $18 = $532;
       $533 = $26;
       $534 = ($533|0)==(4);
       if ($534) {
        $535 = $47;
        $536 = $535 & 255;
        $537 = $536&255;
        $538 = $13;
        $539 = $42;
        $540 = (($539) + 1)|0;
        $42 = $540;
        $541 = (($538) + ($539)|0);
        HEAP8[$541>>0] = $537;
       }
       $542 = $21;
       $543 = (($542) + 1)|0;
       $21 = $543;
      }
     }
    } while(0);
    $544 = $7;
    $545 = $25;
    _stbi__skip($544,$545);
    $546 = $22;
    $547 = (($546) + 1)|0;
    $22 = $547;
   }
  }
 } while(0);
 $548 = $26;
 $549 = ($548|0)==(4);
 $550 = $18;
 $551 = ($550|0)==(0);
 $or$cond15 = $549 & $551;
 L132: do {
  if ($or$cond15) {
   $552 = $7;
   $553 = HEAP32[$552>>2]|0;
   $554 = $553<<2;
   $555 = $7;
   $556 = ((($555)) + 4|0);
   $557 = HEAP32[$556>>2]|0;
   $558 = Math_imul($554, $557)|0;
   $559 = (($558) - 1)|0;
   $21 = $559;
   while(1) {
    $560 = $21;
    $561 = ($560|0)>=(0);
    if (!($561)) {
     break L132;
    }
    $562 = $13;
    $563 = $21;
    $564 = (($562) + ($563)|0);
    HEAP8[$564>>0] = -1;
    $565 = $21;
    $566 = (($565) - 4)|0;
    $21 = $566;
   }
  }
 } while(0);
 $567 = $24;
 $568 = ($567|0)!=(0);
 L138: do {
  if ($568) {
   $22 = 0;
   while(1) {
    $569 = $22;
    $570 = $7;
    $571 = ((($570)) + 4|0);
    $572 = HEAP32[$571>>2]|0;
    $573 = $572 >> 1;
    $574 = ($569|0)<($573|0);
    if (!($574)) {
     break L138;
    }
    $575 = $13;
    $576 = $22;
    $577 = $7;
    $578 = HEAP32[$577>>2]|0;
    $579 = Math_imul($576, $578)|0;
    $580 = $26;
    $581 = Math_imul($579, $580)|0;
    $582 = (($575) + ($581)|0);
    $49 = $582;
    $583 = $13;
    $584 = $7;
    $585 = ((($584)) + 4|0);
    $586 = HEAP32[$585>>2]|0;
    $587 = (($586) - 1)|0;
    $588 = $22;
    $589 = (($587) - ($588))|0;
    $590 = $7;
    $591 = HEAP32[$590>>2]|0;
    $592 = Math_imul($589, $591)|0;
    $593 = $26;
    $594 = Math_imul($592, $593)|0;
    $595 = (($583) + ($594)|0);
    $50 = $595;
    $21 = 0;
    while(1) {
     $596 = $21;
     $597 = $7;
     $598 = HEAP32[$597>>2]|0;
     $599 = $26;
     $600 = Math_imul($598, $599)|0;
     $601 = ($596|0)<($600|0);
     if (!($601)) {
      break;
     }
     $602 = $49;
     $603 = $21;
     $604 = (($602) + ($603)|0);
     $605 = HEAP8[$604>>0]|0;
     $48 = $605;
     $606 = $50;
     $607 = $21;
     $608 = (($606) + ($607)|0);
     $609 = HEAP8[$608>>0]|0;
     $610 = $49;
     $611 = $21;
     $612 = (($610) + ($611)|0);
     HEAP8[$612>>0] = $609;
     $613 = $48;
     $614 = $50;
     $615 = $21;
     $616 = (($614) + ($615)|0);
     HEAP8[$616>>0] = $613;
     $617 = $21;
     $618 = (($617) + 1)|0;
     $21 = $618;
    }
    $619 = $22;
    $620 = (($619) + 1)|0;
    $22 = $620;
   }
  }
 } while(0);
 $621 = $11;
 $622 = ($621|0)!=(0);
 if ($622) {
  $623 = $11;
  $624 = $26;
  $625 = ($623|0)!=($624|0);
  if ($625) {
   $626 = $13;
   $627 = $26;
   $628 = $11;
   $629 = $7;
   $630 = HEAP32[$629>>2]|0;
   $631 = $7;
   $632 = ((($631)) + 4|0);
   $633 = HEAP32[$632>>2]|0;
   $634 = (_stbi__convert_format($626,$627,$628,$630,$633)|0);
   $13 = $634;
   $635 = $13;
   $636 = ($635|0)==(0|0);
   if ($636) {
    $637 = $13;
    $6 = $637;
    $652 = $6;
    STACKTOP = sp;return ($652|0);
   }
  }
 }
 $638 = $7;
 $639 = HEAP32[$638>>2]|0;
 $640 = $8;
 HEAP32[$640>>2] = $639;
 $641 = $7;
 $642 = ((($641)) + 4|0);
 $643 = HEAP32[$642>>2]|0;
 $644 = $9;
 HEAP32[$644>>2] = $643;
 $645 = $10;
 $646 = ($645|0)!=(0|0);
 if ($646) {
  $647 = $7;
  $648 = ((($647)) + 8|0);
  $649 = HEAP32[$648>>2]|0;
  $650 = $10;
  HEAP32[$650>>2] = $649;
 }
 $651 = $13;
 $6 = $651;
 $652 = $6;
 STACKTOP = sp;return ($652|0);
}
function _stbi__gif_test($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_stbi__gif_test_raw($3)|0);
 $2 = $4;
 $5 = $1;
 _stbi__rewind($5);
 $6 = $2;
 STACKTOP = sp;return ($6|0);
}
function _stbi__gif_load($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $spec$store$select = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 34944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(34944|0);
 $13 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 _memset(($13|0),0,34904)|0;
 $14 = $6;
 $15 = $9;
 $16 = $10;
 $17 = (_stbi__gif_load_next($14,$13,$15,$16,0)|0);
 $12 = $17;
 $18 = $12;
 $19 = $6;
 $20 = ($18|0)==($19|0);
 $spec$store$select = $20 ? 0 : $17;
 $12 = $spec$store$select;
 $21 = $12;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = HEAP32[$13>>2]|0;
  $24 = $7;
  HEAP32[$24>>2] = $23;
  $25 = ((($13)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $8;
  HEAP32[$27>>2] = $26;
  $28 = $10;
  $29 = ($28|0)!=(0);
  $30 = $10;
  $31 = ($30|0)!=(4);
  $or$cond = $29 & $31;
  if ($or$cond) {
   $32 = $12;
   $33 = $10;
   $34 = HEAP32[$13>>2]|0;
   $35 = ((($13)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_stbi__convert_format($32,4,$33,$34,$36)|0);
   $12 = $37;
  }
 }
 $38 = ((($13)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 _free($39);
 $40 = ((($13)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 _free($41);
 $42 = $12;
 STACKTOP = sp;return ($42|0);
}
function _stbi__psd_test($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_stbi__get32be($3)|0);
 $5 = ($4|0)==(943870035);
 $6 = $5&1;
 $2 = $6;
 $7 = $1;
 _stbi__rewind($7);
 $8 = $2;
 STACKTOP = sp;return ($8|0);
}
function _stbi__psd_load($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $30 = 0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0;
 var $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0.0, $371 = 0.0;
 var $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $39 = $8;
 $40 = (_stbi__get32be($39)|0);
 $41 = ($40|0)!=(943870035);
 if ($41) {
  $42 = (_stbi__err(6538)|0);
  $43 = ($42|0)!=(0);
  $44 = $43 ? 0 : 0;
  $45 = $44;
  $46 = $45;
  $7 = $46;
  $430 = $7;
  STACKTOP = sp;return ($430|0);
 }
 $47 = $8;
 $48 = (_stbi__get16be($47)|0);
 $49 = ($48|0)!=(1);
 if ($49) {
  $50 = (_stbi__err(6546)|0);
  $51 = ($50|0)!=(0);
  $52 = $51 ? 0 : 0;
  $53 = $52;
  $54 = $53;
  $7 = $54;
  $430 = $7;
  STACKTOP = sp;return ($430|0);
 }
 $55 = $8;
 _stbi__skip($55,6);
 $56 = $8;
 $57 = (_stbi__get16be($56)|0);
 $16 = $57;
 $58 = $16;
 $59 = ($58|0)<(0);
 $60 = $16;
 $61 = ($60|0)>(16);
 $or$cond = $59 | $61;
 if ($or$cond) {
  $62 = (_stbi__err(6560)|0);
  $63 = ($62|0)!=(0);
  $64 = $63 ? 0 : 0;
  $65 = $64;
  $66 = $65;
  $7 = $66;
  $430 = $7;
  STACKTOP = sp;return ($430|0);
 }
 $67 = $8;
 $68 = (_stbi__get32be($67)|0);
 $22 = $68;
 $69 = $8;
 $70 = (_stbi__get32be($69)|0);
 $21 = $70;
 $71 = $8;
 $72 = (_stbi__get16be($71)|0);
 $20 = $72;
 $73 = $20;
 $74 = ($73|0)!=(8);
 $75 = $20;
 $76 = ($75|0)!=(16);
 $or$cond3 = $74 & $76;
 if ($or$cond3) {
  $77 = (_stbi__err(6580)|0);
  $78 = ($77|0)!=(0);
  $79 = $78 ? 0 : 0;
  $80 = $79;
  $81 = $80;
  $7 = $81;
  $430 = $7;
  STACKTOP = sp;return ($430|0);
 }
 $82 = $8;
 $83 = (_stbi__get16be($82)|0);
 $84 = ($83|0)!=(3);
 if ($84) {
  $85 = (_stbi__err(6602)|0);
  $86 = ($85|0)!=(0);
  $87 = $86 ? 0 : 0;
  $88 = $87;
  $89 = $88;
  $7 = $89;
  $430 = $7;
  STACKTOP = sp;return ($430|0);
 }
 $90 = $8;
 $91 = $8;
 $92 = (_stbi__get32be($91)|0);
 _stbi__skip($90,$92);
 $93 = $8;
 $94 = $8;
 $95 = (_stbi__get32be($94)|0);
 _stbi__skip($93,$95);
 $96 = $8;
 $97 = $8;
 $98 = (_stbi__get32be($97)|0);
 _stbi__skip($96,$98);
 $99 = $8;
 $100 = (_stbi__get16be($99)|0);
 $17 = $100;
 $101 = $17;
 $102 = ($101|0)>(1);
 if ($102) {
  $103 = (_stbi__err(6621)|0);
  $104 = ($103|0)!=(0);
  $105 = $104 ? 0 : 0;
  $106 = $105;
  $107 = $106;
  $7 = $107;
  $430 = $7;
  STACKTOP = sp;return ($430|0);
 }
 $108 = $21;
 $109 = $22;
 $110 = (_stbi__mad3sizes_valid(4,$108,$109,0)|0);
 $111 = ($110|0)!=(0);
 if (!($111)) {
  $112 = (_stbi__err(5330)|0);
  $113 = ($112|0)!=(0);
  $114 = $113 ? 0 : 0;
  $115 = $114;
  $116 = $115;
  $7 = $116;
  $430 = $7;
  STACKTOP = sp;return ($430|0);
 }
 $117 = $17;
 $118 = ($117|0)==(0);
 $119 = $20;
 $120 = ($119|0)==(16);
 $or$cond5 = $118 & $120;
 $121 = $14;
 $122 = ($121|0)==(16);
 $or$cond7 = $or$cond5 & $122;
 $123 = $21;
 if ($or$cond7) {
  $124 = $22;
  $125 = (_stbi__malloc_mad3(8,$123,$124,0)|0);
  $23 = $125;
  $126 = $13;
  HEAP32[$126>>2] = 16;
 } else {
  $127 = $123<<2;
  $128 = $22;
  $129 = Math_imul($127, $128)|0;
  $130 = (_stbi__malloc($129)|0);
  $23 = $130;
 }
 $131 = $23;
 $132 = ($131|0)!=(0|0);
 if (!($132)) {
  $133 = (_stbi__err(5340)|0);
  $134 = ($133|0)!=(0);
  $135 = $134 ? 0 : 0;
  $136 = $135;
  $137 = $136;
  $7 = $137;
  $430 = $7;
  STACKTOP = sp;return ($430|0);
 }
 $138 = $21;
 $139 = $22;
 $140 = Math_imul($138, $139)|0;
 $15 = $140;
 $141 = $17;
 $142 = ($141|0)!=(0);
 L37: do {
  if ($142) {
   $143 = $8;
   $144 = $22;
   $145 = $16;
   $146 = Math_imul($144, $145)|0;
   $147 = $146<<1;
   _stbi__skip($143,$147);
   $18 = 0;
   L39: while(1) {
    $148 = $18;
    $149 = ($148|0)<(4);
    if (!($149)) {
     break L37;
    }
    $150 = $23;
    $151 = $18;
    $152 = (($150) + ($151)|0);
    $24 = $152;
    $153 = $18;
    $154 = $16;
    $155 = ($153|0)>=($154|0);
    L42: do {
     if ($155) {
      $19 = 0;
      while(1) {
       $156 = $19;
       $157 = $15;
       $158 = ($156|0)<($157|0);
       if (!($158)) {
        break L42;
       }
       $159 = $18;
       $160 = ($159|0)==(3);
       $161 = $160 ? 255 : 0;
       $162 = $161&255;
       $163 = $24;
       HEAP8[$163>>0] = $162;
       $164 = $19;
       $165 = (($164) + 1)|0;
       $19 = $165;
       $166 = $24;
       $167 = ((($166)) + 4|0);
       $24 = $167;
      }
     } else {
      $168 = $8;
      $169 = $24;
      $170 = $15;
      $171 = (_stbi__psd_decode_rle($168,$169,$170)|0);
      $172 = ($171|0)!=(0);
      if (!($172)) {
       break L39;
      }
     }
    } while(0);
    $179 = $18;
    $180 = (($179) + 1)|0;
    $18 = $180;
   }
   $173 = $23;
   _free($173);
   $174 = (_stbi__err(6637)|0);
   $175 = ($174|0)!=(0);
   $176 = $175 ? 0 : 0;
   $177 = $176;
   $178 = $177;
   $7 = $178;
   $430 = $7;
   STACKTOP = sp;return ($430|0);
  } else {
   $18 = 0;
   while(1) {
    $181 = $18;
    $182 = ($181|0)<(4);
    if (!($182)) {
     break L37;
    }
    $183 = $18;
    $184 = $16;
    $185 = ($183|0)>=($184|0);
    L55: do {
     if ($185) {
      $186 = $20;
      $187 = ($186|0)==(16);
      $188 = $14;
      $189 = ($188|0)==(16);
      $or$cond9 = $187 & $189;
      $190 = $23;
      if ($or$cond9) {
       $191 = $18;
       $192 = (($190) + ($191<<1)|0);
       $25 = $192;
       $193 = $18;
       $194 = ($193|0)==(3);
       $195 = $194 ? 65535 : 0;
       $196 = $195&65535;
       $26 = $196;
       $19 = 0;
       while(1) {
        $197 = $19;
        $198 = $15;
        $199 = ($197|0)<($198|0);
        if (!($199)) {
         break L55;
        }
        $200 = $26;
        $201 = $25;
        HEAP16[$201>>1] = $200;
        $202 = $19;
        $203 = (($202) + 1)|0;
        $19 = $203;
        $204 = $25;
        $205 = ((($204)) + 8|0);
        $25 = $205;
       }
      } else {
       $206 = $18;
       $207 = (($190) + ($206)|0);
       $27 = $207;
       $208 = $18;
       $209 = ($208|0)==(3);
       $210 = $209 ? 255 : 0;
       $211 = $210&255;
       $28 = $211;
       $19 = 0;
       while(1) {
        $212 = $19;
        $213 = $15;
        $214 = ($212|0)<($213|0);
        if (!($214)) {
         break L55;
        }
        $215 = $28;
        $216 = $27;
        HEAP8[$216>>0] = $215;
        $217 = $19;
        $218 = (($217) + 1)|0;
        $19 = $218;
        $219 = $27;
        $220 = ((($219)) + 4|0);
        $27 = $220;
       }
      }
     } else {
      $221 = $13;
      $222 = HEAP32[$221>>2]|0;
      $223 = ($222|0)==(16);
      $224 = $23;
      if ($223) {
       $225 = $18;
       $226 = (($224) + ($225<<1)|0);
       $29 = $226;
       $19 = 0;
       while(1) {
        $227 = $19;
        $228 = $15;
        $229 = ($227|0)<($228|0);
        if (!($229)) {
         break L55;
        }
        $230 = $8;
        $231 = (_stbi__get16be($230)|0);
        $232 = $231&65535;
        $233 = $29;
        HEAP16[$233>>1] = $232;
        $234 = $19;
        $235 = (($234) + 1)|0;
        $19 = $235;
        $236 = $29;
        $237 = ((($236)) + 8|0);
        $29 = $237;
       }
      }
      $238 = $18;
      $239 = (($224) + ($238)|0);
      $30 = $239;
      $240 = $20;
      $241 = ($240|0)==(16);
      $19 = 0;
      if ($241) {
       while(1) {
        $242 = $19;
        $243 = $15;
        $244 = ($242|0)<($243|0);
        if (!($244)) {
         break L55;
        }
        $245 = $8;
        $246 = (_stbi__get16be($245)|0);
        $247 = $246 >> 8;
        $248 = $247&255;
        $249 = $30;
        HEAP8[$249>>0] = $248;
        $250 = $19;
        $251 = (($250) + 1)|0;
        $19 = $251;
        $252 = $30;
        $253 = ((($252)) + 4|0);
        $30 = $253;
       }
      } else {
       while(1) {
        $254 = $19;
        $255 = $15;
        $256 = ($254|0)<($255|0);
        if (!($256)) {
         break L55;
        }
        $257 = $8;
        $258 = (_stbi__get8($257)|0);
        $259 = $30;
        HEAP8[$259>>0] = $258;
        $260 = $19;
        $261 = (($260) + 1)|0;
        $19 = $261;
        $262 = $30;
        $263 = ((($262)) + 4|0);
        $30 = $263;
       }
      }
     }
    } while(0);
    $264 = $18;
    $265 = (($264) + 1)|0;
    $18 = $265;
   }
  }
 } while(0);
 $266 = $16;
 $267 = ($266|0)>=(4);
 L84: do {
  if ($267) {
   $268 = $13;
   $269 = HEAP32[$268>>2]|0;
   $270 = ($269|0)==(16);
   $19 = 0;
   if ($270) {
    while(1) {
     $271 = $19;
     $272 = $21;
     $273 = $22;
     $274 = Math_imul($272, $273)|0;
     $275 = ($271|0)<($274|0);
     if (!($275)) {
      break L84;
     }
     $276 = $23;
     $277 = $19;
     $278 = $277<<2;
     $279 = (($276) + ($278<<1)|0);
     $31 = $279;
     $280 = $31;
     $281 = ((($280)) + 6|0);
     $282 = HEAP16[$281>>1]|0;
     $283 = $282&65535;
     $284 = ($283|0)!=(0);
     if ($284) {
      $285 = $31;
      $286 = ((($285)) + 6|0);
      $287 = HEAP16[$286>>1]|0;
      $288 = $287&65535;
      $289 = ($288|0)!=(65535);
      if ($289) {
       $290 = $31;
       $291 = ((($290)) + 6|0);
       $292 = HEAP16[$291>>1]|0;
       $293 = $292&65535;
       $294 = (+($293|0));
       $295 = $294 / 65535.0;
       $32 = $295;
       $296 = $32;
       $297 = 1.0 / $296;
       $33 = $297;
       $298 = $33;
       $299 = 1.0 - $298;
       $300 = 65535.0 * $299;
       $34 = $300;
       $301 = $31;
       $302 = HEAP16[$301>>1]|0;
       $303 = $302&65535;
       $304 = (+($303|0));
       $305 = $33;
       $306 = $304 * $305;
       $307 = $34;
       $308 = $306 + $307;
       $309 = (~~(($308))&65535);
       $310 = $31;
       HEAP16[$310>>1] = $309;
       $311 = $31;
       $312 = ((($311)) + 2|0);
       $313 = HEAP16[$312>>1]|0;
       $314 = $313&65535;
       $315 = (+($314|0));
       $316 = $33;
       $317 = $315 * $316;
       $318 = $34;
       $319 = $317 + $318;
       $320 = (~~(($319))&65535);
       $321 = $31;
       $322 = ((($321)) + 2|0);
       HEAP16[$322>>1] = $320;
       $323 = $31;
       $324 = ((($323)) + 4|0);
       $325 = HEAP16[$324>>1]|0;
       $326 = $325&65535;
       $327 = (+($326|0));
       $328 = $33;
       $329 = $327 * $328;
       $330 = $34;
       $331 = $329 + $330;
       $332 = (~~(($331))&65535);
       $333 = $31;
       $334 = ((($333)) + 4|0);
       HEAP16[$334>>1] = $332;
      }
     }
     $335 = $19;
     $336 = (($335) + 1)|0;
     $19 = $336;
    }
   } else {
    while(1) {
     $337 = $19;
     $338 = $21;
     $339 = $22;
     $340 = Math_imul($338, $339)|0;
     $341 = ($337|0)<($340|0);
     if (!($341)) {
      break L84;
     }
     $342 = $23;
     $343 = $19;
     $344 = $343<<2;
     $345 = (($342) + ($344)|0);
     $35 = $345;
     $346 = $35;
     $347 = ((($346)) + 3|0);
     $348 = HEAP8[$347>>0]|0;
     $349 = $348&255;
     $350 = ($349|0)!=(0);
     if ($350) {
      $351 = $35;
      $352 = ((($351)) + 3|0);
      $353 = HEAP8[$352>>0]|0;
      $354 = $353&255;
      $355 = ($354|0)!=(255);
      if ($355) {
       $356 = $35;
       $357 = ((($356)) + 3|0);
       $358 = HEAP8[$357>>0]|0;
       $359 = $358&255;
       $360 = (+($359|0));
       $361 = $360 / 255.0;
       $36 = $361;
       $362 = $36;
       $363 = 1.0 / $362;
       $37 = $363;
       $364 = $37;
       $365 = 1.0 - $364;
       $366 = 255.0 * $365;
       $38 = $366;
       $367 = $35;
       $368 = HEAP8[$367>>0]|0;
       $369 = $368&255;
       $370 = (+($369|0));
       $371 = $37;
       $372 = $370 * $371;
       $373 = $38;
       $374 = $372 + $373;
       $375 = (~~(($374))&255);
       $376 = $35;
       HEAP8[$376>>0] = $375;
       $377 = $35;
       $378 = ((($377)) + 1|0);
       $379 = HEAP8[$378>>0]|0;
       $380 = $379&255;
       $381 = (+($380|0));
       $382 = $37;
       $383 = $381 * $382;
       $384 = $38;
       $385 = $383 + $384;
       $386 = (~~(($385))&255);
       $387 = $35;
       $388 = ((($387)) + 1|0);
       HEAP8[$388>>0] = $386;
       $389 = $35;
       $390 = ((($389)) + 2|0);
       $391 = HEAP8[$390>>0]|0;
       $392 = $391&255;
       $393 = (+($392|0));
       $394 = $37;
       $395 = $393 * $394;
       $396 = $38;
       $397 = $395 + $396;
       $398 = (~~(($397))&255);
       $399 = $35;
       $400 = ((($399)) + 2|0);
       HEAP8[$400>>0] = $398;
      }
     }
     $401 = $19;
     $402 = (($401) + 1)|0;
     $19 = $402;
    }
   }
  }
 } while(0);
 $403 = $12;
 $404 = ($403|0)!=(0);
 $405 = $12;
 $406 = ($405|0)!=(4);
 $or$cond11 = $404 & $406;
 if ($or$cond11) {
  $407 = $13;
  $408 = HEAP32[$407>>2]|0;
  $409 = ($408|0)==(16);
  $410 = $23;
  if ($409) {
   $411 = $12;
   $412 = $21;
   $413 = $22;
   $414 = (_stbi__convert_format16($410,4,$411,$412,$413)|0);
   $23 = $414;
  } else {
   $415 = $12;
   $416 = $21;
   $417 = $22;
   $418 = (_stbi__convert_format($410,4,$415,$416,$417)|0);
   $23 = $418;
  }
  $419 = $23;
  $420 = ($419|0)==(0|0);
  if ($420) {
   $421 = $23;
   $7 = $421;
   $430 = $7;
   STACKTOP = sp;return ($430|0);
  }
 }
 $422 = $11;
 $423 = ($422|0)!=(0|0);
 if ($423) {
  $424 = $11;
  HEAP32[$424>>2] = 4;
 }
 $425 = $22;
 $426 = $10;
 HEAP32[$426>>2] = $425;
 $427 = $21;
 $428 = $9;
 HEAP32[$428>>2] = $427;
 $429 = $23;
 $7 = $429;
 $430 = $7;
 STACKTOP = sp;return ($430|0);
}
function _stbi__pic_test($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_stbi__pic_test_core($3)|0);
 $2 = $4;
 $5 = $1;
 _stbi__rewind($5);
 $6 = $2;
 STACKTOP = sp;return ($6|0);
}
function _stbi__pic_load($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $17 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $18 = $10;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $10 = $17;
 }
 $14 = 0;
 while(1) {
  $20 = $14;
  $21 = ($20|0)<(92);
  $22 = $7;
  if (!($21)) {
   break;
  }
  (_stbi__get8($22)|0);
  $23 = $14;
  $24 = (($23) + 1)|0;
  $14 = $24;
 }
 $25 = (_stbi__get16be($22)|0);
 $15 = $25;
 $26 = $7;
 $27 = (_stbi__get16be($26)|0);
 $16 = $27;
 $28 = $7;
 $29 = (_stbi__at_eof($28)|0);
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = (_stbi__err(6655)|0);
  $32 = ($31|0)!=(0);
  $33 = $32 ? 0 : 0;
  $34 = $33;
  $35 = $34;
  $6 = $35;
  $78 = $6;
  STACKTOP = sp;return ($78|0);
 }
 $36 = $15;
 $37 = $16;
 $38 = (_stbi__mad3sizes_valid($36,$37,4,0)|0);
 $39 = ($38|0)!=(0);
 if (!($39)) {
  $40 = (_stbi__err(5330)|0);
  $41 = ($40|0)!=(0);
  $42 = $41 ? 0 : 0;
  $43 = $42;
  $44 = $43;
  $6 = $44;
  $78 = $6;
  STACKTOP = sp;return ($78|0);
 }
 $45 = $7;
 (_stbi__get32be($45)|0);
 $46 = $7;
 (_stbi__get16be($46)|0);
 $47 = $7;
 (_stbi__get16be($47)|0);
 $48 = $15;
 $49 = $16;
 $50 = (_stbi__malloc_mad3($48,$49,4,0)|0);
 $13 = $50;
 $51 = $13;
 $52 = $15;
 $53 = $16;
 $54 = Math_imul($52, $53)|0;
 $55 = $54<<2;
 _memset(($51|0),-1,($55|0))|0;
 $56 = $7;
 $57 = $15;
 $58 = $16;
 $59 = $10;
 $60 = $13;
 $61 = (_stbi__pic_load_core($56,$57,$58,$59,$60)|0);
 $62 = ($61|0)!=(0|0);
 if (!($62)) {
  $63 = $13;
  _free($63);
  $13 = 0;
 }
 $64 = $15;
 $65 = $8;
 HEAP32[$65>>2] = $64;
 $66 = $16;
 $67 = $9;
 HEAP32[$67>>2] = $66;
 $68 = $11;
 $69 = ($68|0)==(0);
 if ($69) {
  $70 = $10;
  $71 = HEAP32[$70>>2]|0;
  $11 = $71;
 }
 $72 = $13;
 $73 = $11;
 $74 = $15;
 $75 = $16;
 $76 = (_stbi__convert_format($72,4,$73,$74,$75)|0);
 $13 = $76;
 $77 = $13;
 $6 = $77;
 $78 = $6;
 STACKTOP = sp;return ($78|0);
}
function _stbi__pnm_test($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = (_stbi__get8($5)|0);
 $3 = $6;
 $7 = $2;
 $8 = (_stbi__get8($7)|0);
 $4 = $8;
 $9 = $3;
 $10 = $9 << 24 >> 24;
 $11 = ($10|0)!=(80);
 do {
  if (!($11)) {
   $12 = $4;
   $13 = $12 << 24 >> 24;
   $14 = ($13|0)!=(53);
   if ($14) {
    $15 = $4;
    $16 = $15 << 24 >> 24;
    $17 = ($16|0)!=(54);
    if ($17) {
     break;
    }
   }
   $1 = 1;
   $19 = $1;
   STACKTOP = sp;return ($19|0);
  }
 } while(0);
 $18 = $2;
 _stbi__rewind($18);
 $1 = 0;
 $19 = $1;
 STACKTOP = sp;return ($19|0);
}
function _stbi__pnm_load($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = $7;
 $15 = $7;
 $16 = $7;
 $17 = ((($16)) + 4|0);
 $18 = $7;
 $19 = ((($18)) + 8|0);
 $20 = (_stbi__pnm_info($14,$15,$17,$19)|0);
 $21 = ($20|0)!=(0);
 if (!($21)) {
  $6 = 0;
  $100 = $6;
  STACKTOP = sp;return ($100|0);
 }
 $22 = $7;
 $23 = HEAP32[$22>>2]|0;
 $24 = $8;
 HEAP32[$24>>2] = $23;
 $25 = $7;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $9;
 HEAP32[$28>>2] = $27;
 $29 = $10;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $7;
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $10;
  HEAP32[$34>>2] = $33;
 }
 $35 = $7;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $7;
 $39 = HEAP32[$38>>2]|0;
 $40 = $7;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (_stbi__mad3sizes_valid($37,$39,$42,0)|0);
 $44 = ($43|0)!=(0);
 if (!($44)) {
  $45 = (_stbi__err(5330)|0);
  $46 = ($45|0)!=(0);
  $47 = $46 ? 0 : 0;
  $48 = $47;
  $49 = $48;
  $6 = $49;
  $100 = $6;
  STACKTOP = sp;return ($100|0);
 }
 $50 = $7;
 $51 = ((($50)) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $7;
 $54 = HEAP32[$53>>2]|0;
 $55 = $7;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (_stbi__malloc_mad3($52,$54,$57,0)|0);
 $13 = $58;
 $59 = $13;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  $61 = (_stbi__err(5340)|0);
  $62 = ($61|0)!=(0);
  $63 = $62 ? 0 : 0;
  $64 = $63;
  $65 = $64;
  $6 = $65;
  $100 = $6;
  STACKTOP = sp;return ($100|0);
 }
 $66 = $7;
 $67 = $13;
 $68 = $7;
 $69 = ((($68)) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $7;
 $72 = HEAP32[$71>>2]|0;
 $73 = Math_imul($70, $72)|0;
 $74 = $7;
 $75 = ((($74)) + 4|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = Math_imul($73, $76)|0;
 (_stbi__getn($66,$67,$77)|0);
 $78 = $11;
 $79 = ($78|0)!=(0);
 if ($79) {
  $80 = $11;
  $81 = $7;
  $82 = ((($81)) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($80|0)!=($83|0);
  if ($84) {
   $85 = $13;
   $86 = $7;
   $87 = ((($86)) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $11;
   $90 = $7;
   $91 = HEAP32[$90>>2]|0;
   $92 = $7;
   $93 = ((($92)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (_stbi__convert_format($85,$88,$89,$91,$94)|0);
   $13 = $95;
   $96 = $13;
   $97 = ($96|0)==(0|0);
   if ($97) {
    $98 = $13;
    $6 = $98;
    $100 = $6;
    STACKTOP = sp;return ($100|0);
   }
  }
 }
 $99 = $13;
 $6 = $99;
 $100 = $6;
 STACKTOP = sp;return ($100|0);
}
function _stbi__hdr_load($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1136|0);
 $13 = sp;
 $14 = sp + 1080|0;
 $30 = sp + 1116|0;
 $31 = sp + 1112|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $15 = 0;
 $33 = $7;
 $34 = (_stbi__hdr_gettoken($33,$13)|0);
 $29 = $34;
 $35 = $29;
 $36 = (_strcmp($35,6691)|0);
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $29;
  $39 = (_strcmp($38,6702)|0);
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = (_stbi__err(6709)|0);
   $42 = ($41|0)!=(0);
   $43 = $42 ? 0 : 0;
   $44 = $43;
   $45 = $44;
   $6 = $45;
   $307 = $6;
   STACKTOP = sp;return ($307|0);
  }
 }
 while(1) {
  $46 = $7;
  $47 = (_stbi__hdr_gettoken($46,$13)|0);
  HEAP32[$14>>2] = $47;
  $48 = HEAP32[$14>>2]|0;
  $49 = HEAP8[$48>>0]|0;
  $50 = $49 << 24 >> 24;
  $51 = ($50|0)==(0);
  if ($51) {
   break;
  }
  $52 = HEAP32[$14>>2]|0;
  $53 = (_strcmp($52,6717)|0);
  $54 = ($53|0)==(0);
  if ($54) {
   $15 = 1;
  }
 }
 $55 = $15;
 $56 = ($55|0)!=(0);
 if (!($56)) {
  $57 = (_stbi__err(6740)|0);
  $58 = ($57|0)!=(0);
  $59 = $58 ? 0 : 0;
  $60 = $59;
  $61 = $60;
  $6 = $61;
  $307 = $6;
  STACKTOP = sp;return ($307|0);
 }
 $62 = $7;
 $63 = (_stbi__hdr_gettoken($62,$13)|0);
 HEAP32[$14>>2] = $63;
 $64 = HEAP32[$14>>2]|0;
 $65 = (_strncmp($64,6759,3)|0);
 $66 = ($65|0)!=(0);
 if ($66) {
  $67 = (_stbi__err(6763)|0);
  $68 = ($67|0)!=(0);
  $69 = $68 ? 0 : 0;
  $70 = $69;
  $71 = $70;
  $6 = $71;
  $307 = $6;
  STACKTOP = sp;return ($307|0);
 }
 $72 = HEAP32[$14>>2]|0;
 $73 = ((($72)) + 3|0);
 HEAP32[$14>>2] = $73;
 $74 = HEAP32[$14>>2]|0;
 $75 = (_strtol($74,$14,10)|0);
 $17 = $75;
 while(1) {
  $76 = HEAP32[$14>>2]|0;
  $77 = HEAP8[$76>>0]|0;
  $78 = $77 << 24 >> 24;
  $79 = ($78|0)==(32);
  $80 = HEAP32[$14>>2]|0;
  if (!($79)) {
   break;
  }
  $81 = ((($80)) + 1|0);
  HEAP32[$14>>2] = $81;
 }
 $82 = (_strncmp($80,6787,3)|0);
 $83 = ($82|0)!=(0);
 if ($83) {
  $84 = (_stbi__err(6763)|0);
  $85 = ($84|0)!=(0);
  $86 = $85 ? 0 : 0;
  $87 = $86;
  $88 = $87;
  $6 = $88;
  $307 = $6;
  STACKTOP = sp;return ($307|0);
 }
 $89 = HEAP32[$14>>2]|0;
 $90 = ((($89)) + 3|0);
 HEAP32[$14>>2] = $90;
 $91 = HEAP32[$14>>2]|0;
 $92 = (_strtol($91,0,10)|0);
 $16 = $92;
 $93 = $16;
 $94 = $8;
 HEAP32[$94>>2] = $93;
 $95 = $17;
 $96 = $9;
 HEAP32[$96>>2] = $95;
 $97 = $10;
 $98 = ($97|0)!=(0|0);
 if ($98) {
  $99 = $10;
  HEAP32[$99>>2] = 3;
 }
 $100 = $11;
 $101 = ($100|0)==(0);
 if ($101) {
  $11 = 3;
 }
 $102 = $16;
 $103 = $17;
 $104 = $11;
 $105 = (_stbi__mad4sizes_valid($102,$103,$104,4,0)|0);
 $106 = ($105|0)!=(0);
 if (!($106)) {
  $107 = (_stbi__err(5330)|0);
  $108 = ($107|0)!=(0);
  $109 = $108 ? 0 : 0;
  $110 = $109;
  $111 = $110;
  $6 = $111;
  $307 = $6;
  STACKTOP = sp;return ($307|0);
 }
 $112 = $16;
 $113 = $17;
 $114 = $11;
 $115 = (_stbi__malloc_mad4($112,$113,$114,4,0)|0);
 $19 = $115;
 $116 = $19;
 $117 = ($116|0)!=(0|0);
 if (!($117)) {
  $118 = (_stbi__err(5340)|0);
  $119 = ($118|0)!=(0);
  $120 = $119 ? 0 : 0;
  $121 = $120;
  $122 = $121;
  $6 = $122;
  $307 = $6;
  STACKTOP = sp;return ($307|0);
 }
 $123 = $16;
 $124 = ($123|0)<(8);
 $125 = $16;
 $126 = ($125|0)>=(32768);
 $or$cond = $124 | $126;
 do {
  if ($or$cond) {
   $24 = 0;
   label = 28;
  } else {
   $18 = 0;
   $24 = 0;
   L46: while(1) {
    $150 = $24;
    $151 = $17;
    $152 = ($150|0)<($151|0);
    if (!($152)) {
     label = 64;
     break;
    }
    $153 = $7;
    $154 = (_stbi__get8($153)|0);
    $155 = $154&255;
    $26 = $155;
    $156 = $7;
    $157 = (_stbi__get8($156)|0);
    $158 = $157&255;
    $27 = $158;
    $159 = $7;
    $160 = (_stbi__get8($159)|0);
    $161 = $160&255;
    $20 = $161;
    $162 = $26;
    $163 = ($162|0)!=(2);
    $164 = $27;
    $165 = ($164|0)!=(2);
    $or$cond3 = $163 | $165;
    if ($or$cond3) {
     label = 37;
     break;
    }
    $166 = $20;
    $167 = $166 & 128;
    $168 = ($167|0)!=(0);
    if ($168) {
     label = 37;
     break;
    }
    $183 = $20;
    $184 = $183 << 8;
    $20 = $184;
    $185 = $7;
    $186 = (_stbi__get8($185)|0);
    $187 = $186&255;
    $188 = $20;
    $189 = $188 | $187;
    $20 = $189;
    $190 = $20;
    $191 = $16;
    $192 = ($190|0)!=($191|0);
    if ($192) {
     label = 39;
     break;
    }
    $200 = $18;
    $201 = ($200|0)==(0|0);
    if ($201) {
     $202 = $16;
     $203 = (_stbi__malloc_mad2($202,4,0)|0);
     $18 = $203;
     $204 = $18;
     $205 = ($204|0)!=(0|0);
     if (!($205)) {
      label = 42;
      break;
     }
    }
    $25 = 0;
    while(1) {
     $212 = $25;
     $213 = ($212|0)<(4);
     $23 = 0;
     if (!($213)) {
      break;
     }
     while(1) {
      $214 = $16;
      $215 = $23;
      $216 = (($214) - ($215))|0;
      $32 = $216;
      $217 = ($216|0)>(0);
      if (!($217)) {
       break;
      }
      $218 = $7;
      $219 = (_stbi__get8($218)|0);
      $21 = $219;
      $220 = $21;
      $221 = $220&255;
      $222 = ($221|0)>(128);
      L61: do {
       if ($222) {
        $223 = $7;
        $224 = (_stbi__get8($223)|0);
        $22 = $224;
        $225 = $21;
        $226 = $225&255;
        $227 = (($226) - 128)|0;
        $228 = $227&255;
        $21 = $228;
        $229 = $21;
        $230 = $229&255;
        $231 = $32;
        $232 = ($230|0)>($231|0);
        if ($232) {
         label = 49;
         break L46;
        }
        $28 = 0;
        while(1) {
         $240 = $28;
         $241 = $21;
         $242 = $241&255;
         $243 = ($240|0)<($242|0);
         if (!($243)) {
          break L61;
         }
         $244 = $22;
         $245 = $18;
         $246 = $23;
         $247 = (($246) + 1)|0;
         $23 = $247;
         $248 = $246<<2;
         $249 = $25;
         $250 = (($248) + ($249))|0;
         $251 = (($245) + ($250)|0);
         HEAP8[$251>>0] = $244;
         $252 = $28;
         $253 = (($252) + 1)|0;
         $28 = $253;
        }
       } else {
        $254 = $21;
        $255 = $254&255;
        $256 = $32;
        $257 = ($255|0)>($256|0);
        if ($257) {
         label = 54;
         break L46;
        }
        $28 = 0;
        while(1) {
         $265 = $28;
         $266 = $21;
         $267 = $266&255;
         $268 = ($265|0)<($267|0);
         if (!($268)) {
          break L61;
         }
         $269 = $7;
         $270 = (_stbi__get8($269)|0);
         $271 = $18;
         $272 = $23;
         $273 = (($272) + 1)|0;
         $23 = $273;
         $274 = $272<<2;
         $275 = $25;
         $276 = (($274) + ($275))|0;
         $277 = (($271) + ($276)|0);
         HEAP8[$277>>0] = $270;
         $278 = $28;
         $279 = (($278) + 1)|0;
         $28 = $279;
        }
       }
      } while(0);
     }
     $280 = $25;
     $281 = (($280) + 1)|0;
     $25 = $281;
    }
    while(1) {
     $282 = $23;
     $283 = $16;
     $284 = ($282|0)<($283|0);
     if (!($284)) {
      break;
     }
     $285 = $19;
     $286 = $24;
     $287 = $16;
     $288 = Math_imul($286, $287)|0;
     $289 = $23;
     $290 = (($288) + ($289))|0;
     $291 = $11;
     $292 = Math_imul($290, $291)|0;
     $293 = (($285) + ($292<<2)|0);
     $294 = $18;
     $295 = $23;
     $296 = $295<<2;
     $297 = (($294) + ($296)|0);
     $298 = $11;
     _stbi__hdr_convert($293,$297,$298);
     $299 = $23;
     $300 = (($299) + 1)|0;
     $23 = $300;
    }
    $301 = $24;
    $302 = (($301) + 1)|0;
    $24 = $302;
   }
   if ((label|0) == 37) {
    $169 = $26;
    $170 = $169&255;
    HEAP8[$31>>0] = $170;
    $171 = $27;
    $172 = $171&255;
    $173 = ((($31)) + 1|0);
    HEAP8[$173>>0] = $172;
    $174 = $20;
    $175 = $174&255;
    $176 = ((($31)) + 2|0);
    HEAP8[$176>>0] = $175;
    $177 = $7;
    $178 = (_stbi__get8($177)|0);
    $179 = ((($31)) + 3|0);
    HEAP8[$179>>0] = $178;
    $180 = $19;
    $181 = $11;
    _stbi__hdr_convert($180,$31,$181);
    $23 = 1;
    $24 = 0;
    $182 = $18;
    _free($182);
    label = 31;
    break;
   }
   else if ((label|0) == 39) {
    $193 = $19;
    _free($193);
    $194 = $18;
    _free($194);
    $195 = (_stbi__err(6791)|0);
    $196 = ($195|0)!=(0);
    $197 = $196 ? 0 : 0;
    $198 = $197;
    $199 = $198;
    $6 = $199;
    $307 = $6;
    STACKTOP = sp;return ($307|0);
   }
   else if ((label|0) == 42) {
    $206 = $19;
    _free($206);
    $207 = (_stbi__err(5340)|0);
    $208 = ($207|0)!=(0);
    $209 = $208 ? 0 : 0;
    $210 = $209;
    $211 = $210;
    $6 = $211;
    $307 = $6;
    STACKTOP = sp;return ($307|0);
   }
   else if ((label|0) == 49) {
    $233 = $19;
    _free($233);
    $234 = $18;
    _free($234);
    $235 = (_stbi__err(6637)|0);
    $236 = ($235|0)!=(0);
    $237 = $236 ? 0 : 0;
    $238 = $237;
    $239 = $238;
    $6 = $239;
    $307 = $6;
    STACKTOP = sp;return ($307|0);
   }
   else if ((label|0) == 54) {
    $258 = $19;
    _free($258);
    $259 = $18;
    _free($259);
    $260 = (_stbi__err(6637)|0);
    $261 = ($260|0)!=(0);
    $262 = $261 ? 0 : 0;
    $263 = $262;
    $264 = $263;
    $6 = $264;
    $307 = $6;
    STACKTOP = sp;return ($307|0);
   }
   else if ((label|0) == 64) {
    $303 = $18;
    $304 = ($303|0)!=(0|0);
    if (!($304)) {
     label = 66;
     break;
    }
    $305 = $18;
    _free($305);
    label = 66;
    break;
   }
  }
 } while(0);
 while(1) {
  if ((label|0) == 28) {
   label = 0;
   $127 = $24;
   $128 = $17;
   $129 = ($127|0)<($128|0);
   if (!($129)) {
    label = 66;
    continue;
   }
   $23 = 0;
  }
  else if ((label|0) == 31) {
   label = 0;
   $133 = $7;
   (_stbi__getn($133,$30,4)|0);
   $134 = $19;
   $135 = $24;
   $136 = $16;
   $137 = Math_imul($135, $136)|0;
   $138 = $11;
   $139 = Math_imul($137, $138)|0;
   $140 = (($134) + ($139<<2)|0);
   $141 = $23;
   $142 = $11;
   $143 = Math_imul($141, $142)|0;
   $144 = (($140) + ($143<<2)|0);
   $145 = $11;
   _stbi__hdr_convert($144,$30,$145);
   $146 = $23;
   $147 = (($146) + 1)|0;
   $23 = $147;
  }
  else if ((label|0) == 66) {
   label = 0;
   $306 = $19;
   $6 = $306;
   break;
  }
  $130 = $23;
  $131 = $16;
  $132 = ($130|0)<($131|0);
  if ($132) {
   label = 31;
   continue;
  }
  $148 = $24;
  $149 = (($148) + 1)|0;
  $24 = $149;
  label = 28;
 }
 $307 = $6;
 STACKTOP = sp;return ($307|0);
}
function _stbi__hdr_to_ldr($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $15 = $5;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  $4 = 0;
  $104 = $4;
  STACKTOP = sp;return ($104|0);
 }
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = (_stbi__malloc_mad3($17,$18,$19,0)|0);
 $12 = $20;
 $21 = $12;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = $5;
  _free($23);
  $24 = (_stbi__err(5340)|0);
  $25 = ($24|0)!=(0);
  $26 = $25 ? 0 : 0;
  $27 = $26;
  $28 = $27;
  $4 = $28;
  $104 = $4;
  STACKTOP = sp;return ($104|0);
 }
 $29 = $8;
 $30 = $29 & 1;
 $31 = ($30|0)!=(0);
 $32 = $8;
 if ($31) {
  $11 = $32;
 } else {
  $33 = (($32) - 1)|0;
  $11 = $33;
 }
 $9 = 0;
 while(1) {
  $34 = $9;
  $35 = $6;
  $36 = $7;
  $37 = Math_imul($35, $36)|0;
  $38 = ($34|0)<($37|0);
  if (!($38)) {
   break;
  }
  $10 = 0;
  while(1) {
   $39 = $10;
   $40 = $11;
   $41 = ($39|0)<($40|0);
   if (!($41)) {
    break;
   }
   $42 = $5;
   $43 = $9;
   $44 = $8;
   $45 = Math_imul($43, $44)|0;
   $46 = $10;
   $47 = (($45) + ($46))|0;
   $48 = (($42) + ($47<<2)|0);
   $49 = +HEAPF32[$48>>2];
   $50 = $49 * 1.0;
   $51 = $50;
   $52 = 0.45454543828964233;
   $53 = (+Math_pow((+$51),(+$52)));
   $54 = $53;
   $55 = $54 * 255.0;
   $56 = $55 + 0.5;
   $13 = $56;
   $57 = $13;
   $58 = $57 < 0.0;
   if ($58) {
    $13 = 0.0;
   }
   $59 = $13;
   $60 = $59 > 255.0;
   if ($60) {
    $13 = 255.0;
   }
   $61 = $13;
   $62 = (~~(($61)));
   $63 = $62&255;
   $64 = $12;
   $65 = $9;
   $66 = $8;
   $67 = Math_imul($65, $66)|0;
   $68 = $10;
   $69 = (($67) + ($68))|0;
   $70 = (($64) + ($69)|0);
   HEAP8[$70>>0] = $63;
   $71 = $10;
   $72 = (($71) + 1)|0;
   $10 = $72;
  }
  $73 = $10;
  $74 = $8;
  $75 = ($73|0)<($74|0);
  if ($75) {
   $76 = $5;
   $77 = $9;
   $78 = $8;
   $79 = Math_imul($77, $78)|0;
   $80 = $10;
   $81 = (($79) + ($80))|0;
   $82 = (($76) + ($81<<2)|0);
   $83 = +HEAPF32[$82>>2];
   $84 = $83 * 255.0;
   $85 = $84 + 0.5;
   $14 = $85;
   $86 = $14;
   $87 = $86 < 0.0;
   if ($87) {
    $14 = 0.0;
   }
   $88 = $14;
   $89 = $88 > 255.0;
   if ($89) {
    $14 = 255.0;
   }
   $90 = $14;
   $91 = (~~(($90)));
   $92 = $91&255;
   $93 = $12;
   $94 = $9;
   $95 = $8;
   $96 = Math_imul($94, $95)|0;
   $97 = $10;
   $98 = (($96) + ($97))|0;
   $99 = (($93) + ($98)|0);
   HEAP8[$99>>0] = $92;
  }
  $100 = $9;
  $101 = (($100) + 1)|0;
  $9 = $101;
 }
 $102 = $5;
 _free($102);
 $103 = $12;
 $4 = $103;
 $104 = $4;
 STACKTOP = sp;return ($104|0);
}
function _stbi__tga_test($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $5 = $1;
 (_stbi__get8($5)|0);
 $6 = $1;
 $7 = (_stbi__get8($6)|0);
 $8 = $7&255;
 $4 = $8;
 $9 = $4;
 $10 = ($9|0)>(1);
 do {
  if (!($10)) {
   $11 = $1;
   $12 = (_stbi__get8($11)|0);
   $13 = $12&255;
   $3 = $13;
   $14 = $4;
   $15 = ($14|0)==(1);
   $16 = $3;
   if ($15) {
    $17 = ($16|0)!=(1);
    $18 = $3;
    $19 = ($18|0)!=(9);
    $or$cond = $17 & $19;
    if ($or$cond) {
     break;
    }
    $20 = $1;
    _stbi__skip($20,4);
    $21 = $1;
    $22 = (_stbi__get8($21)|0);
    $23 = $22&255;
    $3 = $23;
    $24 = $3;
    $25 = ($24|0)!=(8);
    $26 = $3;
    $27 = ($26|0)!=(15);
    $or$cond3 = $25 & $27;
    $28 = $3;
    $29 = ($28|0)!=(16);
    $or$cond5 = $or$cond3 & $29;
    $30 = $3;
    $31 = ($30|0)!=(24);
    $or$cond7 = $or$cond5 & $31;
    $32 = $3;
    $33 = ($32|0)!=(32);
    $or$cond9 = $or$cond7 & $33;
    if ($or$cond9) {
     break;
    }
    $34 = $1;
    _stbi__skip($34,4);
   } else {
    $35 = ($16|0)!=(2);
    $36 = $3;
    $37 = ($36|0)!=(3);
    $or$cond11 = $35 & $37;
    $38 = $3;
    $39 = ($38|0)!=(10);
    $or$cond13 = $or$cond11 & $39;
    $40 = $3;
    $41 = ($40|0)!=(11);
    $or$cond15 = $or$cond13 & $41;
    if ($or$cond15) {
     break;
    }
    $42 = $1;
    _stbi__skip($42,9);
   }
   $43 = $1;
   $44 = (_stbi__get16le($43)|0);
   $45 = ($44|0)<(1);
   if (!($45)) {
    $46 = $1;
    $47 = (_stbi__get16le($46)|0);
    $48 = ($47|0)<(1);
    if (!($48)) {
     $49 = $1;
     $50 = (_stbi__get8($49)|0);
     $51 = $50&255;
     $3 = $51;
     $52 = $4;
     $53 = ($52|0)==(1);
     $54 = $3;
     $55 = ($54|0)!=(8);
     $or$cond17 = $53 & $55;
     $56 = $3;
     $57 = ($56|0)!=(16);
     $or$cond19 = $or$cond17 & $57;
     if (!($or$cond19)) {
      $58 = $3;
      $59 = ($58|0)!=(8);
      $60 = $3;
      $61 = ($60|0)!=(15);
      $or$cond21 = $59 & $61;
      $62 = $3;
      $63 = ($62|0)!=(16);
      $or$cond23 = $or$cond21 & $63;
      $64 = $3;
      $65 = ($64|0)!=(24);
      $or$cond25 = $or$cond23 & $65;
      $66 = $3;
      $67 = ($66|0)!=(32);
      $or$cond27 = $or$cond25 & $67;
      if (!($or$cond27)) {
       $2 = 1;
      }
     }
    }
   }
  }
 } while(0);
 $68 = $1;
 _stbi__rewind($68);
 $69 = $2;
 STACKTOP = sp;return ($69|0);
}
function _stbi__tga_load($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $26 = sp + 64|0;
 $32 = sp + 152|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $46 = $7;
 $47 = (_stbi__get8($46)|0);
 $48 = $47&255;
 $13 = $48;
 $49 = $7;
 $50 = (_stbi__get8($49)|0);
 $51 = $50&255;
 $14 = $51;
 $52 = $7;
 $53 = (_stbi__get8($52)|0);
 $54 = $53&255;
 $15 = $54;
 $16 = 0;
 $55 = $7;
 $56 = (_stbi__get16le($55)|0);
 $17 = $56;
 $57 = $7;
 $58 = (_stbi__get16le($57)|0);
 $18 = $58;
 $59 = $7;
 $60 = (_stbi__get8($59)|0);
 $61 = $60&255;
 $19 = $61;
 $62 = $7;
 $63 = (_stbi__get16le($62)|0);
 $20 = $63;
 $64 = $7;
 $65 = (_stbi__get16le($64)|0);
 $21 = $65;
 $66 = $7;
 $67 = (_stbi__get16le($66)|0);
 $22 = $67;
 $68 = $7;
 $69 = (_stbi__get16le($68)|0);
 $23 = $69;
 $70 = $7;
 $71 = (_stbi__get8($70)|0);
 $72 = $71&255;
 $24 = $72;
 HEAP32[$26>>2] = 0;
 $73 = $7;
 $74 = (_stbi__get8($73)|0);
 $75 = $74&255;
 $27 = $75;
 $29 = 0;
 ;HEAP8[$32>>0]=0|0;HEAP8[$32+1>>0]=0|0;HEAP8[$32+2>>0]=0|0;HEAP8[$32+3>>0]=0|0;
 $33 = 0;
 $34 = 0;
 $35 = 1;
 $76 = $15;
 $77 = ($76|0)>=(8);
 if ($77) {
  $78 = $15;
  $79 = (($78) - 8)|0;
  $15 = $79;
  $16 = 1;
 }
 $80 = $27;
 $81 = $80 >> 5;
 $82 = $81 & 1;
 $83 = (1 - ($82))|0;
 $27 = $83;
 $84 = $14;
 $85 = ($84|0)!=(0);
 if ($85) {
  $86 = $19;
  $87 = (_stbi__tga_get_comp($86,0,$26)|0);
  $25 = $87;
 } else {
  $88 = $24;
  $89 = $15;
  $90 = ($89|0)==(3);
  $91 = $90&1;
  $92 = (_stbi__tga_get_comp($88,$91,$26)|0);
  $25 = $92;
 }
 $93 = $25;
 $94 = ($93|0)!=(0);
 if (!($94)) {
  $95 = (_stbi__err(6664)|0);
  $96 = ($95|0)!=(0);
  $97 = $96 ? 0 : 0;
  $98 = $97;
  $99 = $98;
  $6 = $99;
  $374 = $6;
  STACKTOP = sp;return ($374|0);
 }
 $100 = $22;
 $101 = $8;
 HEAP32[$101>>2] = $100;
 $102 = $23;
 $103 = $9;
 HEAP32[$103>>2] = $102;
 $104 = $10;
 $105 = ($104|0)!=(0|0);
 if ($105) {
  $106 = $25;
  $107 = $10;
  HEAP32[$107>>2] = $106;
 }
 $108 = $22;
 $109 = $23;
 $110 = $25;
 $111 = (_stbi__mad3sizes_valid($108,$109,$110,0)|0);
 $112 = ($111|0)!=(0);
 if (!($112)) {
  $113 = (_stbi__err(5330)|0);
  $114 = ($113|0)!=(0);
  $115 = $114 ? 0 : 0;
  $116 = $115;
  $117 = $116;
  $6 = $117;
  $374 = $6;
  STACKTOP = sp;return ($374|0);
 }
 $118 = $22;
 $119 = $23;
 $120 = $25;
 $121 = (_stbi__malloc_mad3($118,$119,$120,0)|0);
 $28 = $121;
 $122 = $28;
 $123 = ($122|0)!=(0|0);
 if (!($123)) {
  $124 = (_stbi__err(5340)|0);
  $125 = ($124|0)!=(0);
  $126 = $125 ? 0 : 0;
  $127 = $126;
  $128 = $127;
  $6 = $128;
  $374 = $6;
  STACKTOP = sp;return ($374|0);
 }
 $129 = $7;
 $130 = $13;
 _stbi__skip($129,$130);
 $131 = $14;
 $132 = ($131|0)!=(0);
 $133 = $16;
 $134 = ($133|0)!=(0);
 $or$cond = $132 | $134;
 $135 = HEAP32[$26>>2]|0;
 $136 = ($135|0)!=(0);
 $or$cond3 = $or$cond | $136;
 L23: do {
  if ($or$cond3) {
   $162 = $14;
   $163 = ($162|0)!=(0);
   L25: do {
    if ($163) {
     $164 = $7;
     $165 = $17;
     _stbi__skip($164,$165);
     $166 = $18;
     $167 = $25;
     $168 = (_stbi__malloc_mad2($166,$167,0)|0);
     $29 = $168;
     $169 = $29;
     $170 = ($169|0)!=(0|0);
     if (!($170)) {
      $171 = $28;
      _free($171);
      $172 = (_stbi__err(5340)|0);
      $173 = ($172|0)!=(0);
      $174 = $173 ? 0 : 0;
      $175 = $174;
      $176 = $175;
      $6 = $176;
      $374 = $6;
      STACKTOP = sp;return ($374|0);
     }
     $177 = HEAP32[$26>>2]|0;
     $178 = ($177|0)!=(0);
     if (!($178)) {
      $192 = $7;
      $193 = $29;
      $194 = $18;
      $195 = $25;
      $196 = Math_imul($194, $195)|0;
      $197 = (_stbi__getn($192,$193,$196)|0);
      $198 = ($197|0)!=(0);
      if ($198) {
       break;
      }
      $199 = $28;
      _free($199);
      $200 = $29;
      _free($200);
      $201 = (_stbi__err(6859)|0);
      $202 = ($201|0)!=(0);
      $203 = $202 ? 0 : 0;
      $204 = $203;
      $205 = $204;
      $6 = $205;
      $374 = $6;
      STACKTOP = sp;return ($374|0);
     }
     $179 = $29;
     $38 = $179;
     $180 = $25;
     $181 = ($180|0)==(3);
     if (!($181)) {
      ___assert_fail((6823|0),(4971|0),5532,(6844|0));
      // unreachable;
     }
     $30 = 0;
     while(1) {
      $182 = $30;
      $183 = $18;
      $184 = ($182|0)<($183|0);
      if (!($184)) {
       break L25;
      }
      $185 = $7;
      $186 = $38;
      _stbi__tga_read_rgb16($185,$186);
      $187 = $25;
      $188 = $38;
      $189 = (($188) + ($187)|0);
      $38 = $189;
      $190 = $30;
      $191 = (($190) + 1)|0;
      $30 = $191;
     }
    }
   } while(0);
   $30 = 0;
   L43: while(1) {
    $206 = $30;
    $207 = $22;
    $208 = $23;
    $209 = Math_imul($207, $208)|0;
    $210 = ($206|0)<($209|0);
    if (!($210)) {
     break;
    }
    $211 = $16;
    $212 = ($211|0)!=(0);
    do {
     if ($212) {
      $213 = $33;
      $214 = ($213|0)==(0);
      if ($214) {
       $215 = $7;
       $216 = (_stbi__get8($215)|0);
       $217 = $216&255;
       $39 = $217;
       $218 = $39;
       $219 = $218 & 127;
       $220 = (1 + ($219))|0;
       $33 = $220;
       $221 = $39;
       $222 = $221 >> 7;
       $34 = $222;
       $35 = 1;
       break;
      }
      $223 = $34;
      $224 = ($223|0)!=(0);
      if (!($224)) {
       $35 = 1;
      }
     } else {
      $35 = 1;
     }
    } while(0);
    $225 = $35;
    $226 = ($225|0)!=(0);
    if ($226) {
     $227 = $14;
     $228 = ($227|0)!=(0);
     L56: do {
      if ($228) {
       $229 = $24;
       $230 = ($229|0)==(8);
       $231 = $7;
       if ($230) {
        $232 = (_stbi__get8($231)|0);
        $233 = $232&255;
        $235 = $233;
       } else {
        $234 = (_stbi__get16le($231)|0);
        $235 = $234;
       }
       $40 = $235;
       $236 = $40;
       $237 = $18;
       $238 = ($236|0)>=($237|0);
       $spec$store$select = $238 ? 0 : $235;
       $40 = $spec$store$select;
       $239 = $25;
       $240 = $40;
       $241 = Math_imul($240, $239)|0;
       $40 = $241;
       $31 = 0;
       while(1) {
        $242 = $31;
        $243 = $25;
        $244 = ($242|0)<($243|0);
        if (!($244)) {
         break L56;
        }
        $245 = $29;
        $246 = $40;
        $247 = $31;
        $248 = (($246) + ($247))|0;
        $249 = (($245) + ($248)|0);
        $250 = HEAP8[$249>>0]|0;
        $251 = $31;
        $252 = (($32) + ($251)|0);
        HEAP8[$252>>0] = $250;
        $253 = $31;
        $254 = (($253) + 1)|0;
        $31 = $254;
       }
      } else {
       $255 = HEAP32[$26>>2]|0;
       $256 = ($255|0)!=(0);
       if ($256) {
        $257 = $25;
        $258 = ($257|0)==(3);
        if (!($258)) {
         label = 50;
         break L43;
        }
        $259 = $7;
        _stbi__tga_read_rgb16($259,$32);
        break;
       }
       $31 = 0;
       while(1) {
        $260 = $31;
        $261 = $25;
        $262 = ($260|0)<($261|0);
        if (!($262)) {
         break L56;
        }
        $263 = $7;
        $264 = (_stbi__get8($263)|0);
        $265 = $31;
        $266 = (($32) + ($265)|0);
        HEAP8[$266>>0] = $264;
        $267 = $31;
        $268 = (($267) + 1)|0;
        $31 = $268;
       }
      }
     } while(0);
     $35 = 0;
    }
    $31 = 0;
    while(1) {
     $269 = $31;
     $270 = $25;
     $271 = ($269|0)<($270|0);
     if (!($271)) {
      break;
     }
     $272 = $31;
     $273 = (($32) + ($272)|0);
     $274 = HEAP8[$273>>0]|0;
     $275 = $28;
     $276 = $30;
     $277 = $25;
     $278 = Math_imul($276, $277)|0;
     $279 = $31;
     $280 = (($278) + ($279))|0;
     $281 = (($275) + ($280)|0);
     HEAP8[$281>>0] = $274;
     $282 = $31;
     $283 = (($282) + 1)|0;
     $31 = $283;
    }
    $284 = $33;
    $285 = (($284) + -1)|0;
    $33 = $285;
    $286 = $30;
    $287 = (($286) + 1)|0;
    $30 = $287;
   }
   if ((label|0) == 50) {
    ___assert_fail((6823|0),(4971|0),5581,(6844|0));
    // unreachable;
   }
   $288 = $27;
   $289 = ($288|0)!=(0);
   L82: do {
    if ($289) {
     $31 = 0;
     while(1) {
      $290 = $31;
      $291 = $290<<1;
      $292 = $23;
      $293 = ($291|0)<($292|0);
      if (!($293)) {
       break L82;
      }
      $294 = $31;
      $295 = $22;
      $296 = Math_imul($294, $295)|0;
      $297 = $25;
      $298 = Math_imul($296, $297)|0;
      $41 = $298;
      $299 = $23;
      $300 = (($299) - 1)|0;
      $301 = $31;
      $302 = (($300) - ($301))|0;
      $303 = $22;
      $304 = Math_imul($302, $303)|0;
      $305 = $25;
      $306 = Math_imul($304, $305)|0;
      $42 = $306;
      $307 = $22;
      $308 = $25;
      $309 = Math_imul($307, $308)|0;
      $30 = $309;
      while(1) {
       $310 = $30;
       $311 = ($310|0)>(0);
       if (!($311)) {
        break;
       }
       $312 = $28;
       $313 = $41;
       $314 = (($312) + ($313)|0);
       $315 = HEAP8[$314>>0]|0;
       $43 = $315;
       $316 = $28;
       $317 = $42;
       $318 = (($316) + ($317)|0);
       $319 = HEAP8[$318>>0]|0;
       $320 = $28;
       $321 = $41;
       $322 = (($320) + ($321)|0);
       HEAP8[$322>>0] = $319;
       $323 = $43;
       $324 = $28;
       $325 = $42;
       $326 = (($324) + ($325)|0);
       HEAP8[$326>>0] = $323;
       $327 = $41;
       $328 = (($327) + 1)|0;
       $41 = $328;
       $329 = $42;
       $330 = (($329) + 1)|0;
       $42 = $330;
       $331 = $30;
       $332 = (($331) + -1)|0;
       $30 = $332;
      }
      $333 = $31;
      $334 = (($333) + 1)|0;
      $31 = $334;
     }
    }
   } while(0);
   $335 = $29;
   $336 = ($335|0)!=(0|0);
   if ($336) {
    $337 = $29;
    _free($337);
   }
  } else {
   $30 = 0;
   while(1) {
    $137 = $30;
    $138 = $23;
    $139 = ($137|0)<($138|0);
    if (!($139)) {
     break L23;
    }
    $140 = $27;
    $141 = ($140|0)!=(0);
    if ($141) {
     $142 = $23;
     $143 = $30;
     $144 = (($142) - ($143))|0;
     $145 = (($144) - 1)|0;
     $147 = $145;
    } else {
     $146 = $30;
     $147 = $146;
    }
    $36 = $147;
    $148 = $28;
    $149 = $36;
    $150 = $22;
    $151 = Math_imul($149, $150)|0;
    $152 = $25;
    $153 = Math_imul($151, $152)|0;
    $154 = (($148) + ($153)|0);
    $37 = $154;
    $155 = $7;
    $156 = $37;
    $157 = $22;
    $158 = $25;
    $159 = Math_imul($157, $158)|0;
    (_stbi__getn($155,$156,$159)|0);
    $160 = $30;
    $161 = (($160) + 1)|0;
    $30 = $161;
   }
  }
 } while(0);
 $338 = $25;
 $339 = ($338|0)<(3);
 $340 = HEAP32[$26>>2]|0;
 $341 = ($340|0)!=(0);
 $or$cond5 = $339 | $341;
 L102: do {
  if (!($or$cond5)) {
   $342 = $28;
   $44 = $342;
   $30 = 0;
   while(1) {
    $343 = $30;
    $344 = $22;
    $345 = $23;
    $346 = Math_imul($344, $345)|0;
    $347 = ($343|0)<($346|0);
    if (!($347)) {
     break L102;
    }
    $348 = $44;
    $349 = HEAP8[$348>>0]|0;
    $45 = $349;
    $350 = $44;
    $351 = ((($350)) + 2|0);
    $352 = HEAP8[$351>>0]|0;
    $353 = $44;
    HEAP8[$353>>0] = $352;
    $354 = $45;
    $355 = $44;
    $356 = ((($355)) + 2|0);
    HEAP8[$356>>0] = $354;
    $357 = $25;
    $358 = $44;
    $359 = (($358) + ($357)|0);
    $44 = $359;
    $360 = $30;
    $361 = (($360) + 1)|0;
    $30 = $361;
   }
  }
 } while(0);
 $362 = $11;
 $363 = ($362|0)!=(0);
 if ($363) {
  $364 = $11;
  $365 = $25;
  $366 = ($364|0)!=($365|0);
  if ($366) {
   $367 = $28;
   $368 = $25;
   $369 = $11;
   $370 = $22;
   $371 = $23;
   $372 = (_stbi__convert_format($367,$368,$369,$370,$371)|0);
   $28 = $372;
  }
 }
 $21 = 0;
 $20 = 0;
 $19 = 0;
 $18 = 0;
 $17 = 0;
 $373 = $28;
 $6 = $373;
 $374 = $6;
 STACKTOP = sp;return ($374|0);
}
function _stbi__setup_jpeg($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 18444|0);
 HEAP32[$3>>2] = 8;
 $4 = $1;
 $5 = ((($4)) + 18448|0);
 HEAP32[$5>>2] = 9;
 $6 = $1;
 $7 = ((($6)) + 18452|0);
 HEAP32[$7>>2] = 10;
 STACKTOP = sp;return;
}
function _stbi__decode_jpeg_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ((($6)) + 18404|0);
 HEAP32[$7>>2] = 0;
 $8 = $3;
 $9 = ((($8)) + 18408|0);
 HEAP32[$9>>2] = -1;
 $10 = $3;
 $11 = ((($10)) + 18372|0);
 HEAP8[$11>>0] = -1;
 $12 = $3;
 $13 = (_stbi__get_marker($12)|0);
 $14 = $13&255;
 $5 = $14;
 $15 = $5;
 $16 = ($15|0)==(216);
 if (!($16)) {
  $17 = (_stbi__err(5089)|0);
  $2 = $17;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 $18 = $4;
 $19 = ($18|0)==(1);
 if ($19) {
  $2 = 1;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 $20 = $3;
 $21 = (_stbi__get_marker($20)|0);
 $22 = $21&255;
 $5 = $22;
 L9: while(1) {
  $23 = $5;
  $24 = ($23|0)==(192);
  $25 = $5;
  $26 = ($25|0)==(193);
  $or$cond = $24 | $26;
  if ($or$cond) {
   $30 = 1;
  } else {
   $27 = $5;
   $28 = ($27|0)==(194);
   $30 = $28;
  }
  $29 = $30 ^ 1;
  if (!($29)) {
   label = 17;
   break;
  }
  $31 = $3;
  $32 = $5;
  $33 = (_stbi__process_marker($31,$32)|0);
  $34 = ($33|0)!=(0);
  if (!($34)) {
   label = 10;
   break;
  }
  $35 = $3;
  $36 = (_stbi__get_marker($35)|0);
  $37 = $36&255;
  $5 = $37;
  while(1) {
   $38 = $5;
   $39 = ($38|0)==(255);
   if (!($39)) {
    break;
   }
   $40 = $3;
   $41 = HEAP32[$40>>2]|0;
   $42 = (_stbi__at_eof($41)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    label = 14;
    break L9;
   }
   $45 = $3;
   $46 = (_stbi__get_marker($45)|0);
   $47 = $46&255;
   $5 = $47;
  }
 }
 if ((label|0) == 10) {
  $2 = 0;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 14) {
  $44 = (_stbi__err(5096)|0);
  $2 = $44;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 17) {
  $48 = $5;
  $49 = ($48|0)==(194);
  $50 = $49&1;
  $51 = $3;
  $52 = ((($51)) + 18380|0);
  HEAP32[$52>>2] = $50;
  $53 = $3;
  $54 = $4;
  $55 = (_stbi__process_frame_header($53,$54)|0);
  $56 = ($55|0)!=(0);
  if ($56) {
   $2 = 1;
   $57 = $2;
   STACKTOP = sp;return ($57|0);
  } else {
   $2 = 0;
   $57 = $2;
   STACKTOP = sp;return ($57|0);
  }
 }
 return (0)|0;
}
function _stbi__rewind($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 176|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 168|0);
 HEAP32[$6>>2] = $4;
 $7 = $1;
 $8 = ((($7)) + 180|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = ((($10)) + 172|0);
 HEAP32[$11>>2] = $9;
 STACKTOP = sp;return;
}
function _stbi__idct_block($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $7;
 $38 = $5;
 $10 = $38;
 $6 = 0;
 while(1) {
  $39 = $6;
  $40 = ($39|0)<(8);
  if (!($40)) {
   break;
  }
  $41 = $10;
  $42 = ((($41)) + 16|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = ($44|0)==(0);
  if ($45) {
   $46 = $10;
   $47 = ((($46)) + 32|0);
   $48 = HEAP16[$47>>1]|0;
   $49 = $48 << 16 >> 16;
   $50 = ($49|0)==(0);
   if ($50) {
    $51 = $10;
    $52 = ((($51)) + 48|0);
    $53 = HEAP16[$52>>1]|0;
    $54 = $53 << 16 >> 16;
    $55 = ($54|0)==(0);
    if ($55) {
     $56 = $10;
     $57 = ((($56)) + 64|0);
     $58 = HEAP16[$57>>1]|0;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)==(0);
     if ($60) {
      $61 = $10;
      $62 = ((($61)) + 80|0);
      $63 = HEAP16[$62>>1]|0;
      $64 = $63 << 16 >> 16;
      $65 = ($64|0)==(0);
      if ($65) {
       $66 = $10;
       $67 = ((($66)) + 96|0);
       $68 = HEAP16[$67>>1]|0;
       $69 = $68 << 16 >> 16;
       $70 = ($69|0)==(0);
       if ($70) {
        $71 = $10;
        $72 = ((($71)) + 112|0);
        $73 = HEAP16[$72>>1]|0;
        $74 = $73 << 16 >> 16;
        $75 = ($74|0)==(0);
        if ($75) {
         $76 = $10;
         $77 = HEAP16[$76>>1]|0;
         $78 = $77 << 16 >> 16;
         $79 = $78<<2;
         $11 = $79;
         $80 = $11;
         $81 = $8;
         $82 = ((($81)) + 224|0);
         HEAP32[$82>>2] = $80;
         $83 = $8;
         $84 = ((($83)) + 192|0);
         HEAP32[$84>>2] = $80;
         $85 = $8;
         $86 = ((($85)) + 160|0);
         HEAP32[$86>>2] = $80;
         $87 = $8;
         $88 = ((($87)) + 128|0);
         HEAP32[$88>>2] = $80;
         $89 = $8;
         $90 = ((($89)) + 96|0);
         HEAP32[$90>>2] = $80;
         $91 = $8;
         $92 = ((($91)) + 64|0);
         HEAP32[$92>>2] = $80;
         $93 = $8;
         $94 = ((($93)) + 32|0);
         HEAP32[$94>>2] = $80;
         $95 = $8;
         HEAP32[$95>>2] = $80;
        } else {
         label = 11;
        }
       } else {
        label = 11;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $96 = $10;
   $97 = ((($96)) + 32|0);
   $98 = HEAP16[$97>>1]|0;
   $99 = $98 << 16 >> 16;
   $17 = $99;
   $100 = $10;
   $101 = ((($100)) + 96|0);
   $102 = HEAP16[$101>>1]|0;
   $103 = $102 << 16 >> 16;
   $18 = $103;
   $104 = $17;
   $105 = $18;
   $106 = (($104) + ($105))|0;
   $107 = ($106*2217)|0;
   $16 = $107;
   $108 = $16;
   $109 = $18;
   $110 = Math_imul($109, -7567)|0;
   $111 = (($108) + ($110))|0;
   $14 = $111;
   $112 = $16;
   $113 = $17;
   $114 = ($113*3135)|0;
   $115 = (($112) + ($114))|0;
   $15 = $115;
   $116 = $10;
   $117 = HEAP16[$116>>1]|0;
   $118 = $117 << 16 >> 16;
   $17 = $118;
   $119 = $10;
   $120 = ((($119)) + 64|0);
   $121 = HEAP16[$120>>1]|0;
   $122 = $121 << 16 >> 16;
   $18 = $122;
   $123 = $17;
   $124 = $18;
   $125 = (($123) + ($124))|0;
   $126 = $125<<12;
   $12 = $126;
   $127 = $17;
   $128 = $18;
   $129 = (($127) - ($128))|0;
   $130 = $129<<12;
   $13 = $130;
   $131 = $12;
   $132 = $15;
   $133 = (($131) + ($132))|0;
   $21 = $133;
   $134 = $12;
   $135 = $15;
   $136 = (($134) - ($135))|0;
   $24 = $136;
   $137 = $13;
   $138 = $14;
   $139 = (($137) + ($138))|0;
   $22 = $139;
   $140 = $13;
   $141 = $14;
   $142 = (($140) - ($141))|0;
   $23 = $142;
   $143 = $10;
   $144 = ((($143)) + 112|0);
   $145 = HEAP16[$144>>1]|0;
   $146 = $145 << 16 >> 16;
   $12 = $146;
   $147 = $10;
   $148 = ((($147)) + 80|0);
   $149 = HEAP16[$148>>1]|0;
   $150 = $149 << 16 >> 16;
   $13 = $150;
   $151 = $10;
   $152 = ((($151)) + 48|0);
   $153 = HEAP16[$152>>1]|0;
   $154 = $153 << 16 >> 16;
   $14 = $154;
   $155 = $10;
   $156 = ((($155)) + 16|0);
   $157 = HEAP16[$156>>1]|0;
   $158 = $157 << 16 >> 16;
   $15 = $158;
   $159 = $12;
   $160 = $14;
   $161 = (($159) + ($160))|0;
   $18 = $161;
   $162 = $13;
   $163 = $15;
   $164 = (($162) + ($163))|0;
   $19 = $164;
   $165 = $12;
   $166 = $15;
   $167 = (($165) + ($166))|0;
   $16 = $167;
   $168 = $13;
   $169 = $14;
   $170 = (($168) + ($169))|0;
   $17 = $170;
   $171 = $18;
   $172 = $19;
   $173 = (($171) + ($172))|0;
   $174 = ($173*4816)|0;
   $20 = $174;
   $175 = $12;
   $176 = ($175*1223)|0;
   $12 = $176;
   $177 = $13;
   $178 = ($177*8410)|0;
   $13 = $178;
   $179 = $14;
   $180 = ($179*12586)|0;
   $14 = $180;
   $181 = $15;
   $182 = ($181*6149)|0;
   $15 = $182;
   $183 = $20;
   $184 = $16;
   $185 = Math_imul($184, -3685)|0;
   $186 = (($183) + ($185))|0;
   $16 = $186;
   $187 = $20;
   $188 = $17;
   $189 = Math_imul($188, -10497)|0;
   $190 = (($187) + ($189))|0;
   $17 = $190;
   $191 = $18;
   $192 = Math_imul($191, -8034)|0;
   $18 = $192;
   $193 = $19;
   $194 = Math_imul($193, -1597)|0;
   $19 = $194;
   $195 = $16;
   $196 = $19;
   $197 = (($195) + ($196))|0;
   $198 = $15;
   $199 = (($198) + ($197))|0;
   $15 = $199;
   $200 = $17;
   $201 = $18;
   $202 = (($200) + ($201))|0;
   $203 = $14;
   $204 = (($203) + ($202))|0;
   $14 = $204;
   $205 = $17;
   $206 = $19;
   $207 = (($205) + ($206))|0;
   $208 = $13;
   $209 = (($208) + ($207))|0;
   $13 = $209;
   $210 = $16;
   $211 = $18;
   $212 = (($210) + ($211))|0;
   $213 = $12;
   $214 = (($213) + ($212))|0;
   $12 = $214;
   $215 = $21;
   $216 = (($215) + 512)|0;
   $21 = $216;
   $217 = $22;
   $218 = (($217) + 512)|0;
   $22 = $218;
   $219 = $23;
   $220 = (($219) + 512)|0;
   $23 = $220;
   $221 = $24;
   $222 = (($221) + 512)|0;
   $24 = $222;
   $223 = $21;
   $224 = $15;
   $225 = (($223) + ($224))|0;
   $226 = $225 >> 10;
   $227 = $8;
   HEAP32[$227>>2] = $226;
   $228 = $21;
   $229 = $15;
   $230 = (($228) - ($229))|0;
   $231 = $230 >> 10;
   $232 = $8;
   $233 = ((($232)) + 224|0);
   HEAP32[$233>>2] = $231;
   $234 = $22;
   $235 = $14;
   $236 = (($234) + ($235))|0;
   $237 = $236 >> 10;
   $238 = $8;
   $239 = ((($238)) + 32|0);
   HEAP32[$239>>2] = $237;
   $240 = $22;
   $241 = $14;
   $242 = (($240) - ($241))|0;
   $243 = $242 >> 10;
   $244 = $8;
   $245 = ((($244)) + 192|0);
   HEAP32[$245>>2] = $243;
   $246 = $23;
   $247 = $13;
   $248 = (($246) + ($247))|0;
   $249 = $248 >> 10;
   $250 = $8;
   $251 = ((($250)) + 64|0);
   HEAP32[$251>>2] = $249;
   $252 = $23;
   $253 = $13;
   $254 = (($252) - ($253))|0;
   $255 = $254 >> 10;
   $256 = $8;
   $257 = ((($256)) + 160|0);
   HEAP32[$257>>2] = $255;
   $258 = $24;
   $259 = $12;
   $260 = (($258) + ($259))|0;
   $261 = $260 >> 10;
   $262 = $8;
   $263 = ((($262)) + 96|0);
   HEAP32[$263>>2] = $261;
   $264 = $24;
   $265 = $12;
   $266 = (($264) - ($265))|0;
   $267 = $266 >> 10;
   $268 = $8;
   $269 = ((($268)) + 128|0);
   HEAP32[$269>>2] = $267;
  }
  $270 = $6;
  $271 = (($270) + 1)|0;
  $6 = $271;
  $272 = $10;
  $273 = ((($272)) + 2|0);
  $10 = $273;
  $274 = $8;
  $275 = ((($274)) + 4|0);
  $8 = $275;
 }
 $6 = 0;
 $8 = $7;
 $276 = $3;
 $9 = $276;
 while(1) {
  $277 = $6;
  $278 = ($277|0)<(8);
  if (!($278)) {
   break;
  }
  $279 = $8;
  $280 = ((($279)) + 8|0);
  $281 = HEAP32[$280>>2]|0;
  $30 = $281;
  $282 = $8;
  $283 = ((($282)) + 24|0);
  $284 = HEAP32[$283>>2]|0;
  $31 = $284;
  $285 = $30;
  $286 = $31;
  $287 = (($285) + ($286))|0;
  $288 = ($287*2217)|0;
  $29 = $288;
  $289 = $29;
  $290 = $31;
  $291 = Math_imul($290, -7567)|0;
  $292 = (($289) + ($291))|0;
  $27 = $292;
  $293 = $29;
  $294 = $30;
  $295 = ($294*3135)|0;
  $296 = (($293) + ($295))|0;
  $28 = $296;
  $297 = $8;
  $298 = HEAP32[$297>>2]|0;
  $30 = $298;
  $299 = $8;
  $300 = ((($299)) + 16|0);
  $301 = HEAP32[$300>>2]|0;
  $31 = $301;
  $302 = $30;
  $303 = $31;
  $304 = (($302) + ($303))|0;
  $305 = $304<<12;
  $25 = $305;
  $306 = $30;
  $307 = $31;
  $308 = (($306) - ($307))|0;
  $309 = $308<<12;
  $26 = $309;
  $310 = $25;
  $311 = $28;
  $312 = (($310) + ($311))|0;
  $34 = $312;
  $313 = $25;
  $314 = $28;
  $315 = (($313) - ($314))|0;
  $37 = $315;
  $316 = $26;
  $317 = $27;
  $318 = (($316) + ($317))|0;
  $35 = $318;
  $319 = $26;
  $320 = $27;
  $321 = (($319) - ($320))|0;
  $36 = $321;
  $322 = $8;
  $323 = ((($322)) + 28|0);
  $324 = HEAP32[$323>>2]|0;
  $25 = $324;
  $325 = $8;
  $326 = ((($325)) + 20|0);
  $327 = HEAP32[$326>>2]|0;
  $26 = $327;
  $328 = $8;
  $329 = ((($328)) + 12|0);
  $330 = HEAP32[$329>>2]|0;
  $27 = $330;
  $331 = $8;
  $332 = ((($331)) + 4|0);
  $333 = HEAP32[$332>>2]|0;
  $28 = $333;
  $334 = $25;
  $335 = $27;
  $336 = (($334) + ($335))|0;
  $31 = $336;
  $337 = $26;
  $338 = $28;
  $339 = (($337) + ($338))|0;
  $32 = $339;
  $340 = $25;
  $341 = $28;
  $342 = (($340) + ($341))|0;
  $29 = $342;
  $343 = $26;
  $344 = $27;
  $345 = (($343) + ($344))|0;
  $30 = $345;
  $346 = $31;
  $347 = $32;
  $348 = (($346) + ($347))|0;
  $349 = ($348*4816)|0;
  $33 = $349;
  $350 = $25;
  $351 = ($350*1223)|0;
  $25 = $351;
  $352 = $26;
  $353 = ($352*8410)|0;
  $26 = $353;
  $354 = $27;
  $355 = ($354*12586)|0;
  $27 = $355;
  $356 = $28;
  $357 = ($356*6149)|0;
  $28 = $357;
  $358 = $33;
  $359 = $29;
  $360 = Math_imul($359, -3685)|0;
  $361 = (($358) + ($360))|0;
  $29 = $361;
  $362 = $33;
  $363 = $30;
  $364 = Math_imul($363, -10497)|0;
  $365 = (($362) + ($364))|0;
  $30 = $365;
  $366 = $31;
  $367 = Math_imul($366, -8034)|0;
  $31 = $367;
  $368 = $32;
  $369 = Math_imul($368, -1597)|0;
  $32 = $369;
  $370 = $29;
  $371 = $32;
  $372 = (($370) + ($371))|0;
  $373 = $28;
  $374 = (($373) + ($372))|0;
  $28 = $374;
  $375 = $30;
  $376 = $31;
  $377 = (($375) + ($376))|0;
  $378 = $27;
  $379 = (($378) + ($377))|0;
  $27 = $379;
  $380 = $30;
  $381 = $32;
  $382 = (($380) + ($381))|0;
  $383 = $26;
  $384 = (($383) + ($382))|0;
  $26 = $384;
  $385 = $29;
  $386 = $31;
  $387 = (($385) + ($386))|0;
  $388 = $25;
  $389 = (($388) + ($387))|0;
  $25 = $389;
  $390 = $34;
  $391 = (($390) + 16842752)|0;
  $34 = $391;
  $392 = $35;
  $393 = (($392) + 16842752)|0;
  $35 = $393;
  $394 = $36;
  $395 = (($394) + 16842752)|0;
  $36 = $395;
  $396 = $37;
  $397 = (($396) + 16842752)|0;
  $37 = $397;
  $398 = $34;
  $399 = $28;
  $400 = (($398) + ($399))|0;
  $401 = $400 >> 17;
  $402 = (_stbi__clamp($401)|0);
  $403 = $9;
  HEAP8[$403>>0] = $402;
  $404 = $34;
  $405 = $28;
  $406 = (($404) - ($405))|0;
  $407 = $406 >> 17;
  $408 = (_stbi__clamp($407)|0);
  $409 = $9;
  $410 = ((($409)) + 7|0);
  HEAP8[$410>>0] = $408;
  $411 = $35;
  $412 = $27;
  $413 = (($411) + ($412))|0;
  $414 = $413 >> 17;
  $415 = (_stbi__clamp($414)|0);
  $416 = $9;
  $417 = ((($416)) + 1|0);
  HEAP8[$417>>0] = $415;
  $418 = $35;
  $419 = $27;
  $420 = (($418) - ($419))|0;
  $421 = $420 >> 17;
  $422 = (_stbi__clamp($421)|0);
  $423 = $9;
  $424 = ((($423)) + 6|0);
  HEAP8[$424>>0] = $422;
  $425 = $36;
  $426 = $26;
  $427 = (($425) + ($426))|0;
  $428 = $427 >> 17;
  $429 = (_stbi__clamp($428)|0);
  $430 = $9;
  $431 = ((($430)) + 2|0);
  HEAP8[$431>>0] = $429;
  $432 = $36;
  $433 = $26;
  $434 = (($432) - ($433))|0;
  $435 = $434 >> 17;
  $436 = (_stbi__clamp($435)|0);
  $437 = $9;
  $438 = ((($437)) + 5|0);
  HEAP8[$438>>0] = $436;
  $439 = $37;
  $440 = $25;
  $441 = (($439) + ($440))|0;
  $442 = $441 >> 17;
  $443 = (_stbi__clamp($442)|0);
  $444 = $9;
  $445 = ((($444)) + 3|0);
  HEAP8[$445>>0] = $443;
  $446 = $37;
  $447 = $25;
  $448 = (($446) - ($447))|0;
  $449 = $448 >> 17;
  $450 = (_stbi__clamp($449)|0);
  $451 = $9;
  $452 = ((($451)) + 4|0);
  HEAP8[$452>>0] = $450;
  $453 = $6;
  $454 = (($453) + 1)|0;
  $6 = $454;
  $455 = $8;
  $456 = ((($455)) + 32|0);
  $8 = $456;
  $457 = $4;
  $458 = $9;
  $459 = (($458) + ($457)|0);
  $9 = $459;
 }
 STACKTOP = sp;return;
}
function _stbi__YCbCr_to_RGB_row($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $19 = $12;
  $20 = $10;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $7;
  $23 = $12;
  $24 = (($22) + ($23)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 << 20;
  $28 = (($27) + 524288)|0;
  $13 = $28;
  $29 = $9;
  $30 = $12;
  $31 = (($29) + ($30)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = (($33) - 128)|0;
  $17 = $34;
  $35 = $8;
  $36 = $12;
  $37 = (($35) + ($36)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = (($39) - 128)|0;
  $18 = $40;
  $41 = $13;
  $42 = $17;
  $43 = Math_imul($42, 1470208)|0;
  $44 = (($41) + ($43))|0;
  $14 = $44;
  $45 = $13;
  $46 = $17;
  $47 = Math_imul($46, -748800)|0;
  $48 = (($45) + ($47))|0;
  $49 = $18;
  $50 = Math_imul($49, -360960)|0;
  $51 = $50 & -65536;
  $52 = (($48) + ($51))|0;
  $15 = $52;
  $53 = $13;
  $54 = $18;
  $55 = Math_imul($54, 1858048)|0;
  $56 = (($53) + ($55))|0;
  $16 = $56;
  $57 = $14;
  $58 = $57 >> 20;
  $14 = $58;
  $59 = $15;
  $60 = $59 >> 20;
  $15 = $60;
  $61 = $16;
  $62 = $61 >> 20;
  $16 = $62;
  $63 = $14;
  $64 = ($63>>>0)>(255);
  do {
   if ($64) {
    $65 = $14;
    $66 = ($65|0)<(0);
    if ($66) {
     $14 = 0;
     break;
    } else {
     $14 = 255;
     break;
    }
   }
  } while(0);
  $67 = $15;
  $68 = ($67>>>0)>(255);
  do {
   if ($68) {
    $69 = $15;
    $70 = ($69|0)<(0);
    if ($70) {
     $15 = 0;
     break;
    } else {
     $15 = 255;
     break;
    }
   }
  } while(0);
  $71 = $16;
  $72 = ($71>>>0)>(255);
  do {
   if ($72) {
    $73 = $16;
    $74 = ($73|0)<(0);
    if ($74) {
     $16 = 0;
     break;
    } else {
     $16 = 255;
     break;
    }
   }
  } while(0);
  $75 = $14;
  $76 = $75&255;
  $77 = $6;
  HEAP8[$77>>0] = $76;
  $78 = $15;
  $79 = $78&255;
  $80 = $6;
  $81 = ((($80)) + 1|0);
  HEAP8[$81>>0] = $79;
  $82 = $16;
  $83 = $82&255;
  $84 = $6;
  $85 = ((($84)) + 2|0);
  HEAP8[$85>>0] = $83;
  $86 = $6;
  $87 = ((($86)) + 3|0);
  HEAP8[$87>>0] = -1;
  $88 = $11;
  $89 = $6;
  $90 = (($89) + ($88)|0);
  $6 = $90;
  $91 = $12;
  $92 = (($91) + 1)|0;
  $12 = $92;
 }
 STACKTOP = sp;return;
}
function _stbi__resample_row_hv_2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $9;
 $15 = ($14|0)==(1);
 $16 = $7;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18*3)|0;
 $20 = $8;
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = (($19) + ($22))|0;
 if ($15) {
  $24 = (($23) + 2)|0;
  $25 = $24 >> 2;
  $26 = $25&255;
  $27 = $6;
  $28 = ((($27)) + 1|0);
  HEAP8[$28>>0] = $26;
  $29 = $6;
  HEAP8[$29>>0] = $26;
  $30 = $6;
  $5 = $30;
  $86 = $5;
  STACKTOP = sp;return ($86|0);
 }
 $13 = $23;
 $31 = $13;
 $32 = (($31) + 2)|0;
 $33 = $32 >> 2;
 $34 = $33&255;
 $35 = $6;
 HEAP8[$35>>0] = $34;
 $11 = 1;
 while(1) {
  $36 = $11;
  $37 = $9;
  $38 = ($36|0)<($37|0);
  $39 = $13;
  if (!($38)) {
   break;
  }
  $12 = $39;
  $40 = $7;
  $41 = $11;
  $42 = (($40) + ($41)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = ($44*3)|0;
  $46 = $8;
  $47 = $11;
  $48 = (($46) + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = (($45) + ($50))|0;
  $13 = $51;
  $52 = $12;
  $53 = ($52*3)|0;
  $54 = $13;
  $55 = (($53) + ($54))|0;
  $56 = (($55) + 8)|0;
  $57 = $56 >> 4;
  $58 = $57&255;
  $59 = $6;
  $60 = $11;
  $61 = $60<<1;
  $62 = (($61) - 1)|0;
  $63 = (($59) + ($62)|0);
  HEAP8[$63>>0] = $58;
  $64 = $13;
  $65 = ($64*3)|0;
  $66 = $12;
  $67 = (($65) + ($66))|0;
  $68 = (($67) + 8)|0;
  $69 = $68 >> 4;
  $70 = $69&255;
  $71 = $6;
  $72 = $11;
  $73 = $72<<1;
  $74 = (($71) + ($73)|0);
  HEAP8[$74>>0] = $70;
  $75 = $11;
  $76 = (($75) + 1)|0;
  $11 = $76;
 }
 $77 = (($39) + 2)|0;
 $78 = $77 >> 2;
 $79 = $78&255;
 $80 = $6;
 $81 = $9;
 $82 = $81<<1;
 $83 = (($82) - 1)|0;
 $84 = (($80) + ($83)|0);
 HEAP8[$84>>0] = $79;
 $85 = $6;
 $5 = $85;
 $86 = $5;
 STACKTOP = sp;return ($86|0);
}
function _stbi__clamp($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3>>>0)>(255);
 do {
  if ($4) {
   $5 = $2;
   $6 = ($5|0)<(0);
   if ($6) {
    $1 = 0;
    break;
   }
   $7 = $2;
   $8 = ($7|0)>(255);
   if ($8) {
    $1 = -1;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = $2;
  $10 = $9&255;
  $1 = $10;
 }
 $11 = $1;
 STACKTOP = sp;return ($11|0);
}
function _stbi__get_marker($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 18372|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)!=(255);
 $9 = $2;
 if ($8) {
  $10 = ((($9)) + 18372|0);
  $11 = HEAP8[$10>>0]|0;
  $3 = $11;
  $12 = $2;
  $13 = ((($12)) + 18372|0);
  HEAP8[$13>>0] = -1;
  $14 = $3;
  $1 = $14;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 $15 = HEAP32[$9>>2]|0;
 $16 = (_stbi__get8($15)|0);
 $3 = $16;
 $17 = $3;
 $18 = $17&255;
 $19 = ($18|0)!=(255);
 if ($19) {
  $1 = -1;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 while(1) {
  $20 = $3;
  $21 = $20&255;
  $22 = ($21|0)==(255);
  if (!($22)) {
   break;
  }
  $23 = $2;
  $24 = HEAP32[$23>>2]|0;
  $25 = (_stbi__get8($24)|0);
  $3 = $25;
 }
 $26 = $3;
 $1 = $26;
 $27 = $1;
 STACKTOP = sp;return ($27|0);
}
function _stbi__process_marker($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $12 = sp;
 $3 = $0;
 $4 = $1;
 $22 = $4;
 switch ($22|0) {
 case 255:  {
  $23 = (_stbi__err(5103)|0);
  $2 = $23;
  $252 = $2;
  STACKTOP = sp;return ($252|0);
  break;
 }
 case 221:  {
  $24 = $3;
  $25 = HEAP32[$24>>2]|0;
  $26 = (_stbi__get16be($25)|0);
  $27 = ($26|0)!=(4);
  if ($27) {
   $28 = (_stbi__err(5119)|0);
   $2 = $28;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  } else {
   $29 = $3;
   $30 = HEAP32[$29>>2]|0;
   $31 = (_stbi__get16be($30)|0);
   $32 = $3;
   $33 = ((($32)) + 18436|0);
   HEAP32[$33>>2] = $31;
   $2 = 1;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  break;
 }
 case 219:  {
  $34 = $3;
  $35 = HEAP32[$34>>2]|0;
  $36 = (_stbi__get16be($35)|0);
  $37 = (($36) - 2)|0;
  $5 = $37;
  while(1) {
   $38 = $5;
   $39 = ($38|0)>(0);
   if (!($39)) {
    label = 19;
    break;
   }
   $40 = $3;
   $41 = HEAP32[$40>>2]|0;
   $42 = (_stbi__get8($41)|0);
   $43 = $42&255;
   $6 = $43;
   $44 = $6;
   $45 = $44 >> 4;
   $7 = $45;
   $46 = $7;
   $47 = ($46|0)!=(0);
   $48 = $47&1;
   $8 = $48;
   $49 = $6;
   $50 = $49 & 15;
   $9 = $50;
   $51 = $7;
   $52 = ($51|0)!=(0);
   $53 = $7;
   $54 = ($53|0)!=(1);
   $or$cond = $52 & $54;
   if ($or$cond) {
    label = 9;
    break;
   }
   $56 = $9;
   $57 = ($56|0)>(3);
   if ($57) {
    label = 11;
    break;
   }
   $10 = 0;
   while(1) {
    $59 = $10;
    $60 = ($59|0)<(64);
    $61 = $8;
    $62 = ($61|0)!=(0);
    if (!($60)) {
     break;
    }
    $63 = $3;
    $64 = HEAP32[$63>>2]|0;
    if ($62) {
     $65 = (_stbi__get16be($64)|0);
     $69 = $65;
    } else {
     $66 = (_stbi__get8($64)|0);
     $67 = $66&255;
     $69 = $67;
    }
    $68 = $69&65535;
    $70 = $3;
    $71 = ((($70)) + 13444|0);
    $72 = $9;
    $73 = (($71) + ($72<<7)|0);
    $74 = $10;
    $75 = (48 + ($74)|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $76&255;
    $78 = (($73) + ($77<<1)|0);
    HEAP16[$78>>1] = $68;
    $79 = $10;
    $80 = (($79) + 1)|0;
    $10 = $80;
   }
   $81 = $62 ? 129 : 65;
   $82 = $5;
   $83 = (($82) - ($81))|0;
   $5 = $83;
  }
  if ((label|0) == 9) {
   $55 = (_stbi__err(5131)|0);
   $2 = $55;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  else if ((label|0) == 11) {
   $58 = (_stbi__err(5144)|0);
   $2 = $58;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  else if ((label|0) == 19) {
   $84 = $5;
   $85 = ($84|0)==(0);
   $86 = $85&1;
   $2 = $86;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  break;
 }
 case 196:  {
  $87 = $3;
  $88 = HEAP32[$87>>2]|0;
  $89 = (_stbi__get16be($88)|0);
  $90 = (($89) - 2)|0;
  $5 = $90;
  while(1) {
   $91 = $5;
   $92 = ($91|0)>(0);
   if (!($92)) {
    label = 40;
    break;
   }
   $14 = 0;
   $93 = $3;
   $94 = HEAP32[$93>>2]|0;
   $95 = (_stbi__get8($94)|0);
   $96 = $95&255;
   $15 = $96;
   $97 = $15;
   $98 = $97 >> 4;
   $16 = $98;
   $99 = $15;
   $100 = $99 & 15;
   $17 = $100;
   $101 = $16;
   $102 = ($101|0)>(1);
   $103 = $17;
   $104 = ($103|0)>(3);
   $or$cond3 = $102 | $104;
   if ($or$cond3) {
    label = 23;
    break;
   }
   $13 = 0;
   while(1) {
    $106 = $13;
    $107 = ($106|0)<(16);
    if (!($107)) {
     break;
    }
    $108 = $3;
    $109 = HEAP32[$108>>2]|0;
    $110 = (_stbi__get8($109)|0);
    $111 = $110&255;
    $112 = $13;
    $113 = (($12) + ($112<<2)|0);
    HEAP32[$113>>2] = $111;
    $114 = $13;
    $115 = (($12) + ($114<<2)|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $14;
    $118 = (($117) + ($116))|0;
    $14 = $118;
    $119 = $13;
    $120 = (($119) + 1)|0;
    $13 = $120;
   }
   $121 = $5;
   $122 = (($121) - 17)|0;
   $5 = $122;
   $123 = $16;
   $124 = ($123|0)==(0);
   $125 = $3;
   if ($124) {
    $126 = ((($125)) + 4|0);
    $127 = $17;
    $128 = (($126) + (($127*1680)|0)|0);
    $129 = (_stbi__build_huffman($128,$12)|0);
    $130 = ($129|0)!=(0);
    if (!($130)) {
     label = 29;
     break;
    }
    $131 = $3;
    $132 = ((($131)) + 4|0);
    $133 = $17;
    $134 = (($132) + (($133*1680)|0)|0);
    $135 = ((($134)) + 1024|0);
    $11 = $135;
   } else {
    $136 = ((($125)) + 6724|0);
    $137 = $17;
    $138 = (($136) + (($137*1680)|0)|0);
    $139 = (_stbi__build_huffman($138,$12)|0);
    $140 = ($139|0)!=(0);
    if (!($140)) {
     label = 32;
     break;
    }
    $141 = $3;
    $142 = ((($141)) + 6724|0);
    $143 = $17;
    $144 = (($142) + (($143*1680)|0)|0);
    $145 = ((($144)) + 1024|0);
    $11 = $145;
   }
   $13 = 0;
   while(1) {
    $146 = $13;
    $147 = $14;
    $148 = ($146|0)<($147|0);
    if (!($148)) {
     break;
    }
    $149 = $3;
    $150 = HEAP32[$149>>2]|0;
    $151 = (_stbi__get8($150)|0);
    $152 = $11;
    $153 = $13;
    $154 = (($152) + ($153)|0);
    HEAP8[$154>>0] = $151;
    $155 = $13;
    $156 = (($155) + 1)|0;
    $13 = $156;
   }
   $157 = $16;
   $158 = ($157|0)!=(0);
   if ($158) {
    $159 = $3;
    $160 = ((($159)) + 13956|0);
    $161 = $17;
    $162 = (($160) + ($161<<10)|0);
    $163 = $3;
    $164 = ((($163)) + 6724|0);
    $165 = $17;
    $166 = (($164) + (($165*1680)|0)|0);
    _stbi__build_fast_ac($162,$166);
   }
   $167 = $14;
   $168 = $5;
   $169 = (($168) - ($167))|0;
   $5 = $169;
  }
  if ((label|0) == 23) {
   $105 = (_stbi__err(5158)|0);
   $2 = $105;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  else if ((label|0) == 29) {
   $2 = 0;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  else if ((label|0) == 32) {
   $2 = 0;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  else if ((label|0) == 40) {
   $170 = $5;
   $171 = ($170|0)==(0);
   $172 = $171&1;
   $2 = $172;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  break;
 }
 default: {
  $173 = $4;
  $174 = ($173|0)>=(224);
  $175 = $4;
  $176 = ($175|0)<=(239);
  $or$cond5 = $174 & $176;
  $177 = $4;
  $178 = ($177|0)==(254);
  $or$cond7 = $or$cond5 | $178;
  if (!($or$cond7)) {
   $251 = (_stbi__err(5208)|0);
   $2 = $251;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  $179 = $3;
  $180 = HEAP32[$179>>2]|0;
  $181 = (_stbi__get16be($180)|0);
  $5 = $181;
  $182 = $5;
  $183 = ($182|0)<(2);
  if ($183) {
   $184 = $4;
   $185 = ($184|0)==(254);
   if ($185) {
    $186 = (_stbi__err(5173)|0);
    $2 = $186;
    $252 = $2;
    STACKTOP = sp;return ($252|0);
   } else {
    $187 = (_stbi__err(5185)|0);
    $2 = $187;
    $252 = $2;
    STACKTOP = sp;return ($252|0);
   }
  }
  $188 = $5;
  $189 = (($188) - 2)|0;
  $5 = $189;
  $190 = $4;
  $191 = ($190|0)==(224);
  $192 = $5;
  $193 = ($192|0)>=(5);
  $or$cond9 = $191 & $193;
  if ($or$cond9) {
   $18 = 1;
   $19 = 0;
   while(1) {
    $194 = $19;
    $195 = ($194|0)<(5);
    if (!($195)) {
     break;
    }
    $196 = $3;
    $197 = HEAP32[$196>>2]|0;
    $198 = (_stbi__get8($197)|0);
    $199 = $198&255;
    $200 = $19;
    $201 = (5197 + ($200)|0);
    $202 = HEAP8[$201>>0]|0;
    $203 = $202&255;
    $204 = ($199|0)!=($203|0);
    if ($204) {
     $18 = 0;
    }
    $205 = $19;
    $206 = (($205) + 1)|0;
    $19 = $206;
   }
   $207 = $5;
   $208 = (($207) - 5)|0;
   $5 = $208;
   $209 = $18;
   $210 = ($209|0)!=(0);
   if ($210) {
    $211 = $3;
    $212 = ((($211)) + 18404|0);
    HEAP32[$212>>2] = 1;
   }
  } else {
   $213 = $4;
   $214 = ($213|0)==(238);
   $215 = $5;
   $216 = ($215|0)>=(12);
   $or$cond11 = $214 & $216;
   if ($or$cond11) {
    $20 = 1;
    $21 = 0;
    while(1) {
     $217 = $21;
     $218 = ($217|0)<(6);
     if (!($218)) {
      break;
     }
     $219 = $3;
     $220 = HEAP32[$219>>2]|0;
     $221 = (_stbi__get8($220)|0);
     $222 = $221&255;
     $223 = $21;
     $224 = (5202 + ($223)|0);
     $225 = HEAP8[$224>>0]|0;
     $226 = $225&255;
     $227 = ($222|0)!=($226|0);
     if ($227) {
      $20 = 0;
     }
     $228 = $21;
     $229 = (($228) + 1)|0;
     $21 = $229;
    }
    $230 = $5;
    $231 = (($230) - 6)|0;
    $5 = $231;
    $232 = $20;
    $233 = ($232|0)!=(0);
    if ($233) {
     $234 = $3;
     $235 = HEAP32[$234>>2]|0;
     (_stbi__get8($235)|0);
     $236 = $3;
     $237 = HEAP32[$236>>2]|0;
     (_stbi__get16be($237)|0);
     $238 = $3;
     $239 = HEAP32[$238>>2]|0;
     (_stbi__get16be($239)|0);
     $240 = $3;
     $241 = HEAP32[$240>>2]|0;
     $242 = (_stbi__get8($241)|0);
     $243 = $242&255;
     $244 = $3;
     $245 = ((($244)) + 18408|0);
     HEAP32[$245>>2] = $243;
     $246 = $5;
     $247 = (($246) - 6)|0;
     $5 = $247;
    }
   }
  }
  $248 = $3;
  $249 = HEAP32[$248>>2]|0;
  $250 = $5;
  _stbi__skip($249,$250);
  $2 = 1;
  $252 = $2;
  STACKTOP = sp;return ($252|0);
 }
 }
 return (0)|0;
}
function _stbi__at_eof($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = ((($7)) + 16|0);
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = ((($11)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_ii[$10 & 7]($13)|0);
  $15 = ($14|0)!=(0);
  if (!($15)) {
   $1 = 0;
   $28 = $1;
   STACKTOP = sp;return ($28|0);
  }
  $16 = $2;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   $1 = 1;
   $28 = $1;
   STACKTOP = sp;return ($28|0);
  }
 }
 $20 = $2;
 $21 = ((($20)) + 168|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $2;
 $24 = ((($23)) + 172|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)>=($25>>>0);
 $27 = $26&1;
 $1 = $27;
 $28 = $1;
 STACKTOP = sp;return ($28|0);
}
function _stbi__process_frame_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $5 = $14;
 $10 = 1;
 $11 = 1;
 $15 = $5;
 $16 = (_stbi__get16be($15)|0);
 $6 = $16;
 $17 = $6;
 $18 = ($17|0)<(11);
 if ($18) {
  $19 = (_stbi__err(5240)|0);
  $2 = $19;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 $20 = $5;
 $21 = (_stbi__get8($20)|0);
 $22 = $21&255;
 $7 = $22;
 $23 = $7;
 $24 = ($23|0)!=(8);
 if ($24) {
  $25 = (_stbi__err(5252)|0);
  $2 = $25;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 $26 = $5;
 $27 = (_stbi__get16be($26)|0);
 $28 = $5;
 $29 = ((($28)) + 4|0);
 HEAP32[$29>>2] = $27;
 $30 = $5;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0);
 if ($33) {
  $34 = (_stbi__err(5263)|0);
  $2 = $34;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 $35 = $5;
 $36 = (_stbi__get16be($35)|0);
 $37 = $5;
 HEAP32[$37>>2] = $36;
 $38 = $5;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0);
 if ($40) {
  $41 = (_stbi__err(5280)|0);
  $2 = $41;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 $42 = $5;
 $43 = (_stbi__get8($42)|0);
 $44 = $43&255;
 $12 = $44;
 $45 = $12;
 $46 = ($45|0)!=(3);
 $47 = $12;
 $48 = ($47|0)!=(1);
 $or$cond = $46 & $48;
 $49 = $12;
 $50 = ($49|0)!=(4);
 $or$cond3 = $or$cond & $50;
 if ($or$cond3) {
  $51 = (_stbi__err(5288)|0);
  $2 = $51;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 $52 = $12;
 $53 = $5;
 $54 = ((($53)) + 8|0);
 HEAP32[$54>>2] = $52;
 $8 = 0;
 while(1) {
  $55 = $8;
  $56 = $12;
  $57 = ($55|0)<($56|0);
  if (!($57)) {
   break;
  }
  $58 = $3;
  $59 = ((($58)) + 18076|0);
  $60 = $8;
  $61 = (($59) + (($60*72)|0)|0);
  $62 = ((($61)) + 44|0);
  HEAP32[$62>>2] = 0;
  $63 = $3;
  $64 = ((($63)) + 18076|0);
  $65 = $8;
  $66 = (($64) + (($65*72)|0)|0);
  $67 = ((($66)) + 56|0);
  HEAP32[$67>>2] = 0;
  $68 = $8;
  $69 = (($68) + 1)|0;
  $8 = $69;
 }
 $70 = $6;
 $71 = $5;
 $72 = ((($71)) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73*3)|0;
 $75 = (8 + ($74))|0;
 $76 = ($70|0)!=($75|0);
 if ($76) {
  $77 = (_stbi__err(5240)|0);
  $2 = $77;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 $78 = $3;
 $79 = ((($78)) + 18412|0);
 HEAP32[$79>>2] = 0;
 $8 = 0;
 while(1) {
  $80 = $8;
  $81 = $5;
  $82 = ((($81)) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($80|0)<($83|0);
  if (!($84)) {
   label = 30;
   break;
  }
  $85 = $5;
  $86 = (_stbi__get8($85)|0);
  $87 = $86&255;
  $88 = $3;
  $89 = ((($88)) + 18076|0);
  $90 = $8;
  $91 = (($89) + (($90*72)|0)|0);
  HEAP32[$91>>2] = $87;
  $92 = $5;
  $93 = ((($92)) + 8|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($94|0)==(3);
  if ($95) {
   $96 = $3;
   $97 = ((($96)) + 18076|0);
   $98 = $8;
   $99 = (($97) + (($98*72)|0)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $8;
   $102 = (5308 + ($101)|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = ($100|0)==($104|0);
   if ($105) {
    $106 = $3;
    $107 = ((($106)) + 18412|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($108) + 1)|0;
    HEAP32[$107>>2] = $109;
   }
  }
  $110 = $5;
  $111 = (_stbi__get8($110)|0);
  $112 = $111&255;
  $9 = $112;
  $113 = $9;
  $114 = $113 >> 4;
  $115 = $3;
  $116 = ((($115)) + 18076|0);
  $117 = $8;
  $118 = (($116) + (($117*72)|0)|0);
  $119 = ((($118)) + 4|0);
  HEAP32[$119>>2] = $114;
  $120 = $3;
  $121 = ((($120)) + 18076|0);
  $122 = $8;
  $123 = (($121) + (($122*72)|0)|0);
  $124 = ((($123)) + 4|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($125|0)!=(0);
  if (!($126)) {
   label = 23;
   break;
  }
  $127 = $3;
  $128 = ((($127)) + 18076|0);
  $129 = $8;
  $130 = (($128) + (($129*72)|0)|0);
  $131 = ((($130)) + 4|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($132|0)>(4);
  if ($133) {
   label = 23;
   break;
  }
  $135 = $9;
  $136 = $135 & 15;
  $137 = $3;
  $138 = ((($137)) + 18076|0);
  $139 = $8;
  $140 = (($138) + (($139*72)|0)|0);
  $141 = ((($140)) + 8|0);
  HEAP32[$141>>2] = $136;
  $142 = $3;
  $143 = ((($142)) + 18076|0);
  $144 = $8;
  $145 = (($143) + (($144*72)|0)|0);
  $146 = ((($145)) + 8|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = ($147|0)!=(0);
  if (!($148)) {
   label = 26;
   break;
  }
  $149 = $3;
  $150 = ((($149)) + 18076|0);
  $151 = $8;
  $152 = (($150) + (($151*72)|0)|0);
  $153 = ((($152)) + 8|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ($154|0)>(4);
  if ($155) {
   label = 26;
   break;
  }
  $157 = $5;
  $158 = (_stbi__get8($157)|0);
  $159 = $158&255;
  $160 = $3;
  $161 = ((($160)) + 18076|0);
  $162 = $8;
  $163 = (($161) + (($162*72)|0)|0);
  $164 = ((($163)) + 12|0);
  HEAP32[$164>>2] = $159;
  $165 = $3;
  $166 = ((($165)) + 18076|0);
  $167 = $8;
  $168 = (($166) + (($167*72)|0)|0);
  $169 = ((($168)) + 12|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ($170|0)>(3);
  if ($171) {
   label = 28;
   break;
  }
  $173 = $8;
  $174 = (($173) + 1)|0;
  $8 = $174;
 }
 if ((label|0) == 23) {
  $134 = (_stbi__err(5311)|0);
  $2 = $134;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 else if ((label|0) == 26) {
  $156 = (_stbi__err(5317)|0);
  $2 = $156;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 else if ((label|0) == 28) {
  $172 = (_stbi__err(5323)|0);
  $2 = $172;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 else if ((label|0) == 30) {
  $175 = $4;
  $176 = ($175|0)!=(0);
  if ($176) {
   $2 = 1;
   $473 = $2;
   STACKTOP = sp;return ($473|0);
  }
  $177 = $5;
  $178 = HEAP32[$177>>2]|0;
  $179 = $5;
  $180 = ((($179)) + 4|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = $5;
  $183 = ((($182)) + 8|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (_stbi__mad3sizes_valid($178,$181,$184,0)|0);
  $186 = ($185|0)!=(0);
  if (!($186)) {
   $187 = (_stbi__err(5330)|0);
   $2 = $187;
   $473 = $2;
   STACKTOP = sp;return ($473|0);
  }
  $8 = 0;
  while(1) {
   $188 = $8;
   $189 = $5;
   $190 = ((($189)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = ($188|0)<($191|0);
   if (!($192)) {
    break;
   }
   $193 = $3;
   $194 = ((($193)) + 18076|0);
   $195 = $8;
   $196 = (($194) + (($195*72)|0)|0);
   $197 = ((($196)) + 4|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $10;
   $200 = ($198|0)>($199|0);
   if ($200) {
    $201 = $3;
    $202 = ((($201)) + 18076|0);
    $203 = $8;
    $204 = (($202) + (($203*72)|0)|0);
    $205 = ((($204)) + 4|0);
    $206 = HEAP32[$205>>2]|0;
    $10 = $206;
   }
   $207 = $3;
   $208 = ((($207)) + 18076|0);
   $209 = $8;
   $210 = (($208) + (($209*72)|0)|0);
   $211 = ((($210)) + 8|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = $11;
   $214 = ($212|0)>($213|0);
   if ($214) {
    $215 = $3;
    $216 = ((($215)) + 18076|0);
    $217 = $8;
    $218 = (($216) + (($217*72)|0)|0);
    $219 = ((($218)) + 8|0);
    $220 = HEAP32[$219>>2]|0;
    $11 = $220;
   }
   $221 = $8;
   $222 = (($221) + 1)|0;
   $8 = $222;
  }
  $223 = $10;
  $224 = $3;
  $225 = ((($224)) + 18052|0);
  HEAP32[$225>>2] = $223;
  $226 = $11;
  $227 = $3;
  $228 = ((($227)) + 18056|0);
  HEAP32[$228>>2] = $226;
  $229 = $10;
  $230 = $229<<3;
  $231 = $3;
  $232 = ((($231)) + 18068|0);
  HEAP32[$232>>2] = $230;
  $233 = $11;
  $234 = $233<<3;
  $235 = $3;
  $236 = ((($235)) + 18072|0);
  HEAP32[$236>>2] = $234;
  $237 = $5;
  $238 = HEAP32[$237>>2]|0;
  $239 = $3;
  $240 = ((($239)) + 18068|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = (($238) + ($241))|0;
  $243 = (($242) - 1)|0;
  $244 = $3;
  $245 = ((($244)) + 18068|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = (($243>>>0) / ($246>>>0))&-1;
  $248 = $3;
  $249 = ((($248)) + 18060|0);
  HEAP32[$249>>2] = $247;
  $250 = $5;
  $251 = ((($250)) + 4|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = $3;
  $254 = ((($253)) + 18072|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = (($252) + ($255))|0;
  $257 = (($256) - 1)|0;
  $258 = $3;
  $259 = ((($258)) + 18072|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = (($257>>>0) / ($260>>>0))&-1;
  $262 = $3;
  $263 = ((($262)) + 18064|0);
  HEAP32[$263>>2] = $261;
  $8 = 0;
  while(1) {
   $264 = $8;
   $265 = $5;
   $266 = ((($265)) + 8|0);
   $267 = HEAP32[$266>>2]|0;
   $268 = ($264|0)<($267|0);
   if (!($268)) {
    label = 50;
    break;
   }
   $269 = $5;
   $270 = HEAP32[$269>>2]|0;
   $271 = $3;
   $272 = ((($271)) + 18076|0);
   $273 = $8;
   $274 = (($272) + (($273*72)|0)|0);
   $275 = ((($274)) + 4|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = Math_imul($270, $276)|0;
   $278 = $10;
   $279 = (($277) + ($278))|0;
   $280 = (($279) - 1)|0;
   $281 = $10;
   $282 = (($280>>>0) / ($281>>>0))&-1;
   $283 = $3;
   $284 = ((($283)) + 18076|0);
   $285 = $8;
   $286 = (($284) + (($285*72)|0)|0);
   $287 = ((($286)) + 28|0);
   HEAP32[$287>>2] = $282;
   $288 = $5;
   $289 = ((($288)) + 4|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = $3;
   $292 = ((($291)) + 18076|0);
   $293 = $8;
   $294 = (($292) + (($293*72)|0)|0);
   $295 = ((($294)) + 8|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = Math_imul($290, $296)|0;
   $298 = $11;
   $299 = (($297) + ($298))|0;
   $300 = (($299) - 1)|0;
   $301 = $11;
   $302 = (($300>>>0) / ($301>>>0))&-1;
   $303 = $3;
   $304 = ((($303)) + 18076|0);
   $305 = $8;
   $306 = (($304) + (($305*72)|0)|0);
   $307 = ((($306)) + 32|0);
   HEAP32[$307>>2] = $302;
   $308 = $3;
   $309 = ((($308)) + 18060|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = $3;
   $312 = ((($311)) + 18076|0);
   $313 = $8;
   $314 = (($312) + (($313*72)|0)|0);
   $315 = ((($314)) + 4|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = Math_imul($310, $316)|0;
   $318 = $317<<3;
   $319 = $3;
   $320 = ((($319)) + 18076|0);
   $321 = $8;
   $322 = (($320) + (($321*72)|0)|0);
   $323 = ((($322)) + 36|0);
   HEAP32[$323>>2] = $318;
   $324 = $3;
   $325 = ((($324)) + 18064|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = $3;
   $328 = ((($327)) + 18076|0);
   $329 = $8;
   $330 = (($328) + (($329*72)|0)|0);
   $331 = ((($330)) + 8|0);
   $332 = HEAP32[$331>>2]|0;
   $333 = Math_imul($326, $332)|0;
   $334 = $333<<3;
   $335 = $3;
   $336 = ((($335)) + 18076|0);
   $337 = $8;
   $338 = (($336) + (($337*72)|0)|0);
   $339 = ((($338)) + 40|0);
   HEAP32[$339>>2] = $334;
   $340 = $3;
   $341 = ((($340)) + 18076|0);
   $342 = $8;
   $343 = (($341) + (($342*72)|0)|0);
   $344 = ((($343)) + 60|0);
   HEAP32[$344>>2] = 0;
   $345 = $3;
   $346 = ((($345)) + 18076|0);
   $347 = $8;
   $348 = (($346) + (($347*72)|0)|0);
   $349 = ((($348)) + 52|0);
   HEAP32[$349>>2] = 0;
   $350 = $3;
   $351 = ((($350)) + 18076|0);
   $352 = $8;
   $353 = (($351) + (($352*72)|0)|0);
   $354 = ((($353)) + 56|0);
   HEAP32[$354>>2] = 0;
   $355 = $3;
   $356 = ((($355)) + 18076|0);
   $357 = $8;
   $358 = (($356) + (($357*72)|0)|0);
   $359 = ((($358)) + 36|0);
   $360 = HEAP32[$359>>2]|0;
   $361 = $3;
   $362 = ((($361)) + 18076|0);
   $363 = $8;
   $364 = (($362) + (($363*72)|0)|0);
   $365 = ((($364)) + 40|0);
   $366 = HEAP32[$365>>2]|0;
   $367 = (_stbi__malloc_mad2($360,$366,15)|0);
   $368 = $3;
   $369 = ((($368)) + 18076|0);
   $370 = $8;
   $371 = (($369) + (($370*72)|0)|0);
   $372 = ((($371)) + 48|0);
   HEAP32[$372>>2] = $367;
   $373 = $3;
   $374 = ((($373)) + 18076|0);
   $375 = $8;
   $376 = (($374) + (($375*72)|0)|0);
   $377 = ((($376)) + 48|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = ($378|0)==(0|0);
   $380 = $3;
   if ($379) {
    label = 44;
    break;
   }
   $385 = ((($380)) + 18076|0);
   $386 = $8;
   $387 = (($385) + (($386*72)|0)|0);
   $388 = ((($387)) + 48|0);
   $389 = HEAP32[$388>>2]|0;
   $390 = $389;
   $391 = (($390) + 15)|0;
   $392 = $391 & -16;
   $393 = $392;
   $394 = $3;
   $395 = ((($394)) + 18076|0);
   $396 = $8;
   $397 = (($395) + (($396*72)|0)|0);
   $398 = ((($397)) + 44|0);
   HEAP32[$398>>2] = $393;
   $399 = $3;
   $400 = ((($399)) + 18380|0);
   $401 = HEAP32[$400>>2]|0;
   $402 = ($401|0)!=(0);
   if ($402) {
    $403 = $3;
    $404 = ((($403)) + 18076|0);
    $405 = $8;
    $406 = (($404) + (($405*72)|0)|0);
    $407 = ((($406)) + 36|0);
    $408 = HEAP32[$407>>2]|0;
    $409 = (($408|0) / 8)&-1;
    $410 = $3;
    $411 = ((($410)) + 18076|0);
    $412 = $8;
    $413 = (($411) + (($412*72)|0)|0);
    $414 = ((($413)) + 64|0);
    HEAP32[$414>>2] = $409;
    $415 = $3;
    $416 = ((($415)) + 18076|0);
    $417 = $8;
    $418 = (($416) + (($417*72)|0)|0);
    $419 = ((($418)) + 40|0);
    $420 = HEAP32[$419>>2]|0;
    $421 = (($420|0) / 8)&-1;
    $422 = $3;
    $423 = ((($422)) + 18076|0);
    $424 = $8;
    $425 = (($423) + (($424*72)|0)|0);
    $426 = ((($425)) + 68|0);
    HEAP32[$426>>2] = $421;
    $427 = $3;
    $428 = ((($427)) + 18076|0);
    $429 = $8;
    $430 = (($428) + (($429*72)|0)|0);
    $431 = ((($430)) + 36|0);
    $432 = HEAP32[$431>>2]|0;
    $433 = $3;
    $434 = ((($433)) + 18076|0);
    $435 = $8;
    $436 = (($434) + (($435*72)|0)|0);
    $437 = ((($436)) + 40|0);
    $438 = HEAP32[$437>>2]|0;
    $439 = (_stbi__malloc_mad3($432,$438,2,15)|0);
    $440 = $3;
    $441 = ((($440)) + 18076|0);
    $442 = $8;
    $443 = (($441) + (($442*72)|0)|0);
    $444 = ((($443)) + 52|0);
    HEAP32[$444>>2] = $439;
    $445 = $3;
    $446 = ((($445)) + 18076|0);
    $447 = $8;
    $448 = (($446) + (($447*72)|0)|0);
    $449 = ((($448)) + 52|0);
    $450 = HEAP32[$449>>2]|0;
    $451 = ($450|0)==(0|0);
    $452 = $3;
    if ($451) {
     label = 47;
     break;
    }
    $457 = ((($452)) + 18076|0);
    $458 = $8;
    $459 = (($457) + (($458*72)|0)|0);
    $460 = ((($459)) + 52|0);
    $461 = HEAP32[$460>>2]|0;
    $462 = $461;
    $463 = (($462) + 15)|0;
    $464 = $463 & -16;
    $465 = $464;
    $466 = $3;
    $467 = ((($466)) + 18076|0);
    $468 = $8;
    $469 = (($467) + (($468*72)|0)|0);
    $470 = ((($469)) + 60|0);
    HEAP32[$470>>2] = $465;
   }
   $471 = $8;
   $472 = (($471) + 1)|0;
   $8 = $472;
  }
  if ((label|0) == 44) {
   $381 = $8;
   $382 = (($381) + 1)|0;
   $383 = (_stbi__err(5340)|0);
   $384 = (_stbi__free_jpeg_components($380,$382,$383)|0);
   $2 = $384;
   $473 = $2;
   STACKTOP = sp;return ($473|0);
  }
  else if ((label|0) == 47) {
   $453 = $8;
   $454 = (($453) + 1)|0;
   $455 = (_stbi__err(5340)|0);
   $456 = (_stbi__free_jpeg_components($452,$454,$455)|0);
   $2 = $456;
   $473 = $2;
   STACKTOP = sp;return ($473|0);
  }
  else if ((label|0) == 50) {
   $2 = 1;
   $473 = $2;
   STACKTOP = sp;return ($473|0);
  }
 }
 return (0)|0;
}
function _stbi__get8($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 168|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = ((($6)) + 172|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5>>>0)<($8>>>0);
 $10 = $2;
 if ($9) {
  $11 = ((($10)) + 168|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 1|0);
  HEAP32[$11>>2] = $13;
  $14 = HEAP8[$12>>0]|0;
  $1 = $14;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 }
 $15 = ((($10)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $2;
  _stbi__refill_buffer($18);
  $19 = $2;
  $20 = ((($19)) + 168|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 1|0);
  HEAP32[$20>>2] = $22;
  $23 = HEAP8[$21>>0]|0;
  $1 = $23;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 } else {
  $1 = 0;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _stbi__refill_buffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = ((($9)) + 40|0);
 $11 = $1;
 $12 = ((($11)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiii[$5 & 31]($8,$10,$13)|0);
 $2 = $14;
 $15 = $2;
 $16 = ($15|0)==(0);
 $17 = $1;
 if ($16) {
  $18 = ((($17)) + 32|0);
  HEAP32[$18>>2] = 0;
  $19 = $1;
  $20 = ((($19)) + 40|0);
  $21 = $1;
  $22 = ((($21)) + 168|0);
  HEAP32[$22>>2] = $20;
  $23 = $1;
  $24 = ((($23)) + 40|0);
  $25 = ((($24)) + 1|0);
  $26 = $1;
  $27 = ((($26)) + 172|0);
  HEAP32[$27>>2] = $25;
  $28 = $1;
  $29 = ((($28)) + 168|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP8[$30>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $31 = ((($17)) + 40|0);
  $32 = $1;
  $33 = ((($32)) + 168|0);
  HEAP32[$33>>2] = $31;
  $34 = $1;
  $35 = ((($34)) + 40|0);
  $36 = $2;
  $37 = (($35) + ($36)|0);
  $38 = $1;
  $39 = ((($38)) + 172|0);
  HEAP32[$39>>2] = $37;
  STACKTOP = sp;return;
 }
}
function _stbi__get16be($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_stbi__get8($3)|0);
 $5 = $4&255;
 $2 = $5;
 $6 = $2;
 $7 = $6 << 8;
 $8 = $1;
 $9 = (_stbi__get8($8)|0);
 $10 = $9&255;
 $11 = (($7) + ($10))|0;
 STACKTOP = sp;return ($11|0);
}
function _stbi__build_huffman($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $7 = 0;
 $5 = 0;
 while(1) {
  $12 = $5;
  $13 = ($12|0)<(16);
  if (!($13)) {
   break;
  }
  $6 = 0;
  while(1) {
   $14 = $6;
   $15 = $4;
   $16 = $5;
   $17 = (($15) + ($16<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($14|0)<($18|0);
   $20 = $5;
   $21 = (($20) + 1)|0;
   if (!($19)) {
    break;
   }
   $22 = $21&255;
   $23 = $3;
   $24 = ((($23)) + 1280|0);
   $25 = $7;
   $26 = (($25) + 1)|0;
   $7 = $26;
   $27 = (($24) + ($25)|0);
   HEAP8[$27>>0] = $22;
   $28 = $6;
   $29 = (($28) + 1)|0;
   $6 = $29;
  }
  $5 = $21;
 }
 $30 = $3;
 $31 = ((($30)) + 1280|0);
 $32 = $7;
 $33 = (($31) + ($32)|0);
 HEAP8[$33>>0] = 0;
 $8 = 0;
 $7 = 0;
 $6 = 1;
 while(1) {
  $34 = $6;
  $35 = ($34|0)<=(16);
  if (!($35)) {
   break;
  }
  $36 = $7;
  $37 = $8;
  $38 = (($36) - ($37))|0;
  $39 = $3;
  $40 = ((($39)) + 1612|0);
  $41 = $6;
  $42 = (($40) + ($41<<2)|0);
  HEAP32[$42>>2] = $38;
  $43 = $3;
  $44 = ((($43)) + 1280|0);
  $45 = $7;
  $46 = (($44) + ($45)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $6;
  $50 = ($48|0)==($49|0);
  if ($50) {
   while(1) {
    $51 = $3;
    $52 = ((($51)) + 1280|0);
    $53 = $7;
    $54 = (($52) + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = $6;
    $58 = ($56|0)==($57|0);
    $59 = $8;
    if (!($58)) {
     break;
    }
    $60 = (($59) + 1)|0;
    $8 = $60;
    $61 = $59&65535;
    $62 = $3;
    $63 = ((($62)) + 512|0);
    $64 = $7;
    $65 = (($64) + 1)|0;
    $7 = $65;
    $66 = (($63) + ($64<<1)|0);
    HEAP16[$66>>1] = $61;
   }
   $67 = (($59) - 1)|0;
   $68 = $6;
   $69 = 1 << $68;
   $70 = ($67>>>0)>=($69>>>0);
   if ($70) {
    label = 14;
    break;
   }
  }
  $72 = $8;
  $73 = $6;
  $74 = (16 - ($73))|0;
  $75 = $72 << $74;
  $76 = $3;
  $77 = ((($76)) + 1540|0);
  $78 = $6;
  $79 = (($77) + ($78<<2)|0);
  HEAP32[$79>>2] = $75;
  $80 = $8;
  $81 = $80 << 1;
  $8 = $81;
  $82 = $6;
  $83 = (($82) + 1)|0;
  $6 = $83;
 }
 if ((label|0) == 14) {
  $71 = (_stbi__err(5223)|0);
  $2 = $71;
  $126 = $2;
  STACKTOP = sp;return ($126|0);
 }
 $84 = $3;
 $85 = ((($84)) + 1540|0);
 $86 = $6;
 $87 = (($85) + ($86<<2)|0);
 HEAP32[$87>>2] = -1;
 $88 = $3;
 _memset(($88|0),-1,512)|0;
 $5 = 0;
 while(1) {
  $89 = $5;
  $90 = $7;
  $91 = ($89|0)<($90|0);
  if (!($91)) {
   break;
  }
  $92 = $3;
  $93 = ((($92)) + 1280|0);
  $94 = $5;
  $95 = (($93) + ($94)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $9 = $97;
  $98 = $9;
  $99 = ($98|0)<=(9);
  L26: do {
   if ($99) {
    $100 = $3;
    $101 = ((($100)) + 512|0);
    $102 = $5;
    $103 = (($101) + ($102<<1)|0);
    $104 = HEAP16[$103>>1]|0;
    $105 = $104&65535;
    $106 = $9;
    $107 = (9 - ($106))|0;
    $108 = $105 << $107;
    $10 = $108;
    $109 = $9;
    $110 = (9 - ($109))|0;
    $111 = 1 << $110;
    $11 = $111;
    $6 = 0;
    while(1) {
     $112 = $6;
     $113 = $11;
     $114 = ($112|0)<($113|0);
     if (!($114)) {
      break L26;
     }
     $115 = $5;
     $116 = $115&255;
     $117 = $3;
     $118 = $10;
     $119 = $6;
     $120 = (($118) + ($119))|0;
     $121 = (($117) + ($120)|0);
     HEAP8[$121>>0] = $116;
     $122 = $6;
     $123 = (($122) + 1)|0;
     $6 = $123;
    }
   }
  } while(0);
  $124 = $5;
  $125 = (($124) + 1)|0;
  $5 = $125;
 }
 $2 = 1;
 $126 = $2;
 STACKTOP = sp;return ($126|0);
}
function _stbi__build_fast_ac($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $12 = $4;
  $13 = ($12|0)<(512);
  if (!($13)) {
   break;
  }
  $14 = $3;
  $15 = $4;
  $16 = (($14) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $5 = $17;
  $18 = $2;
  $19 = $4;
  $20 = (($18) + ($19<<1)|0);
  HEAP16[$20>>1] = 0;
  $21 = $5;
  $22 = $21&255;
  $23 = ($22|0)<(255);
  if ($23) {
   $24 = $3;
   $25 = ((($24)) + 1024|0);
   $26 = $5;
   $27 = $26&255;
   $28 = (($25) + ($27)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $6 = $30;
   $31 = $6;
   $32 = $31 >> 4;
   $33 = $32 & 15;
   $7 = $33;
   $34 = $6;
   $35 = $34 & 15;
   $8 = $35;
   $36 = $3;
   $37 = ((($36)) + 1280|0);
   $38 = $5;
   $39 = $38&255;
   $40 = (($37) + ($39)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $9 = $42;
   $43 = $8;
   $44 = ($43|0)!=(0);
   if ($44) {
    $45 = $9;
    $46 = $8;
    $47 = (($45) + ($46))|0;
    $48 = ($47|0)<=(9);
    if ($48) {
     $49 = $4;
     $50 = $9;
     $51 = $49 << $50;
     $52 = $51 & 511;
     $53 = $8;
     $54 = (9 - ($53))|0;
     $55 = $52 >> $54;
     $10 = $55;
     $56 = $8;
     $57 = (($56) - 1)|0;
     $58 = 1 << $57;
     $11 = $58;
     $59 = $10;
     $60 = $11;
     $61 = ($59|0)<($60|0);
     if ($61) {
      $62 = $8;
      $63 = -1 << $62;
      $64 = (($63) + 1)|0;
      $65 = $10;
      $66 = (($65) + ($64))|0;
      $10 = $66;
     }
     $67 = $10;
     $68 = ($67|0)>=(-128);
     $69 = $10;
     $70 = ($69|0)<=(127);
     $or$cond = $68 & $70;
     if ($or$cond) {
      $71 = $10;
      $72 = $71<<8;
      $73 = $7;
      $74 = $73<<4;
      $75 = (($72) + ($74))|0;
      $76 = $9;
      $77 = $8;
      $78 = (($76) + ($77))|0;
      $79 = (($75) + ($78))|0;
      $80 = $79&65535;
      $81 = $2;
      $82 = $4;
      $83 = (($81) + ($82<<1)|0);
      HEAP16[$83>>1] = $80;
     }
    }
   }
  }
  $84 = $4;
  $85 = (($84) + 1)|0;
  $4 = $85;
 }
 STACKTOP = sp;return;
}
function _stbi__skip($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = ($5|0)<(0);
 $7 = $2;
 if ($6) {
  $8 = ((($7)) + 172|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  $11 = ((($10)) + 168|0);
  HEAP32[$11>>2] = $9;
  STACKTOP = sp;return;
 }
 $12 = ((($7)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $2;
  $16 = ((($15)) + 172|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $2;
  $19 = ((($18)) + 168|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $17;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  $4 = $23;
  $24 = $4;
  $25 = $3;
  $26 = ($24|0)<($25|0);
  if ($26) {
   $27 = $2;
   $28 = ((($27)) + 172|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $2;
   $31 = ((($30)) + 168|0);
   HEAP32[$31>>2] = $29;
   $32 = $2;
   $33 = ((($32)) + 16|0);
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $2;
   $37 = ((($36)) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $3;
   $40 = $4;
   $41 = (($39) - ($40))|0;
   FUNCTION_TABLE_vii[$35 & 3]($38,$41);
   STACKTOP = sp;return;
  }
 }
 $42 = $3;
 $43 = $2;
 $44 = ((($43)) + 168|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + ($42)|0);
 HEAP32[$44>>2] = $46;
 STACKTOP = sp;return;
}
function _stbi__mad3sizes_valid($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = (_stbi__mul2sizes_valid($8,$9)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $27 = 0;
  $26 = $27&1;
  STACKTOP = sp;return ($26|0);
 }
 $12 = $4;
 $13 = $5;
 $14 = Math_imul($12, $13)|0;
 $15 = $6;
 $16 = (_stbi__mul2sizes_valid($14,$15)|0);
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $27 = 0;
  $26 = $27&1;
  STACKTOP = sp;return ($26|0);
 }
 $18 = $4;
 $19 = $5;
 $20 = Math_imul($18, $19)|0;
 $21 = $6;
 $22 = Math_imul($20, $21)|0;
 $23 = $7;
 $24 = (_stbi__addsizes_valid($22,$23)|0);
 $25 = ($24|0)!=(0);
 $27 = $25;
 $26 = $27&1;
 STACKTOP = sp;return ($26|0);
}
function _stbi__malloc_mad2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = $5;
 $9 = $6;
 $10 = (_stbi__mad2sizes_valid($7,$8,$9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $4;
  $13 = $5;
  $14 = Math_imul($12, $13)|0;
  $15 = $6;
  $16 = (($14) + ($15))|0;
  $17 = (_stbi__malloc($16)|0);
  $3 = $17;
  $18 = $3;
  STACKTOP = sp;return ($18|0);
 } else {
  $3 = 0;
  $18 = $3;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _stbi__free_jpeg_components($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $4;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = ((($10)) + 18076|0);
  $12 = $6;
  $13 = (($11) + (($12*72)|0)|0);
  $14 = ((($13)) + 48|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $3;
   $18 = ((($17)) + 18076|0);
   $19 = $6;
   $20 = (($18) + (($19*72)|0)|0);
   $21 = ((($20)) + 48|0);
   $22 = HEAP32[$21>>2]|0;
   _free($22);
   $23 = $3;
   $24 = ((($23)) + 18076|0);
   $25 = $6;
   $26 = (($24) + (($25*72)|0)|0);
   $27 = ((($26)) + 48|0);
   HEAP32[$27>>2] = 0;
   $28 = $3;
   $29 = ((($28)) + 18076|0);
   $30 = $6;
   $31 = (($29) + (($30*72)|0)|0);
   $32 = ((($31)) + 44|0);
   HEAP32[$32>>2] = 0;
  }
  $33 = $3;
  $34 = ((($33)) + 18076|0);
  $35 = $6;
  $36 = (($34) + (($35*72)|0)|0);
  $37 = ((($36)) + 52|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(0|0);
  if ($39) {
   $40 = $3;
   $41 = ((($40)) + 18076|0);
   $42 = $6;
   $43 = (($41) + (($42*72)|0)|0);
   $44 = ((($43)) + 52|0);
   $45 = HEAP32[$44>>2]|0;
   _free($45);
   $46 = $3;
   $47 = ((($46)) + 18076|0);
   $48 = $6;
   $49 = (($47) + (($48*72)|0)|0);
   $50 = ((($49)) + 52|0);
   HEAP32[$50>>2] = 0;
   $51 = $3;
   $52 = ((($51)) + 18076|0);
   $53 = $6;
   $54 = (($52) + (($53*72)|0)|0);
   $55 = ((($54)) + 60|0);
   HEAP32[$55>>2] = 0;
  }
  $56 = $3;
  $57 = ((($56)) + 18076|0);
  $58 = $6;
  $59 = (($57) + (($58*72)|0)|0);
  $60 = ((($59)) + 56|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)!=(0|0);
  if ($62) {
   $63 = $3;
   $64 = ((($63)) + 18076|0);
   $65 = $6;
   $66 = (($64) + (($65*72)|0)|0);
   $67 = ((($66)) + 56|0);
   $68 = HEAP32[$67>>2]|0;
   _free($68);
   $69 = $3;
   $70 = ((($69)) + 18076|0);
   $71 = $6;
   $72 = (($70) + (($71*72)|0)|0);
   $73 = ((($72)) + 56|0);
   HEAP32[$73>>2] = 0;
  }
  $74 = $6;
  $75 = (($74) + 1)|0;
  $6 = $75;
 }
 $76 = $5;
 STACKTOP = sp;return ($76|0);
}
function _stbi__malloc_mad3($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 $12 = $8;
 $13 = (_stbi__mad3sizes_valid($9,$10,$11,$12)|0);
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $5;
  $16 = $6;
  $17 = Math_imul($15, $16)|0;
  $18 = $7;
  $19 = Math_imul($17, $18)|0;
  $20 = $8;
  $21 = (($19) + ($20))|0;
  $22 = (_stbi__malloc($21)|0);
  $4 = $22;
  $23 = $4;
  STACKTOP = sp;return ($23|0);
 } else {
  $4 = 0;
  $23 = $4;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _stbi__mul2sizes_valid($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)<(0);
 $7 = $4;
 $8 = ($7|0)<(0);
 $or$cond = $6 | $8;
 do {
  if ($or$cond) {
   $2 = 0;
  } else {
   $9 = $4;
   $10 = ($9|0)==(0);
   if ($10) {
    $2 = 1;
    break;
   } else {
    $11 = $3;
    $12 = $4;
    $13 = (2147483647 / ($12|0))&-1;
    $14 = ($11|0)<=($13|0);
    $15 = $14&1;
    $2 = $15;
    break;
   }
  }
 } while(0);
 $16 = $2;
 STACKTOP = sp;return ($16|0);
}
function _stbi__addsizes_valid($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)<(0);
 if ($6) {
  $2 = 0;
 } else {
  $7 = $3;
  $8 = $4;
  $9 = (2147483647 - ($8))|0;
  $10 = ($7|0)<=($9|0);
  $11 = $10&1;
  $2 = $11;
 }
 $12 = $2;
 STACKTOP = sp;return ($12|0);
}
function _stbi__mad2sizes_valid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = (_stbi__mul2sizes_valid($6,$7)|0);
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $17 = 0;
  $16 = $17&1;
  STACKTOP = sp;return ($16|0);
 }
 $10 = $3;
 $11 = $4;
 $12 = Math_imul($10, $11)|0;
 $13 = $5;
 $14 = (_stbi__addsizes_valid($12,$13)|0);
 $15 = ($14|0)!=(0);
 $17 = $15;
 $16 = $17&1;
 STACKTOP = sp;return ($16|0);
}
function _load_jpeg_image($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond3$not = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $18 = sp + 128|0;
 $19 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 8|0);
 HEAP32[$34>>2] = 0;
 $35 = $10;
 $36 = ($35|0)<(0);
 $37 = $10;
 $38 = ($37|0)>(4);
 $or$cond = $36 | $38;
 if ($or$cond) {
  $39 = (_stbi__err(5349)|0);
  $40 = ($39|0)!=(0);
  $41 = $40 ? 0 : 0;
  $42 = $41;
  $43 = $42;
  $5 = $43;
  $723 = $5;
  STACKTOP = sp;return ($723|0);
 }
 $44 = $6;
 $45 = (_stbi__decode_jpeg_image($44)|0);
 $46 = ($45|0)!=(0);
 if (!($46)) {
  $47 = $6;
  _stbi__cleanup_jpeg($47);
  $5 = 0;
  $723 = $5;
  STACKTOP = sp;return ($723|0);
 }
 $48 = $10;
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = $10;
  $57 = $50;
 } else {
  $51 = $6;
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)>=(3);
  $56 = $55 ? 3 : 1;
  $57 = $56;
 }
 $11 = $57;
 $58 = $6;
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($59)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(3);
 if ($62) {
  $63 = $6;
  $64 = ((($63)) + 18412|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)==(3);
  if ($66) {
   $77 = 1;
  } else {
   $67 = $6;
   $68 = ((($67)) + 18408|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)==(0);
   if ($70) {
    $71 = $6;
    $72 = ((($71)) + 18404|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)!=(0);
    $75 = $74 ^ 1;
    $77 = $75;
   } else {
    $77 = 0;
   }
  }
 } else {
  $77 = 0;
 }
 $76 = $77&1;
 $13 = $76;
 $78 = $6;
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($79)) + 8|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)==(3);
 $83 = $11;
 $84 = ($83|0)<(3);
 $or$cond3 = $82 & $84;
 $or$cond3$not = $or$cond3 ^ 1;
 $85 = $13;
 $86 = ($85|0)!=(0);
 $or$cond5 = $or$cond3$not | $86;
 if ($or$cond5) {
  $87 = $6;
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + 8|0);
  $90 = HEAP32[$89>>2]|0;
  $12 = $90;
 } else {
  $12 = 1;
 }
 $14 = 0;
 while(1) {
  $91 = $14;
  $92 = $12;
  $93 = ($91|0)<($92|0);
  if (!($93)) {
   break;
  }
  $94 = $14;
  $95 = (($19) + ($94<<5)|0);
  $20 = $95;
  $96 = $6;
  $97 = HEAP32[$96>>2]|0;
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + 3)|0;
  $100 = (_stbi__malloc($99)|0);
  $101 = $6;
  $102 = ((($101)) + 18076|0);
  $103 = $14;
  $104 = (($102) + (($103*72)|0)|0);
  $105 = ((($104)) + 56|0);
  HEAP32[$105>>2] = $100;
  $106 = $6;
  $107 = ((($106)) + 18076|0);
  $108 = $14;
  $109 = (($107) + (($108*72)|0)|0);
  $110 = ((($109)) + 56|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($111|0)!=(0|0);
  $113 = $6;
  if (!($112)) {
   label = 18;
   break;
  }
  $119 = ((($113)) + 18052|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $6;
  $122 = ((($121)) + 18076|0);
  $123 = $14;
  $124 = (($122) + (($123*72)|0)|0);
  $125 = ((($124)) + 4|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($120|0) / ($126|0))&-1;
  $128 = $20;
  $129 = ((($128)) + 12|0);
  HEAP32[$129>>2] = $127;
  $130 = $6;
  $131 = ((($130)) + 18056|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $6;
  $134 = ((($133)) + 18076|0);
  $135 = $14;
  $136 = (($134) + (($135*72)|0)|0);
  $137 = ((($136)) + 8|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($132|0) / ($138|0))&-1;
  $140 = $20;
  $141 = ((($140)) + 16|0);
  HEAP32[$141>>2] = $139;
  $142 = $20;
  $143 = ((($142)) + 16|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $144 >> 1;
  $146 = $20;
  $147 = ((($146)) + 24|0);
  HEAP32[$147>>2] = $145;
  $148 = $6;
  $149 = HEAP32[$148>>2]|0;
  $150 = HEAP32[$149>>2]|0;
  $151 = $20;
  $152 = ((($151)) + 12|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($150) + ($153))|0;
  $155 = (($154) - 1)|0;
  $156 = $20;
  $157 = ((($156)) + 12|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($155>>>0) / ($158>>>0))&-1;
  $160 = $20;
  $161 = ((($160)) + 20|0);
  HEAP32[$161>>2] = $159;
  $162 = $20;
  $163 = ((($162)) + 28|0);
  HEAP32[$163>>2] = 0;
  $164 = $6;
  $165 = ((($164)) + 18076|0);
  $166 = $14;
  $167 = (($165) + (($166*72)|0)|0);
  $168 = ((($167)) + 44|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $20;
  $171 = ((($170)) + 8|0);
  HEAP32[$171>>2] = $169;
  $172 = $20;
  $173 = ((($172)) + 4|0);
  HEAP32[$173>>2] = $169;
  $174 = $20;
  $175 = ((($174)) + 12|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ($176|0)==(1);
  if ($177) {
   $178 = $20;
   $179 = ((($178)) + 16|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($180|0)==(1);
   if ($181) {
    $182 = $20;
    HEAP32[$182>>2] = 11;
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
  do {
   if ((label|0) == 22) {
    label = 0;
    $183 = $20;
    $184 = ((($183)) + 12|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = ($185|0)==(1);
    if ($186) {
     $187 = $20;
     $188 = ((($187)) + 16|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = ($189|0)==(2);
     if ($190) {
      $191 = $20;
      HEAP32[$191>>2] = 12;
      break;
     }
    }
    $192 = $20;
    $193 = ((($192)) + 12|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = ($194|0)==(2);
    if ($195) {
     $196 = $20;
     $197 = ((($196)) + 16|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = ($198|0)==(1);
     if ($199) {
      $200 = $20;
      HEAP32[$200>>2] = 13;
      break;
     }
    }
    $201 = $20;
    $202 = ((($201)) + 12|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = ($203|0)==(2);
    if ($204) {
     $205 = $20;
     $206 = ((($205)) + 16|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(2);
     if ($208) {
      $209 = $6;
      $210 = ((($209)) + 18452|0);
      $211 = HEAP32[$210>>2]|0;
      $212 = $20;
      HEAP32[$212>>2] = $211;
      break;
     }
    }
    $213 = $20;
    HEAP32[$213>>2] = 14;
   }
  } while(0);
  $214 = $14;
  $215 = (($214) + 1)|0;
  $14 = $215;
 }
 if ((label|0) == 18) {
  _stbi__cleanup_jpeg($113);
  $114 = (_stbi__err(5340)|0);
  $115 = ($114|0)!=(0);
  $116 = $115 ? 0 : 0;
  $117 = $116;
  $118 = $117;
  $5 = $118;
  $723 = $5;
  STACKTOP = sp;return ($723|0);
 }
 $216 = $11;
 $217 = $6;
 $218 = HEAP32[$217>>2]|0;
 $219 = HEAP32[$218>>2]|0;
 $220 = $6;
 $221 = HEAP32[$220>>2]|0;
 $222 = ((($221)) + 4|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = (_stbi__malloc_mad3($216,$219,$223,1)|0);
 $17 = $224;
 $225 = $17;
 $226 = ($225|0)!=(0|0);
 if (!($226)) {
  $227 = $6;
  _stbi__cleanup_jpeg($227);
  $228 = (_stbi__err(5340)|0);
  $229 = ($228|0)!=(0);
  $230 = $229 ? 0 : 0;
  $231 = $230;
  $232 = $231;
  $5 = $232;
  $723 = $5;
  STACKTOP = sp;return ($723|0);
 }
 $16 = 0;
 while(1) {
  $233 = $16;
  $234 = $6;
  $235 = HEAP32[$234>>2]|0;
  $236 = ((($235)) + 4|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = ($233>>>0)<($237>>>0);
  if (!($238)) {
   break;
  }
  $239 = $17;
  $240 = $11;
  $241 = $6;
  $242 = HEAP32[$241>>2]|0;
  $243 = HEAP32[$242>>2]|0;
  $244 = Math_imul($240, $243)|0;
  $245 = $16;
  $246 = Math_imul($244, $245)|0;
  $247 = (($239) + ($246)|0);
  $21 = $247;
  $14 = 0;
  while(1) {
   $248 = $14;
   $249 = $12;
   $250 = ($248|0)<($249|0);
   if (!($250)) {
    break;
   }
   $251 = $14;
   $252 = (($19) + ($251<<5)|0);
   $22 = $252;
   $253 = $22;
   $254 = ((($253)) + 24|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = $22;
   $257 = ((($256)) + 16|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = $258 >> 1;
   $260 = ($255|0)>=($259|0);
   $261 = $260&1;
   $23 = $261;
   $262 = $22;
   $263 = HEAP32[$262>>2]|0;
   $264 = $6;
   $265 = ((($264)) + 18076|0);
   $266 = $14;
   $267 = (($265) + (($266*72)|0)|0);
   $268 = ((($267)) + 56|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = $23;
   $271 = ($270|0)!=(0);
   $272 = $22;
   if ($271) {
    $273 = ((($272)) + 8|0);
    $274 = HEAP32[$273>>2]|0;
    $290 = $274;
   } else {
    $275 = ((($272)) + 4|0);
    $276 = HEAP32[$275>>2]|0;
    $290 = $276;
   }
   $277 = $23;
   $278 = ($277|0)!=(0);
   $279 = $22;
   if ($278) {
    $280 = ((($279)) + 4|0);
    $281 = HEAP32[$280>>2]|0;
    $291 = $281;
   } else {
    $282 = ((($279)) + 8|0);
    $283 = HEAP32[$282>>2]|0;
    $291 = $283;
   }
   $284 = $22;
   $285 = ((($284)) + 20|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $22;
   $288 = ((($287)) + 12|0);
   $289 = HEAP32[$288>>2]|0;
   $292 = (FUNCTION_TABLE_iiiiii[$263 & 15]($269,$290,$291,$286,$289)|0);
   $293 = $14;
   $294 = (($18) + ($293<<2)|0);
   HEAP32[$294>>2] = $292;
   $295 = $22;
   $296 = ((($295)) + 24|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = (($297) + 1)|0;
   HEAP32[$296>>2] = $298;
   $299 = $22;
   $300 = ((($299)) + 16|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = ($298|0)>=($301|0);
   if ($302) {
    $303 = $22;
    $304 = ((($303)) + 24|0);
    HEAP32[$304>>2] = 0;
    $305 = $22;
    $306 = ((($305)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = $22;
    $309 = ((($308)) + 4|0);
    HEAP32[$309>>2] = $307;
    $310 = $22;
    $311 = ((($310)) + 28|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = (($312) + 1)|0;
    HEAP32[$311>>2] = $313;
    $314 = $6;
    $315 = ((($314)) + 18076|0);
    $316 = $14;
    $317 = (($315) + (($316*72)|0)|0);
    $318 = ((($317)) + 32|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = ($313|0)<($319|0);
    if ($320) {
     $321 = $6;
     $322 = ((($321)) + 18076|0);
     $323 = $14;
     $324 = (($322) + (($323*72)|0)|0);
     $325 = ((($324)) + 36|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = $22;
     $328 = ((($327)) + 8|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = (($329) + ($326)|0);
     HEAP32[$328>>2] = $330;
    }
   }
   $331 = $14;
   $332 = (($331) + 1)|0;
   $14 = $332;
  }
  $333 = $11;
  $334 = ($333|0)>=(3);
  L71: do {
   if ($334) {
    $335 = HEAP32[$18>>2]|0;
    $24 = $335;
    $336 = $6;
    $337 = HEAP32[$336>>2]|0;
    $338 = ((($337)) + 8|0);
    $339 = HEAP32[$338>>2]|0;
    $340 = ($339|0)==(3);
    if ($340) {
     $341 = $13;
     $342 = ($341|0)!=(0);
     if (!($342)) {
      $374 = $6;
      $375 = ((($374)) + 18448|0);
      $376 = HEAP32[$375>>2]|0;
      $377 = $21;
      $378 = $24;
      $379 = ((($18)) + 4|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = ((($18)) + 8|0);
      $382 = HEAP32[$381>>2]|0;
      $383 = $6;
      $384 = HEAP32[$383>>2]|0;
      $385 = HEAP32[$384>>2]|0;
      $386 = $11;
      FUNCTION_TABLE_viiiiii[$376 & 15]($377,$378,$380,$382,$385,$386);
      break;
     }
     $15 = 0;
     while(1) {
      $343 = $15;
      $344 = $6;
      $345 = HEAP32[$344>>2]|0;
      $346 = HEAP32[$345>>2]|0;
      $347 = ($343>>>0)<($346>>>0);
      if (!($347)) {
       break L71;
      }
      $348 = $24;
      $349 = $15;
      $350 = (($348) + ($349)|0);
      $351 = HEAP8[$350>>0]|0;
      $352 = $21;
      HEAP8[$352>>0] = $351;
      $353 = ((($18)) + 4|0);
      $354 = HEAP32[$353>>2]|0;
      $355 = $15;
      $356 = (($354) + ($355)|0);
      $357 = HEAP8[$356>>0]|0;
      $358 = $21;
      $359 = ((($358)) + 1|0);
      HEAP8[$359>>0] = $357;
      $360 = ((($18)) + 8|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = $15;
      $363 = (($361) + ($362)|0);
      $364 = HEAP8[$363>>0]|0;
      $365 = $21;
      $366 = ((($365)) + 2|0);
      HEAP8[$366>>0] = $364;
      $367 = $21;
      $368 = ((($367)) + 3|0);
      HEAP8[$368>>0] = -1;
      $369 = $11;
      $370 = $21;
      $371 = (($370) + ($369)|0);
      $21 = $371;
      $372 = $15;
      $373 = (($372) + 1)|0;
      $15 = $373;
     }
    }
    $387 = $6;
    $388 = HEAP32[$387>>2]|0;
    $389 = ((($388)) + 8|0);
    $390 = HEAP32[$389>>2]|0;
    $391 = ($390|0)==(4);
    if (!($391)) {
     $15 = 0;
     while(1) {
      $498 = $15;
      $499 = $6;
      $500 = HEAP32[$499>>2]|0;
      $501 = HEAP32[$500>>2]|0;
      $502 = ($498>>>0)<($501>>>0);
      if (!($502)) {
       break L71;
      }
      $503 = $24;
      $504 = $15;
      $505 = (($503) + ($504)|0);
      $506 = HEAP8[$505>>0]|0;
      $507 = $21;
      $508 = ((($507)) + 2|0);
      HEAP8[$508>>0] = $506;
      $509 = $21;
      $510 = ((($509)) + 1|0);
      HEAP8[$510>>0] = $506;
      $511 = $21;
      HEAP8[$511>>0] = $506;
      $512 = $21;
      $513 = ((($512)) + 3|0);
      HEAP8[$513>>0] = -1;
      $514 = $11;
      $515 = $21;
      $516 = (($515) + ($514)|0);
      $21 = $516;
      $517 = $15;
      $518 = (($517) + 1)|0;
      $15 = $518;
     }
    }
    $392 = $6;
    $393 = ((($392)) + 18408|0);
    $394 = HEAP32[$393>>2]|0;
    $395 = ($394|0)==(0);
    if ($395) {
     $15 = 0;
     while(1) {
      $396 = $15;
      $397 = $6;
      $398 = HEAP32[$397>>2]|0;
      $399 = HEAP32[$398>>2]|0;
      $400 = ($396>>>0)<($399>>>0);
      if (!($400)) {
       break L71;
      }
      $401 = ((($18)) + 12|0);
      $402 = HEAP32[$401>>2]|0;
      $403 = $15;
      $404 = (($402) + ($403)|0);
      $405 = HEAP8[$404>>0]|0;
      $25 = $405;
      $406 = HEAP32[$18>>2]|0;
      $407 = $15;
      $408 = (($406) + ($407)|0);
      $409 = HEAP8[$408>>0]|0;
      $410 = $25;
      $411 = (_stbi__blinn_8x8($409,$410)|0);
      $412 = $21;
      HEAP8[$412>>0] = $411;
      $413 = ((($18)) + 4|0);
      $414 = HEAP32[$413>>2]|0;
      $415 = $15;
      $416 = (($414) + ($415)|0);
      $417 = HEAP8[$416>>0]|0;
      $418 = $25;
      $419 = (_stbi__blinn_8x8($417,$418)|0);
      $420 = $21;
      $421 = ((($420)) + 1|0);
      HEAP8[$421>>0] = $419;
      $422 = ((($18)) + 8|0);
      $423 = HEAP32[$422>>2]|0;
      $424 = $15;
      $425 = (($423) + ($424)|0);
      $426 = HEAP8[$425>>0]|0;
      $427 = $25;
      $428 = (_stbi__blinn_8x8($426,$427)|0);
      $429 = $21;
      $430 = ((($429)) + 2|0);
      HEAP8[$430>>0] = $428;
      $431 = $21;
      $432 = ((($431)) + 3|0);
      HEAP8[$432>>0] = -1;
      $433 = $11;
      $434 = $21;
      $435 = (($434) + ($433)|0);
      $21 = $435;
      $436 = $15;
      $437 = (($436) + 1)|0;
      $15 = $437;
     }
    }
    $438 = $6;
    $439 = ((($438)) + 18408|0);
    $440 = HEAP32[$439>>2]|0;
    $441 = ($440|0)==(2);
    $442 = $6;
    $443 = ((($442)) + 18448|0);
    $444 = HEAP32[$443>>2]|0;
    $445 = $21;
    $446 = $24;
    $447 = ((($18)) + 4|0);
    $448 = HEAP32[$447>>2]|0;
    $449 = ((($18)) + 8|0);
    $450 = HEAP32[$449>>2]|0;
    $451 = $6;
    $452 = HEAP32[$451>>2]|0;
    $453 = HEAP32[$452>>2]|0;
    $454 = $11;
    FUNCTION_TABLE_viiiiii[$444 & 15]($445,$446,$448,$450,$453,$454);
    if ($441) {
     $15 = 0;
     while(1) {
      $455 = $15;
      $456 = $6;
      $457 = HEAP32[$456>>2]|0;
      $458 = HEAP32[$457>>2]|0;
      $459 = ($455>>>0)<($458>>>0);
      if (!($459)) {
       break L71;
      }
      $460 = ((($18)) + 12|0);
      $461 = HEAP32[$460>>2]|0;
      $462 = $15;
      $463 = (($461) + ($462)|0);
      $464 = HEAP8[$463>>0]|0;
      $26 = $464;
      $465 = $21;
      $466 = HEAP8[$465>>0]|0;
      $467 = $466&255;
      $468 = (255 - ($467))|0;
      $469 = $468&255;
      $470 = $26;
      $471 = (_stbi__blinn_8x8($469,$470)|0);
      $472 = $21;
      HEAP8[$472>>0] = $471;
      $473 = $21;
      $474 = ((($473)) + 1|0);
      $475 = HEAP8[$474>>0]|0;
      $476 = $475&255;
      $477 = (255 - ($476))|0;
      $478 = $477&255;
      $479 = $26;
      $480 = (_stbi__blinn_8x8($478,$479)|0);
      $481 = $21;
      $482 = ((($481)) + 1|0);
      HEAP8[$482>>0] = $480;
      $483 = $21;
      $484 = ((($483)) + 2|0);
      $485 = HEAP8[$484>>0]|0;
      $486 = $485&255;
      $487 = (255 - ($486))|0;
      $488 = $487&255;
      $489 = $26;
      $490 = (_stbi__blinn_8x8($488,$489)|0);
      $491 = $21;
      $492 = ((($491)) + 2|0);
      HEAP8[$492>>0] = $490;
      $493 = $11;
      $494 = $21;
      $495 = (($494) + ($493)|0);
      $21 = $495;
      $496 = $15;
      $497 = (($496) + 1)|0;
      $15 = $497;
     }
    }
   } else {
    $519 = $13;
    $520 = ($519|0)!=(0);
    if ($520) {
     $521 = $11;
     $522 = ($521|0)==(1);
     $15 = 0;
     if ($522) {
      while(1) {
       $523 = $15;
       $524 = $6;
       $525 = HEAP32[$524>>2]|0;
       $526 = HEAP32[$525>>2]|0;
       $527 = ($523>>>0)<($526>>>0);
       if (!($527)) {
        break L71;
       }
       $528 = HEAP32[$18>>2]|0;
       $529 = $15;
       $530 = (($528) + ($529)|0);
       $531 = HEAP8[$530>>0]|0;
       $532 = $531&255;
       $533 = ((($18)) + 4|0);
       $534 = HEAP32[$533>>2]|0;
       $535 = $15;
       $536 = (($534) + ($535)|0);
       $537 = HEAP8[$536>>0]|0;
       $538 = $537&255;
       $539 = ((($18)) + 8|0);
       $540 = HEAP32[$539>>2]|0;
       $541 = $15;
       $542 = (($540) + ($541)|0);
       $543 = HEAP8[$542>>0]|0;
       $544 = $543&255;
       $545 = (_stbi__compute_y($532,$538,$544)|0);
       $546 = $21;
       $547 = ((($546)) + 1|0);
       $21 = $547;
       HEAP8[$546>>0] = $545;
       $548 = $15;
       $549 = (($548) + 1)|0;
       $15 = $549;
      }
     } else {
      while(1) {
       $550 = $15;
       $551 = $6;
       $552 = HEAP32[$551>>2]|0;
       $553 = HEAP32[$552>>2]|0;
       $554 = ($550>>>0)<($553>>>0);
       if (!($554)) {
        break L71;
       }
       $555 = HEAP32[$18>>2]|0;
       $556 = $15;
       $557 = (($555) + ($556)|0);
       $558 = HEAP8[$557>>0]|0;
       $559 = $558&255;
       $560 = ((($18)) + 4|0);
       $561 = HEAP32[$560>>2]|0;
       $562 = $15;
       $563 = (($561) + ($562)|0);
       $564 = HEAP8[$563>>0]|0;
       $565 = $564&255;
       $566 = ((($18)) + 8|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = $15;
       $569 = (($567) + ($568)|0);
       $570 = HEAP8[$569>>0]|0;
       $571 = $570&255;
       $572 = (_stbi__compute_y($559,$565,$571)|0);
       $573 = $21;
       HEAP8[$573>>0] = $572;
       $574 = $21;
       $575 = ((($574)) + 1|0);
       HEAP8[$575>>0] = -1;
       $576 = $15;
       $577 = (($576) + 1)|0;
       $15 = $577;
       $578 = $21;
       $579 = ((($578)) + 2|0);
       $21 = $579;
      }
     }
    }
    $580 = $6;
    $581 = HEAP32[$580>>2]|0;
    $582 = ((($581)) + 8|0);
    $583 = HEAP32[$582>>2]|0;
    $584 = ($583|0)==(4);
    if ($584) {
     $585 = $6;
     $586 = ((($585)) + 18408|0);
     $587 = HEAP32[$586>>2]|0;
     $588 = ($587|0)==(0);
     if ($588) {
      $15 = 0;
      while(1) {
       $589 = $15;
       $590 = $6;
       $591 = HEAP32[$590>>2]|0;
       $592 = HEAP32[$591>>2]|0;
       $593 = ($589>>>0)<($592>>>0);
       if (!($593)) {
        break L71;
       }
       $594 = ((($18)) + 12|0);
       $595 = HEAP32[$594>>2]|0;
       $596 = $15;
       $597 = (($595) + ($596)|0);
       $598 = HEAP8[$597>>0]|0;
       $27 = $598;
       $599 = HEAP32[$18>>2]|0;
       $600 = $15;
       $601 = (($599) + ($600)|0);
       $602 = HEAP8[$601>>0]|0;
       $603 = $27;
       $604 = (_stbi__blinn_8x8($602,$603)|0);
       $28 = $604;
       $605 = ((($18)) + 4|0);
       $606 = HEAP32[$605>>2]|0;
       $607 = $15;
       $608 = (($606) + ($607)|0);
       $609 = HEAP8[$608>>0]|0;
       $610 = $27;
       $611 = (_stbi__blinn_8x8($609,$610)|0);
       $29 = $611;
       $612 = ((($18)) + 8|0);
       $613 = HEAP32[$612>>2]|0;
       $614 = $15;
       $615 = (($613) + ($614)|0);
       $616 = HEAP8[$615>>0]|0;
       $617 = $27;
       $618 = (_stbi__blinn_8x8($616,$617)|0);
       $30 = $618;
       $619 = $28;
       $620 = $619&255;
       $621 = $29;
       $622 = $621&255;
       $623 = $30;
       $624 = $623&255;
       $625 = (_stbi__compute_y($620,$622,$624)|0);
       $626 = $21;
       HEAP8[$626>>0] = $625;
       $627 = $21;
       $628 = ((($627)) + 1|0);
       HEAP8[$628>>0] = -1;
       $629 = $11;
       $630 = $21;
       $631 = (($630) + ($629)|0);
       $21 = $631;
       $632 = $15;
       $633 = (($632) + 1)|0;
       $15 = $633;
      }
     }
    }
    $634 = $6;
    $635 = HEAP32[$634>>2]|0;
    $636 = ((($635)) + 8|0);
    $637 = HEAP32[$636>>2]|0;
    $638 = ($637|0)==(4);
    if ($638) {
     $639 = $6;
     $640 = ((($639)) + 18408|0);
     $641 = HEAP32[$640>>2]|0;
     $642 = ($641|0)==(2);
     if ($642) {
      $15 = 0;
      while(1) {
       $643 = $15;
       $644 = $6;
       $645 = HEAP32[$644>>2]|0;
       $646 = HEAP32[$645>>2]|0;
       $647 = ($643>>>0)<($646>>>0);
       if (!($647)) {
        break L71;
       }
       $648 = HEAP32[$18>>2]|0;
       $649 = $15;
       $650 = (($648) + ($649)|0);
       $651 = HEAP8[$650>>0]|0;
       $652 = $651&255;
       $653 = (255 - ($652))|0;
       $654 = $653&255;
       $655 = ((($18)) + 12|0);
       $656 = HEAP32[$655>>2]|0;
       $657 = $15;
       $658 = (($656) + ($657)|0);
       $659 = HEAP8[$658>>0]|0;
       $660 = (_stbi__blinn_8x8($654,$659)|0);
       $661 = $21;
       HEAP8[$661>>0] = $660;
       $662 = $21;
       $663 = ((($662)) + 1|0);
       HEAP8[$663>>0] = -1;
       $664 = $11;
       $665 = $21;
       $666 = (($665) + ($664)|0);
       $21 = $666;
       $667 = $15;
       $668 = (($667) + 1)|0;
       $15 = $668;
      }
     }
    }
    $669 = HEAP32[$18>>2]|0;
    $31 = $669;
    $670 = $11;
    $671 = ($670|0)==(1);
    $15 = 0;
    if ($671) {
     while(1) {
      $672 = $15;
      $673 = $6;
      $674 = HEAP32[$673>>2]|0;
      $675 = HEAP32[$674>>2]|0;
      $676 = ($672>>>0)<($675>>>0);
      if (!($676)) {
       break L71;
      }
      $677 = $31;
      $678 = $15;
      $679 = (($677) + ($678)|0);
      $680 = HEAP8[$679>>0]|0;
      $681 = $21;
      $682 = $15;
      $683 = (($681) + ($682)|0);
      HEAP8[$683>>0] = $680;
      $684 = $15;
      $685 = (($684) + 1)|0;
      $15 = $685;
     }
    } else {
     while(1) {
      $686 = $15;
      $687 = $6;
      $688 = HEAP32[$687>>2]|0;
      $689 = HEAP32[$688>>2]|0;
      $690 = ($686>>>0)<($689>>>0);
      if (!($690)) {
       break L71;
      }
      $691 = $31;
      $692 = $15;
      $693 = (($691) + ($692)|0);
      $694 = HEAP8[$693>>0]|0;
      $695 = $21;
      $696 = ((($695)) + 1|0);
      $21 = $696;
      HEAP8[$695>>0] = $694;
      $697 = $21;
      $698 = ((($697)) + 1|0);
      $21 = $698;
      HEAP8[$697>>0] = -1;
      $699 = $15;
      $700 = (($699) + 1)|0;
      $15 = $700;
     }
    }
   }
  } while(0);
  $701 = $16;
  $702 = (($701) + 1)|0;
  $16 = $702;
 }
 $703 = $6;
 _stbi__cleanup_jpeg($703);
 $704 = $6;
 $705 = HEAP32[$704>>2]|0;
 $706 = HEAP32[$705>>2]|0;
 $707 = $7;
 HEAP32[$707>>2] = $706;
 $708 = $6;
 $709 = HEAP32[$708>>2]|0;
 $710 = ((($709)) + 4|0);
 $711 = HEAP32[$710>>2]|0;
 $712 = $8;
 HEAP32[$712>>2] = $711;
 $713 = $9;
 $714 = ($713|0)!=(0|0);
 if ($714) {
  $715 = $6;
  $716 = HEAP32[$715>>2]|0;
  $717 = ((($716)) + 8|0);
  $718 = HEAP32[$717>>2]|0;
  $719 = ($718|0)>=(3);
  $720 = $719 ? 3 : 1;
  $721 = $9;
  HEAP32[$721>>2] = $720;
 }
 $722 = $17;
 $5 = $722;
 $723 = $5;
 STACKTOP = sp;return ($723|0);
}
function _stbi__decode_jpeg_image($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $7 = $3;
  $8 = ($7|0)<(4);
  $9 = $2;
  if (!($8)) {
   break;
  }
  $10 = ((($9)) + 18076|0);
  $11 = $3;
  $12 = (($10) + (($11*72)|0)|0);
  $13 = ((($12)) + 48|0);
  HEAP32[$13>>2] = 0;
  $14 = $2;
  $15 = ((($14)) + 18076|0);
  $16 = $3;
  $17 = (($15) + (($16*72)|0)|0);
  $18 = ((($17)) + 52|0);
  HEAP32[$18>>2] = 0;
  $19 = $3;
  $20 = (($19) + 1)|0;
  $3 = $20;
 }
 $21 = ((($9)) + 18436|0);
 HEAP32[$21>>2] = 0;
 $22 = $2;
 $23 = (_stbi__decode_jpeg_header($22,0)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $1 = 0;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 $25 = $2;
 $26 = (_stbi__get_marker($25)|0);
 $27 = $26&255;
 $3 = $27;
 L9: while(1) {
  $28 = $3;
  $29 = ($28|0)==(217);
  $30 = $29 ^ 1;
  if (!($30)) {
   label = 27;
   break;
  }
  $31 = $3;
  $32 = ($31|0)==(218);
  L12: do {
   if ($32) {
    $33 = $2;
    $34 = (_stbi__process_scan_header($33)|0);
    $35 = ($34|0)!=(0);
    if (!($35)) {
     label = 10;
     break L9;
    }
    $36 = $2;
    $37 = (_stbi__parse_entropy_coded_data($36)|0);
    $38 = ($37|0)!=(0);
    if (!($38)) {
     label = 12;
     break L9;
    }
    $39 = $2;
    $40 = ((($39)) + 18372|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $43 = ($42|0)==(255);
    if ($43) {
     while(1) {
      $44 = $2;
      $45 = HEAP32[$44>>2]|0;
      $46 = (_stbi__at_eof($45)|0);
      $47 = ($46|0)!=(0);
      $48 = $47 ^ 1;
      if (!($48)) {
       break L12;
      }
      $49 = $2;
      $50 = HEAP32[$49>>2]|0;
      $51 = (_stbi__get8($50)|0);
      $52 = $51&255;
      $4 = $52;
      $53 = $4;
      $54 = ($53|0)==(255);
      if ($54) {
       break;
      }
     }
     $55 = $2;
     $56 = HEAP32[$55>>2]|0;
     $57 = (_stbi__get8($56)|0);
     $58 = $2;
     $59 = ((($58)) + 18372|0);
     HEAP8[$59>>0] = $57;
    }
   } else {
    $60 = $3;
    $61 = ($60|0)==(220);
    $62 = $2;
    if (!($61)) {
     $78 = $3;
     $79 = (_stbi__process_marker($62,$78)|0);
     $80 = ($79|0)!=(0);
     if ($80) {
      break;
     } else {
      label = 25;
      break L9;
     }
    }
    $63 = HEAP32[$62>>2]|0;
    $64 = (_stbi__get16be($63)|0);
    $5 = $64;
    $65 = $2;
    $66 = HEAP32[$65>>2]|0;
    $67 = (_stbi__get16be($66)|0);
    $6 = $67;
    $68 = $5;
    $69 = ($68|0)!=(4);
    if ($69) {
     label = 21;
     break L9;
    }
    $71 = $6;
    $72 = $2;
    $73 = HEAP32[$72>>2]|0;
    $74 = ((($73)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($71|0)!=($75|0);
    if ($76) {
     label = 23;
     break L9;
    }
   }
  } while(0);
  $81 = $2;
  $82 = (_stbi__get_marker($81)|0);
  $83 = $82&255;
  $3 = $83;
 }
 if ((label|0) == 10) {
  $1 = 0;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 else if ((label|0) == 12) {
  $1 = 0;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 else if ((label|0) == 21) {
  $70 = (_stbi__err(5362)|0);
  $1 = $70;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 else if ((label|0) == 23) {
  $77 = (_stbi__err(5374)|0);
  $1 = $77;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 else if ((label|0) == 25) {
  $1 = 0;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 else if ((label|0) == 27) {
  $84 = $2;
  $85 = ((($84)) + 18380|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($86|0)!=(0);
  if ($87) {
   $88 = $2;
   _stbi__jpeg_finish($88);
  }
  $1 = 1;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 return (0)|0;
}
function _stbi__cleanup_jpeg($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 (_stbi__free_jpeg_components($2,$6,0)|0);
 STACKTOP = sp;return;
}
function _resample_row_1($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $6;
 STACKTOP = sp;return ($10|0);
}
function _stbi__resample_row_v_2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $8;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $10;
  $16 = (($14) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18*3)|0;
  $20 = $7;
  $21 = $10;
  $22 = (($20) + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($19) + ($24))|0;
  $26 = (($25) + 2)|0;
  $27 = $26 >> 2;
  $28 = $27&255;
  $29 = $5;
  $30 = $10;
  $31 = (($29) + ($30)|0);
  HEAP8[$31>>0] = $28;
  $32 = $10;
  $33 = (($32) + 1)|0;
  $10 = $33;
 }
 $34 = $5;
 STACKTOP = sp;return ($34|0);
}
function _stbi__resample_row_h_2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $7;
 $12 = $14;
 $15 = $9;
 $16 = ($15|0)==(1);
 $17 = $12;
 $18 = HEAP8[$17>>0]|0;
 $19 = $6;
 if ($16) {
  $20 = ((($19)) + 1|0);
  HEAP8[$20>>0] = $18;
  $21 = $6;
  HEAP8[$21>>0] = $18;
  $22 = $6;
  $5 = $22;
  $112 = $5;
  STACKTOP = sp;return ($112|0);
 }
 HEAP8[$19>>0] = $18;
 $23 = $12;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = ($25*3)|0;
 $27 = $12;
 $28 = ((($27)) + 1|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = (($26) + ($30))|0;
 $32 = (($31) + 2)|0;
 $33 = $32 >> 2;
 $34 = $33&255;
 $35 = $6;
 $36 = ((($35)) + 1|0);
 HEAP8[$36>>0] = $34;
 $11 = 1;
 while(1) {
  $37 = $11;
  $38 = $9;
  $39 = (($38) - 1)|0;
  $40 = ($37|0)<($39|0);
  $41 = $12;
  if (!($40)) {
   break;
  }
  $42 = $11;
  $43 = (($41) + ($42)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = ($45*3)|0;
  $47 = (($46) + 2)|0;
  $13 = $47;
  $48 = $13;
  $49 = $12;
  $50 = $11;
  $51 = (($50) - 1)|0;
  $52 = (($49) + ($51)|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = (($48) + ($54))|0;
  $56 = $55 >> 2;
  $57 = $56&255;
  $58 = $6;
  $59 = $11;
  $60 = $59<<1;
  $61 = (($60) + 0)|0;
  $62 = (($58) + ($61)|0);
  HEAP8[$62>>0] = $57;
  $63 = $13;
  $64 = $12;
  $65 = $11;
  $66 = (($65) + 1)|0;
  $67 = (($64) + ($66)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = (($63) + ($69))|0;
  $71 = $70 >> 2;
  $72 = $71&255;
  $73 = $6;
  $74 = $11;
  $75 = $74<<1;
  $76 = (($75) + 1)|0;
  $77 = (($73) + ($76)|0);
  HEAP8[$77>>0] = $72;
  $78 = $11;
  $79 = (($78) + 1)|0;
  $11 = $79;
 }
 $80 = $9;
 $81 = (($80) - 2)|0;
 $82 = (($41) + ($81)|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = $83&255;
 $85 = ($84*3)|0;
 $86 = $12;
 $87 = $9;
 $88 = (($87) - 1)|0;
 $89 = (($86) + ($88)|0);
 $90 = HEAP8[$89>>0]|0;
 $91 = $90&255;
 $92 = (($85) + ($91))|0;
 $93 = (($92) + 2)|0;
 $94 = $93 >> 2;
 $95 = $94&255;
 $96 = $6;
 $97 = $11;
 $98 = $97<<1;
 $99 = (($98) + 0)|0;
 $100 = (($96) + ($99)|0);
 HEAP8[$100>>0] = $95;
 $101 = $12;
 $102 = $9;
 $103 = (($102) - 1)|0;
 $104 = (($101) + ($103)|0);
 $105 = HEAP8[$104>>0]|0;
 $106 = $6;
 $107 = $11;
 $108 = $107<<1;
 $109 = (($108) + 1)|0;
 $110 = (($106) + ($109)|0);
 HEAP8[$110>>0] = $105;
 $111 = $6;
 $5 = $111;
 $112 = $5;
 STACKTOP = sp;return ($112|0);
}
function _stbi__resample_row_generic($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $12 = $10;
  $13 = $8;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $11 = 0;
  while(1) {
   $15 = $11;
   $16 = $9;
   $17 = ($15|0)<($16|0);
   if (!($17)) {
    break;
   }
   $18 = $6;
   $19 = $10;
   $20 = (($18) + ($19)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $5;
   $23 = $10;
   $24 = $9;
   $25 = Math_imul($23, $24)|0;
   $26 = $11;
   $27 = (($25) + ($26))|0;
   $28 = (($22) + ($27)|0);
   HEAP8[$28>>0] = $21;
   $29 = $11;
   $30 = (($29) + 1)|0;
   $11 = $30;
  }
  $31 = $10;
  $32 = (($31) + 1)|0;
  $10 = $32;
 }
 $33 = $5;
 STACKTOP = sp;return ($33|0);
}
function _stbi__blinn_8x8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $5&255;
 $7 = $3;
 $8 = $7&255;
 $9 = Math_imul($6, $8)|0;
 $10 = (($9) + 128)|0;
 $4 = $10;
 $11 = $4;
 $12 = $4;
 $13 = $12 >>> 8;
 $14 = (($11) + ($13))|0;
 $15 = $14 >>> 8;
 $16 = $15&255;
 STACKTOP = sp;return ($16|0);
}
function _stbi__compute_y($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ($6*77)|0;
 $8 = $4;
 $9 = ($8*150)|0;
 $10 = (($7) + ($9))|0;
 $11 = $5;
 $12 = ($11*29)|0;
 $13 = (($10) + ($12))|0;
 $14 = $13 >> 8;
 $15 = $14&255;
 STACKTOP = sp;return ($15|0);
}
function _stbi__process_scan_header($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = (_stbi__get16be($10)|0);
 $4 = $11;
 $12 = $2;
 $13 = HEAP32[$12>>2]|0;
 $14 = (_stbi__get8($13)|0);
 $15 = $14&255;
 $16 = $2;
 $17 = ((($16)) + 18416|0);
 HEAP32[$17>>2] = $15;
 $18 = $2;
 $19 = ((($18)) + 18416|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)<(1);
 if (!($21)) {
  $22 = $2;
  $23 = ((($22)) + 18416|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)>(4);
  if (!($25)) {
   $26 = $2;
   $27 = ((($26)) + 18416|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $2;
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($28|0)>($32|0);
   if (!($33)) {
    $35 = $4;
    $36 = $2;
    $37 = ((($36)) + 18416|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $38<<1;
    $40 = (6 + ($39))|0;
    $41 = ($35|0)!=($40|0);
    if ($41) {
     $42 = (_stbi__err(5413)|0);
     $1 = $42;
     $175 = $1;
     STACKTOP = sp;return ($175|0);
    }
    $3 = 0;
    while(1) {
     $43 = $3;
     $44 = $2;
     $45 = ((($44)) + 18416|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($43|0)<($46|0);
     $48 = $2;
     $49 = HEAP32[$48>>2]|0;
     $50 = (_stbi__get8($49)|0);
     $51 = $50&255;
     if (!($47)) {
      label = 20;
      break;
     }
     $5 = $51;
     $52 = $2;
     $53 = HEAP32[$52>>2]|0;
     $54 = (_stbi__get8($53)|0);
     $55 = $54&255;
     $7 = $55;
     $6 = 0;
     while(1) {
      $56 = $6;
      $57 = $2;
      $58 = HEAP32[$57>>2]|0;
      $59 = ((($58)) + 8|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($56|0)<($60|0);
      if (!($61)) {
       break;
      }
      $62 = $2;
      $63 = ((($62)) + 18076|0);
      $64 = $6;
      $65 = (($63) + (($64*72)|0)|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = $5;
      $68 = ($66|0)==($67|0);
      if ($68) {
       break;
      }
      $69 = $6;
      $70 = (($69) + 1)|0;
      $6 = $70;
     }
     $71 = $6;
     $72 = $2;
     $73 = HEAP32[$72>>2]|0;
     $74 = ((($73)) + 8|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($71|0)==($75|0);
     if ($76) {
      label = 14;
      break;
     }
     $77 = $7;
     $78 = $77 >> 4;
     $79 = $2;
     $80 = ((($79)) + 18076|0);
     $81 = $6;
     $82 = (($80) + (($81*72)|0)|0);
     $83 = ((($82)) + 16|0);
     HEAP32[$83>>2] = $78;
     $84 = $2;
     $85 = ((($84)) + 18076|0);
     $86 = $6;
     $87 = (($85) + (($86*72)|0)|0);
     $88 = ((($87)) + 16|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ($89|0)>(3);
     if ($90) {
      label = 16;
      break;
     }
     $92 = $7;
     $93 = $92 & 15;
     $94 = $2;
     $95 = ((($94)) + 18076|0);
     $96 = $6;
     $97 = (($95) + (($96*72)|0)|0);
     $98 = ((($97)) + 20|0);
     HEAP32[$98>>2] = $93;
     $99 = $2;
     $100 = ((($99)) + 18076|0);
     $101 = $6;
     $102 = (($100) + (($101*72)|0)|0);
     $103 = ((($102)) + 20|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)>(3);
     if ($105) {
      label = 18;
      break;
     }
     $107 = $6;
     $108 = $2;
     $109 = ((($108)) + 18420|0);
     $110 = $3;
     $111 = (($109) + ($110<<2)|0);
     HEAP32[$111>>2] = $107;
     $112 = $3;
     $113 = (($112) + 1)|0;
     $3 = $113;
    }
    if ((label|0) == 14) {
     $1 = 0;
     $175 = $1;
     STACKTOP = sp;return ($175|0);
    }
    else if ((label|0) == 16) {
     $91 = (_stbi__err(5425)|0);
     $1 = $91;
     $175 = $1;
     STACKTOP = sp;return ($175|0);
    }
    else if ((label|0) == 18) {
     $106 = (_stbi__err(5437)|0);
     $1 = $106;
     $175 = $1;
     STACKTOP = sp;return ($175|0);
    }
    else if ((label|0) == 20) {
     $114 = $2;
     $115 = ((($114)) + 18384|0);
     HEAP32[$115>>2] = $51;
     $116 = $2;
     $117 = HEAP32[$116>>2]|0;
     $118 = (_stbi__get8($117)|0);
     $119 = $118&255;
     $120 = $2;
     $121 = ((($120)) + 18388|0);
     HEAP32[$121>>2] = $119;
     $122 = $2;
     $123 = HEAP32[$122>>2]|0;
     $124 = (_stbi__get8($123)|0);
     $125 = $124&255;
     $8 = $125;
     $126 = $8;
     $127 = $126 >> 4;
     $128 = $2;
     $129 = ((($128)) + 18392|0);
     HEAP32[$129>>2] = $127;
     $130 = $8;
     $131 = $130 & 15;
     $132 = $2;
     $133 = ((($132)) + 18396|0);
     HEAP32[$133>>2] = $131;
     $134 = $2;
     $135 = ((($134)) + 18380|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($136|0)!=(0);
     $138 = $2;
     $139 = ((($138)) + 18384|0);
     $140 = HEAP32[$139>>2]|0;
     do {
      if ($137) {
       $141 = ($140|0)>(63);
       if (!($141)) {
        $142 = $2;
        $143 = ((($142)) + 18388|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)>(63);
        if (!($145)) {
         $146 = $2;
         $147 = ((($146)) + 18384|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = $2;
         $150 = ((($149)) + 18388|0);
         $151 = HEAP32[$150>>2]|0;
         $152 = ($148|0)>($151|0);
         if (!($152)) {
          $153 = $2;
          $154 = ((($153)) + 18392|0);
          $155 = HEAP32[$154>>2]|0;
          $156 = ($155|0)>(13);
          if (!($156)) {
           $157 = $2;
           $158 = ((($157)) + 18396|0);
           $159 = HEAP32[$158>>2]|0;
           $160 = ($159|0)>(13);
           if (!($160)) {
            break;
           }
          }
         }
        }
       }
       $161 = (_stbi__err(5449)|0);
       $1 = $161;
       $175 = $1;
       STACKTOP = sp;return ($175|0);
      } else {
       $162 = ($140|0)!=(0);
       if ($162) {
        $163 = (_stbi__err(5449)|0);
        $1 = $163;
        $175 = $1;
        STACKTOP = sp;return ($175|0);
       }
       $164 = $2;
       $165 = ((($164)) + 18392|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)!=(0);
       if (!($167)) {
        $168 = $2;
        $169 = ((($168)) + 18396|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = ($170|0)!=(0);
        if (!($171)) {
         $173 = $2;
         $174 = ((($173)) + 18388|0);
         HEAP32[$174>>2] = 63;
         break;
        }
       }
       $172 = (_stbi__err(5449)|0);
       $1 = $172;
       $175 = $1;
       STACKTOP = sp;return ($175|0);
      }
     } while(0);
     $1 = 1;
     $175 = $1;
     STACKTOP = sp;return ($175|0);
    }
   }
  }
 }
 $34 = (_stbi__err(5389)|0);
 $1 = $34;
 $175 = $1;
 STACKTOP = sp;return ($175|0);
}
function _stbi__parse_entropy_coded_data($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $5 = sp + 128|0;
 $15 = sp;
 $2 = $0;
 $36 = $2;
 _stbi__jpeg_reset($36);
 $37 = $2;
 $38 = ((($37)) + 18380|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0);
 $41 = $2;
 $42 = ((($41)) + 18416|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(1);
 if (!($40)) {
  if ($44) {
   $45 = $2;
   $46 = ((($45)) + 18420|0);
   $47 = HEAP32[$46>>2]|0;
   $6 = $47;
   $48 = $2;
   $49 = ((($48)) + 18076|0);
   $50 = $6;
   $51 = (($49) + (($50*72)|0)|0);
   $52 = ((($51)) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 7)|0;
   $55 = $54 >> 3;
   $7 = $55;
   $56 = $2;
   $57 = ((($56)) + 18076|0);
   $58 = $6;
   $59 = (($57) + (($58*72)|0)|0);
   $60 = ((($59)) + 32|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + 7)|0;
   $63 = $62 >> 3;
   $8 = $63;
   $4 = 0;
   L5: while(1) {
    $64 = $4;
    $65 = $8;
    $66 = ($64|0)<($65|0);
    if (!($66)) {
     label = 18;
     break;
    }
    $3 = 0;
    while(1) {
     $67 = $3;
     $68 = $7;
     $69 = ($67|0)<($68|0);
     if (!($69)) {
      break;
     }
     $70 = $2;
     $71 = ((($70)) + 18076|0);
     $72 = $6;
     $73 = (($71) + (($72*72)|0)|0);
     $74 = ((($73)) + 20|0);
     $75 = HEAP32[$74>>2]|0;
     $9 = $75;
     $76 = $2;
     $77 = $2;
     $78 = ((($77)) + 4|0);
     $79 = $2;
     $80 = ((($79)) + 18076|0);
     $81 = $6;
     $82 = (($80) + (($81*72)|0)|0);
     $83 = ((($82)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (($78) + (($84*1680)|0)|0);
     $86 = $2;
     $87 = ((($86)) + 6724|0);
     $88 = $9;
     $89 = (($87) + (($88*1680)|0)|0);
     $90 = $2;
     $91 = ((($90)) + 13956|0);
     $92 = $9;
     $93 = (($91) + ($92<<10)|0);
     $94 = $6;
     $95 = $2;
     $96 = ((($95)) + 13444|0);
     $97 = $2;
     $98 = ((($97)) + 18076|0);
     $99 = $6;
     $100 = (($98) + (($99*72)|0)|0);
     $101 = ((($100)) + 12|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (($96) + ($102<<7)|0);
     $104 = (_stbi__jpeg_decode_block($76,$5,$85,$89,$93,$94,$103)|0);
     $105 = ($104|0)!=(0);
     if (!($105)) {
      label = 8;
      break L5;
     }
     $106 = $2;
     $107 = ((($106)) + 18444|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = $2;
     $110 = ((($109)) + 18076|0);
     $111 = $6;
     $112 = (($110) + (($111*72)|0)|0);
     $113 = ((($112)) + 44|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = $2;
     $116 = ((($115)) + 18076|0);
     $117 = $6;
     $118 = (($116) + (($117*72)|0)|0);
     $119 = ((($118)) + 36|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = $4;
     $122 = Math_imul($120, $121)|0;
     $123 = $122<<3;
     $124 = (($114) + ($123)|0);
     $125 = $3;
     $126 = $125<<3;
     $127 = (($124) + ($126)|0);
     $128 = $2;
     $129 = ((($128)) + 18076|0);
     $130 = $6;
     $131 = (($129) + (($130*72)|0)|0);
     $132 = ((($131)) + 36|0);
     $133 = HEAP32[$132>>2]|0;
     FUNCTION_TABLE_viii[$108 & 15]($127,$133,$5);
     $134 = $2;
     $135 = ((($134)) + 18440|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($136) + -1)|0;
     HEAP32[$135>>2] = $137;
     $138 = ($137|0)<=(0);
     if ($138) {
      $139 = $2;
      $140 = ((($139)) + 18368|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)<(24);
      if ($142) {
       $143 = $2;
       _stbi__grow_buffer_unsafe($143);
      }
      $144 = $2;
      $145 = ((($144)) + 18372|0);
      $146 = HEAP8[$145>>0]|0;
      $147 = $146&255;
      $148 = ($147|0)>=(208);
      if (!($148)) {
       label = 14;
       break L5;
      }
      $149 = $2;
      $150 = ((($149)) + 18372|0);
      $151 = HEAP8[$150>>0]|0;
      $152 = $151&255;
      $153 = ($152|0)<=(215);
      if (!($153)) {
       label = 14;
       break L5;
      }
      $154 = $2;
      _stbi__jpeg_reset($154);
     }
     $155 = $3;
     $156 = (($155) + 1)|0;
     $3 = $156;
    }
    $157 = $4;
    $158 = (($157) + 1)|0;
    $4 = $158;
   }
   if ((label|0) == 8) {
    $1 = 0;
    $530 = $1;
    STACKTOP = sp;return ($530|0);
   }
   else if ((label|0) == 14) {
    $1 = 1;
    $530 = $1;
    STACKTOP = sp;return ($530|0);
   }
   else if ((label|0) == 18) {
    $1 = 1;
    $530 = $1;
    STACKTOP = sp;return ($530|0);
   }
  }
  $11 = 0;
  L29: while(1) {
   $159 = $11;
   $160 = $2;
   $161 = ((($160)) + 18064|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ($159|0)<($162|0);
   if (!($163)) {
    label = 43;
    break;
   }
   $10 = 0;
   while(1) {
    $164 = $10;
    $165 = $2;
    $166 = ((($165)) + 18060|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ($164|0)<($167|0);
    if (!($168)) {
     break;
    }
    $12 = 0;
    while(1) {
     $169 = $12;
     $170 = $2;
     $171 = ((($170)) + 18416|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($169|0)<($172|0);
     $174 = $2;
     if (!($173)) {
      break;
     }
     $175 = ((($174)) + 18420|0);
     $176 = $12;
     $177 = (($175) + ($176<<2)|0);
     $178 = HEAP32[$177>>2]|0;
     $16 = $178;
     $14 = 0;
     while(1) {
      $179 = $14;
      $180 = $2;
      $181 = ((($180)) + 18076|0);
      $182 = $16;
      $183 = (($181) + (($182*72)|0)|0);
      $184 = ((($183)) + 8|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = ($179|0)<($185|0);
      if (!($186)) {
       break;
      }
      $13 = 0;
      while(1) {
       $187 = $13;
       $188 = $2;
       $189 = ((($188)) + 18076|0);
       $190 = $16;
       $191 = (($189) + (($190*72)|0)|0);
       $192 = ((($191)) + 4|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = ($187|0)<($193|0);
       if (!($194)) {
        break;
       }
       $195 = $10;
       $196 = $2;
       $197 = ((($196)) + 18076|0);
       $198 = $16;
       $199 = (($197) + (($198*72)|0)|0);
       $200 = ((($199)) + 4|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = Math_imul($195, $201)|0;
       $203 = $13;
       $204 = (($202) + ($203))|0;
       $205 = $204<<3;
       $17 = $205;
       $206 = $11;
       $207 = $2;
       $208 = ((($207)) + 18076|0);
       $209 = $16;
       $210 = (($208) + (($209*72)|0)|0);
       $211 = ((($210)) + 8|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = Math_imul($206, $212)|0;
       $214 = $14;
       $215 = (($213) + ($214))|0;
       $216 = $215<<3;
       $18 = $216;
       $217 = $2;
       $218 = ((($217)) + 18076|0);
       $219 = $16;
       $220 = (($218) + (($219*72)|0)|0);
       $221 = ((($220)) + 20|0);
       $222 = HEAP32[$221>>2]|0;
       $19 = $222;
       $223 = $2;
       $224 = $2;
       $225 = ((($224)) + 4|0);
       $226 = $2;
       $227 = ((($226)) + 18076|0);
       $228 = $16;
       $229 = (($227) + (($228*72)|0)|0);
       $230 = ((($229)) + 16|0);
       $231 = HEAP32[$230>>2]|0;
       $232 = (($225) + (($231*1680)|0)|0);
       $233 = $2;
       $234 = ((($233)) + 6724|0);
       $235 = $19;
       $236 = (($234) + (($235*1680)|0)|0);
       $237 = $2;
       $238 = ((($237)) + 13956|0);
       $239 = $19;
       $240 = (($238) + ($239<<10)|0);
       $241 = $16;
       $242 = $2;
       $243 = ((($242)) + 13444|0);
       $244 = $2;
       $245 = ((($244)) + 18076|0);
       $246 = $16;
       $247 = (($245) + (($246*72)|0)|0);
       $248 = ((($247)) + 12|0);
       $249 = HEAP32[$248>>2]|0;
       $250 = (($243) + ($249<<7)|0);
       $251 = (_stbi__jpeg_decode_block($223,$15,$232,$236,$240,$241,$250)|0);
       $252 = ($251|0)!=(0);
       if (!($252)) {
        label = 30;
        break L29;
       }
       $253 = $2;
       $254 = ((($253)) + 18444|0);
       $255 = HEAP32[$254>>2]|0;
       $256 = $2;
       $257 = ((($256)) + 18076|0);
       $258 = $16;
       $259 = (($257) + (($258*72)|0)|0);
       $260 = ((($259)) + 44|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = $2;
       $263 = ((($262)) + 18076|0);
       $264 = $16;
       $265 = (($263) + (($264*72)|0)|0);
       $266 = ((($265)) + 36|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = $18;
       $269 = Math_imul($267, $268)|0;
       $270 = (($261) + ($269)|0);
       $271 = $17;
       $272 = (($270) + ($271)|0);
       $273 = $2;
       $274 = ((($273)) + 18076|0);
       $275 = $16;
       $276 = (($274) + (($275*72)|0)|0);
       $277 = ((($276)) + 36|0);
       $278 = HEAP32[$277>>2]|0;
       FUNCTION_TABLE_viii[$255 & 15]($272,$278,$15);
       $279 = $13;
       $280 = (($279) + 1)|0;
       $13 = $280;
      }
      $281 = $14;
      $282 = (($281) + 1)|0;
      $14 = $282;
     }
     $283 = $12;
     $284 = (($283) + 1)|0;
     $12 = $284;
    }
    $285 = ((($174)) + 18440|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = (($286) + -1)|0;
    HEAP32[$285>>2] = $287;
    $288 = ($287|0)<=(0);
    if ($288) {
     $289 = $2;
     $290 = ((($289)) + 18368|0);
     $291 = HEAP32[$290>>2]|0;
     $292 = ($291|0)<(24);
     if ($292) {
      $293 = $2;
      _stbi__grow_buffer_unsafe($293);
     }
     $294 = $2;
     $295 = ((($294)) + 18372|0);
     $296 = HEAP8[$295>>0]|0;
     $297 = $296&255;
     $298 = ($297|0)>=(208);
     if (!($298)) {
      label = 39;
      break L29;
     }
     $299 = $2;
     $300 = ((($299)) + 18372|0);
     $301 = HEAP8[$300>>0]|0;
     $302 = $301&255;
     $303 = ($302|0)<=(215);
     if (!($303)) {
      label = 39;
      break L29;
     }
     $304 = $2;
     _stbi__jpeg_reset($304);
    }
    $305 = $10;
    $306 = (($305) + 1)|0;
    $10 = $306;
   }
   $307 = $11;
   $308 = (($307) + 1)|0;
   $11 = $308;
  }
  if ((label|0) == 30) {
   $1 = 0;
   $530 = $1;
   STACKTOP = sp;return ($530|0);
  }
  else if ((label|0) == 39) {
   $1 = 1;
   $530 = $1;
   STACKTOP = sp;return ($530|0);
  }
  else if ((label|0) == 43) {
   $1 = 1;
   $530 = $1;
   STACKTOP = sp;return ($530|0);
  }
 }
 if ($44) {
  $309 = $2;
  $310 = ((($309)) + 18420|0);
  $311 = HEAP32[$310>>2]|0;
  $22 = $311;
  $312 = $2;
  $313 = ((($312)) + 18076|0);
  $314 = $22;
  $315 = (($313) + (($314*72)|0)|0);
  $316 = ((($315)) + 28|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = (($317) + 7)|0;
  $319 = $318 >> 3;
  $23 = $319;
  $320 = $2;
  $321 = ((($320)) + 18076|0);
  $322 = $22;
  $323 = (($321) + (($322*72)|0)|0);
  $324 = ((($323)) + 32|0);
  $325 = HEAP32[$324>>2]|0;
  $326 = (($325) + 7)|0;
  $327 = $326 >> 3;
  $24 = $327;
  $21 = 0;
  L67: while(1) {
   $328 = $21;
   $329 = $24;
   $330 = ($328|0)<($329|0);
   if (!($330)) {
    label = 63;
    break;
   }
   $20 = 0;
   while(1) {
    $331 = $20;
    $332 = $23;
    $333 = ($331|0)<($332|0);
    if (!($333)) {
     break;
    }
    $334 = $2;
    $335 = ((($334)) + 18076|0);
    $336 = $22;
    $337 = (($335) + (($336*72)|0)|0);
    $338 = ((($337)) + 60|0);
    $339 = HEAP32[$338>>2]|0;
    $340 = $20;
    $341 = $21;
    $342 = $2;
    $343 = ((($342)) + 18076|0);
    $344 = $22;
    $345 = (($343) + (($344*72)|0)|0);
    $346 = ((($345)) + 64|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = Math_imul($341, $347)|0;
    $349 = (($340) + ($348))|0;
    $350 = $349<<6;
    $351 = (($339) + ($350<<1)|0);
    $25 = $351;
    $352 = $2;
    $353 = ((($352)) + 18384|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = ($354|0)==(0);
    $356 = $2;
    if ($355) {
     $357 = $25;
     $358 = $2;
     $359 = ((($358)) + 4|0);
     $360 = $2;
     $361 = ((($360)) + 18076|0);
     $362 = $22;
     $363 = (($361) + (($362*72)|0)|0);
     $364 = ((($363)) + 16|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = (($359) + (($365*1680)|0)|0);
     $367 = $22;
     $368 = (_stbi__jpeg_decode_block_prog_dc($356,$357,$366,$367)|0);
     $369 = ($368|0)!=(0);
     if (!($369)) {
      label = 51;
      break L67;
     }
    } else {
     $370 = ((($356)) + 18076|0);
     $371 = $22;
     $372 = (($370) + (($371*72)|0)|0);
     $373 = ((($372)) + 20|0);
     $374 = HEAP32[$373>>2]|0;
     $26 = $374;
     $375 = $2;
     $376 = $25;
     $377 = $2;
     $378 = ((($377)) + 6724|0);
     $379 = $26;
     $380 = (($378) + (($379*1680)|0)|0);
     $381 = $2;
     $382 = ((($381)) + 13956|0);
     $383 = $26;
     $384 = (($382) + ($383<<10)|0);
     $385 = (_stbi__jpeg_decode_block_prog_ac($375,$376,$380,$384)|0);
     $386 = ($385|0)!=(0);
     if (!($386)) {
      label = 53;
      break L67;
     }
    }
    $387 = $2;
    $388 = ((($387)) + 18440|0);
    $389 = HEAP32[$388>>2]|0;
    $390 = (($389) + -1)|0;
    HEAP32[$388>>2] = $390;
    $391 = ($390|0)<=(0);
    if ($391) {
     $392 = $2;
     $393 = ((($392)) + 18368|0);
     $394 = HEAP32[$393>>2]|0;
     $395 = ($394|0)<(24);
     if ($395) {
      $396 = $2;
      _stbi__grow_buffer_unsafe($396);
     }
     $397 = $2;
     $398 = ((($397)) + 18372|0);
     $399 = HEAP8[$398>>0]|0;
     $400 = $399&255;
     $401 = ($400|0)>=(208);
     if (!($401)) {
      label = 59;
      break L67;
     }
     $402 = $2;
     $403 = ((($402)) + 18372|0);
     $404 = HEAP8[$403>>0]|0;
     $405 = $404&255;
     $406 = ($405|0)<=(215);
     if (!($406)) {
      label = 59;
      break L67;
     }
     $407 = $2;
     _stbi__jpeg_reset($407);
    }
    $408 = $20;
    $409 = (($408) + 1)|0;
    $20 = $409;
   }
   $410 = $21;
   $411 = (($410) + 1)|0;
   $21 = $411;
  }
  if ((label|0) == 51) {
   $1 = 0;
   $530 = $1;
   STACKTOP = sp;return ($530|0);
  }
  else if ((label|0) == 53) {
   $1 = 0;
   $530 = $1;
   STACKTOP = sp;return ($530|0);
  }
  else if ((label|0) == 59) {
   $1 = 1;
   $530 = $1;
   STACKTOP = sp;return ($530|0);
  }
  else if ((label|0) == 63) {
   $1 = 1;
   $530 = $1;
   STACKTOP = sp;return ($530|0);
  }
 }
 $28 = 0;
 L96: while(1) {
  $412 = $28;
  $413 = $2;
  $414 = ((($413)) + 18064|0);
  $415 = HEAP32[$414>>2]|0;
  $416 = ($412|0)<($415|0);
  if (!($416)) {
   label = 88;
   break;
  }
  $27 = 0;
  while(1) {
   $417 = $27;
   $418 = $2;
   $419 = ((($418)) + 18060|0);
   $420 = HEAP32[$419>>2]|0;
   $421 = ($417|0)<($420|0);
   if (!($421)) {
    break;
   }
   $29 = 0;
   while(1) {
    $422 = $29;
    $423 = $2;
    $424 = ((($423)) + 18416|0);
    $425 = HEAP32[$424>>2]|0;
    $426 = ($422|0)<($425|0);
    $427 = $2;
    if (!($426)) {
     break;
    }
    $428 = ((($427)) + 18420|0);
    $429 = $29;
    $430 = (($428) + ($429<<2)|0);
    $431 = HEAP32[$430>>2]|0;
    $32 = $431;
    $31 = 0;
    while(1) {
     $432 = $31;
     $433 = $2;
     $434 = ((($433)) + 18076|0);
     $435 = $32;
     $436 = (($434) + (($435*72)|0)|0);
     $437 = ((($436)) + 8|0);
     $438 = HEAP32[$437>>2]|0;
     $439 = ($432|0)<($438|0);
     if (!($439)) {
      break;
     }
     $30 = 0;
     while(1) {
      $440 = $30;
      $441 = $2;
      $442 = ((($441)) + 18076|0);
      $443 = $32;
      $444 = (($442) + (($443*72)|0)|0);
      $445 = ((($444)) + 4|0);
      $446 = HEAP32[$445>>2]|0;
      $447 = ($440|0)<($446|0);
      if (!($447)) {
       break;
      }
      $448 = $27;
      $449 = $2;
      $450 = ((($449)) + 18076|0);
      $451 = $32;
      $452 = (($450) + (($451*72)|0)|0);
      $453 = ((($452)) + 4|0);
      $454 = HEAP32[$453>>2]|0;
      $455 = Math_imul($448, $454)|0;
      $456 = $30;
      $457 = (($455) + ($456))|0;
      $33 = $457;
      $458 = $28;
      $459 = $2;
      $460 = ((($459)) + 18076|0);
      $461 = $32;
      $462 = (($460) + (($461*72)|0)|0);
      $463 = ((($462)) + 8|0);
      $464 = HEAP32[$463>>2]|0;
      $465 = Math_imul($458, $464)|0;
      $466 = $31;
      $467 = (($465) + ($466))|0;
      $34 = $467;
      $468 = $2;
      $469 = ((($468)) + 18076|0);
      $470 = $32;
      $471 = (($469) + (($470*72)|0)|0);
      $472 = ((($471)) + 60|0);
      $473 = HEAP32[$472>>2]|0;
      $474 = $33;
      $475 = $34;
      $476 = $2;
      $477 = ((($476)) + 18076|0);
      $478 = $32;
      $479 = (($477) + (($478*72)|0)|0);
      $480 = ((($479)) + 64|0);
      $481 = HEAP32[$480>>2]|0;
      $482 = Math_imul($475, $481)|0;
      $483 = (($474) + ($482))|0;
      $484 = $483<<6;
      $485 = (($473) + ($484<<1)|0);
      $35 = $485;
      $486 = $2;
      $487 = $35;
      $488 = $2;
      $489 = ((($488)) + 4|0);
      $490 = $2;
      $491 = ((($490)) + 18076|0);
      $492 = $32;
      $493 = (($491) + (($492*72)|0)|0);
      $494 = ((($493)) + 16|0);
      $495 = HEAP32[$494>>2]|0;
      $496 = (($489) + (($495*1680)|0)|0);
      $497 = $32;
      $498 = (_stbi__jpeg_decode_block_prog_dc($486,$487,$496,$497)|0);
      $499 = ($498|0)!=(0);
      if (!($499)) {
       label = 75;
       break L96;
      }
      $500 = $30;
      $501 = (($500) + 1)|0;
      $30 = $501;
     }
     $502 = $31;
     $503 = (($502) + 1)|0;
     $31 = $503;
    }
    $504 = $29;
    $505 = (($504) + 1)|0;
    $29 = $505;
   }
   $506 = ((($427)) + 18440|0);
   $507 = HEAP32[$506>>2]|0;
   $508 = (($507) + -1)|0;
   HEAP32[$506>>2] = $508;
   $509 = ($508|0)<=(0);
   if ($509) {
    $510 = $2;
    $511 = ((($510)) + 18368|0);
    $512 = HEAP32[$511>>2]|0;
    $513 = ($512|0)<(24);
    if ($513) {
     $514 = $2;
     _stbi__grow_buffer_unsafe($514);
    }
    $515 = $2;
    $516 = ((($515)) + 18372|0);
    $517 = HEAP8[$516>>0]|0;
    $518 = $517&255;
    $519 = ($518|0)>=(208);
    if (!($519)) {
     label = 84;
     break L96;
    }
    $520 = $2;
    $521 = ((($520)) + 18372|0);
    $522 = HEAP8[$521>>0]|0;
    $523 = $522&255;
    $524 = ($523|0)<=(215);
    if (!($524)) {
     label = 84;
     break L96;
    }
    $525 = $2;
    _stbi__jpeg_reset($525);
   }
   $526 = $27;
   $527 = (($526) + 1)|0;
   $27 = $527;
  }
  $528 = $28;
  $529 = (($528) + 1)|0;
  $28 = $529;
 }
 if ((label|0) == 75) {
  $1 = 0;
  $530 = $1;
  STACKTOP = sp;return ($530|0);
 }
 else if ((label|0) == 84) {
  $1 = 1;
  $530 = $1;
  STACKTOP = sp;return ($530|0);
 }
 else if ((label|0) == 88) {
  $1 = 1;
  $530 = $1;
  STACKTOP = sp;return ($530|0);
 }
 return (0)|0;
}
function _stbi__jpeg_finish($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $8 = $1;
 $9 = ((($8)) + 18380|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $4 = 0;
 while(1) {
  $12 = $4;
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($12|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $1;
  $19 = ((($18)) + 18076|0);
  $20 = $4;
  $21 = (($19) + (($20*72)|0)|0);
  $22 = ((($21)) + 28|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 7)|0;
  $25 = $24 >> 3;
  $5 = $25;
  $26 = $1;
  $27 = ((($26)) + 18076|0);
  $28 = $4;
  $29 = (($27) + (($28*72)|0)|0);
  $30 = ((($29)) + 32|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 7)|0;
  $33 = $32 >> 3;
  $6 = $33;
  $3 = 0;
  while(1) {
   $34 = $3;
   $35 = $6;
   $36 = ($34|0)<($35|0);
   if (!($36)) {
    break;
   }
   $2 = 0;
   while(1) {
    $37 = $2;
    $38 = $5;
    $39 = ($37|0)<($38|0);
    if (!($39)) {
     break;
    }
    $40 = $1;
    $41 = ((($40)) + 18076|0);
    $42 = $4;
    $43 = (($41) + (($42*72)|0)|0);
    $44 = ((($43)) + 60|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = $2;
    $47 = $3;
    $48 = $1;
    $49 = ((($48)) + 18076|0);
    $50 = $4;
    $51 = (($49) + (($50*72)|0)|0);
    $52 = ((($51)) + 64|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = Math_imul($47, $53)|0;
    $55 = (($46) + ($54))|0;
    $56 = $55<<6;
    $57 = (($45) + ($56<<1)|0);
    $7 = $57;
    $58 = $7;
    $59 = $1;
    $60 = ((($59)) + 13444|0);
    $61 = $1;
    $62 = ((($61)) + 18076|0);
    $63 = $4;
    $64 = (($62) + (($63*72)|0)|0);
    $65 = ((($64)) + 12|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (($60) + ($66<<7)|0);
    _stbi__jpeg_dequantize($58,$67);
    $68 = $1;
    $69 = ((($68)) + 18444|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $1;
    $72 = ((($71)) + 18076|0);
    $73 = $4;
    $74 = (($72) + (($73*72)|0)|0);
    $75 = ((($74)) + 44|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $1;
    $78 = ((($77)) + 18076|0);
    $79 = $4;
    $80 = (($78) + (($79*72)|0)|0);
    $81 = ((($80)) + 36|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $3;
    $84 = Math_imul($82, $83)|0;
    $85 = $84<<3;
    $86 = (($76) + ($85)|0);
    $87 = $2;
    $88 = $87<<3;
    $89 = (($86) + ($88)|0);
    $90 = $1;
    $91 = ((($90)) + 18076|0);
    $92 = $4;
    $93 = (($91) + (($92*72)|0)|0);
    $94 = ((($93)) + 36|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $7;
    FUNCTION_TABLE_viii[$70 & 15]($89,$95,$96);
    $97 = $2;
    $98 = (($97) + 1)|0;
    $2 = $98;
   }
   $99 = $3;
   $100 = (($99) + 1)|0;
   $3 = $100;
  }
  $101 = $4;
  $102 = (($101) + 1)|0;
  $4 = $102;
 }
 STACKTOP = sp;return;
}
function _stbi__jpeg_reset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 18368|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $5 = ((($4)) + 18364|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = ((($6)) + 18376|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 18076|0);
 $10 = ((($9)) + 216|0);
 $11 = ((($10)) + 24|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = ((($12)) + 18076|0);
 $14 = ((($13)) + 144|0);
 $15 = ((($14)) + 24|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 $17 = ((($16)) + 18076|0);
 $18 = ((($17)) + 72|0);
 $19 = ((($18)) + 24|0);
 HEAP32[$19>>2] = 0;
 $20 = $1;
 $21 = ((($20)) + 18076|0);
 $22 = ((($21)) + 24|0);
 HEAP32[$22>>2] = 0;
 $23 = $1;
 $24 = ((($23)) + 18372|0);
 HEAP8[$24>>0] = -1;
 $25 = $1;
 $26 = ((($25)) + 18436|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $34 = 2147483647;
  $32 = $1;
  $33 = ((($32)) + 18440|0);
  HEAP32[$33>>2] = $34;
  $35 = $1;
  $36 = ((($35)) + 18400|0);
  HEAP32[$36>>2] = 0;
  STACKTOP = sp;return;
 }
 $29 = $1;
 $30 = ((($29)) + 18436|0);
 $31 = HEAP32[$30>>2]|0;
 $34 = $31;
 $32 = $1;
 $33 = ((($32)) + 18440|0);
 HEAP32[$33>>2] = $34;
 $35 = $1;
 $36 = ((($35)) + 18400|0);
 HEAP32[$36>>2] = 0;
 STACKTOP = sp;return;
}
function _stbi__jpeg_decode_block($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $24 = $8;
 $25 = ((($24)) + 18368|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(16);
 if ($27) {
  $28 = $8;
  _stbi__grow_buffer_unsafe($28);
 }
 $29 = $8;
 $30 = $10;
 $31 = (_stbi__jpeg_huff_decode($29,$30)|0);
 $18 = $31;
 $32 = $18;
 $33 = ($32|0)<(0);
 if ($33) {
  $34 = (_stbi__err(5457)|0);
  $7 = $34;
  $153 = $7;
  STACKTOP = sp;return ($153|0);
 }
 $35 = $9;
 dest=$35; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $36 = $18;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $8;
  $39 = $18;
  $40 = (_stbi__extend_receive($38,$39)|0);
  $41 = $40;
 } else {
  $41 = 0;
 }
 $15 = $41;
 $42 = $8;
 $43 = ((($42)) + 18076|0);
 $44 = $13;
 $45 = (($43) + (($44*72)|0)|0);
 $46 = ((($45)) + 24|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $15;
 $49 = (($47) + ($48))|0;
 $16 = $49;
 $50 = $16;
 $51 = $8;
 $52 = ((($51)) + 18076|0);
 $53 = $13;
 $54 = (($52) + (($53*72)|0)|0);
 $55 = ((($54)) + 24|0);
 HEAP32[$55>>2] = $50;
 $56 = $16;
 $57 = $14;
 $58 = HEAP16[$57>>1]|0;
 $59 = $58&65535;
 $60 = Math_imul($56, $59)|0;
 $61 = $60&65535;
 $62 = $9;
 HEAP16[$62>>1] = $61;
 $17 = 1;
 L11: while(1) {
  $63 = $8;
  $64 = ((($63)) + 18368|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)<(16);
  if ($66) {
   $67 = $8;
   _stbi__grow_buffer_unsafe($67);
  }
  $68 = $8;
  $69 = ((($68)) + 18364|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $70 >>> 23;
  $72 = $71 & 511;
  $20 = $72;
  $73 = $12;
  $74 = $20;
  $75 = (($73) + ($74<<1)|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76 << 16 >> 16;
  $21 = $77;
  $78 = $21;
  $79 = ($78|0)!=(0);
  do {
   if ($79) {
    $80 = $21;
    $81 = $80 >> 4;
    $82 = $81 & 15;
    $83 = $17;
    $84 = (($83) + ($82))|0;
    $17 = $84;
    $85 = $21;
    $86 = $85 & 15;
    $22 = $86;
    $87 = $22;
    $88 = $8;
    $89 = ((($88)) + 18364|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $90 << $87;
    HEAP32[$89>>2] = $91;
    $92 = $22;
    $93 = $8;
    $94 = ((($93)) + 18368|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($95) - ($92))|0;
    HEAP32[$94>>2] = $96;
    $97 = $17;
    $98 = (($97) + 1)|0;
    $17 = $98;
    $99 = (48 + ($97)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&255;
    $19 = $101;
    $102 = $21;
    $103 = $102 >> 8;
    $104 = $14;
    $105 = $19;
    $106 = (($104) + ($105<<1)|0);
    $107 = HEAP16[$106>>1]|0;
    $108 = $107&65535;
    $109 = Math_imul($103, $108)|0;
    $110 = $109&65535;
    $111 = $9;
    $112 = $19;
    $113 = (($111) + ($112<<1)|0);
    HEAP16[$113>>1] = $110;
   } else {
    $114 = $8;
    $115 = $11;
    $116 = (_stbi__jpeg_huff_decode($114,$115)|0);
    $23 = $116;
    $117 = $23;
    $118 = ($117|0)<(0);
    if ($118) {
     label = 13;
     break L11;
    }
    $120 = $23;
    $121 = $120 & 15;
    $22 = $121;
    $122 = $23;
    $123 = $122 >> 4;
    $21 = $123;
    $124 = $22;
    $125 = ($124|0)==(0);
    if (!($125)) {
     $130 = $21;
     $131 = $17;
     $132 = (($131) + ($130))|0;
     $17 = $132;
     $133 = $17;
     $134 = (($133) + 1)|0;
     $17 = $134;
     $135 = (48 + ($133)|0);
     $136 = HEAP8[$135>>0]|0;
     $137 = $136&255;
     $19 = $137;
     $138 = $8;
     $139 = $22;
     $140 = (_stbi__extend_receive($138,$139)|0);
     $141 = $14;
     $142 = $19;
     $143 = (($141) + ($142<<1)|0);
     $144 = HEAP16[$143>>1]|0;
     $145 = $144&65535;
     $146 = Math_imul($140, $145)|0;
     $147 = $146&65535;
     $148 = $9;
     $149 = $19;
     $150 = (($148) + ($149<<1)|0);
     HEAP16[$150>>1] = $147;
     break;
    }
    $126 = $23;
    $127 = ($126|0)!=(240);
    if ($127) {
     label = 19;
     break L11;
    }
    $128 = $17;
    $129 = (($128) + 16)|0;
    $17 = $129;
   }
  } while(0);
  $151 = $17;
  $152 = ($151|0)<(64);
  if (!($152)) {
   label = 19;
   break;
  }
 }
 if ((label|0) == 13) {
  $119 = (_stbi__err(5457)|0);
  $7 = $119;
  $153 = $7;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 19) {
  $7 = 1;
  $153 = $7;
  STACKTOP = sp;return ($153|0);
 }
 return (0)|0;
}
function _stbi__grow_buffer_unsafe($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $4 = $1;
  $5 = ((($4)) + 18376|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0);
  if ($7) {
   $12 = 0;
  } else {
   $8 = $1;
   $9 = HEAP32[$8>>2]|0;
   $10 = (_stbi__get8($9)|0);
   $11 = $10&255;
   $12 = $11;
  }
  $2 = $12;
  $13 = $2;
  $14 = ($13|0)==(255);
  if ($14) {
   $15 = $1;
   $16 = HEAP32[$15>>2]|0;
   $17 = (_stbi__get8($16)|0);
   $18 = $17&255;
   $3 = $18;
   while(1) {
    $19 = $3;
    $20 = ($19|0)==(255);
    if (!($20)) {
     break;
    }
    $21 = $1;
    $22 = HEAP32[$21>>2]|0;
    $23 = (_stbi__get8($22)|0);
    $24 = $23&255;
    $3 = $24;
   }
   $25 = $3;
   $26 = ($25|0)!=(0);
   if ($26) {
    break;
   }
  }
  $33 = $2;
  $34 = $1;
  $35 = ((($34)) + 18368|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (24 - ($36))|0;
  $38 = $33 << $37;
  $39 = $1;
  $40 = ((($39)) + 18364|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 | $38;
  HEAP32[$40>>2] = $42;
  $43 = $1;
  $44 = ((($43)) + 18368|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 8)|0;
  HEAP32[$44>>2] = $46;
  $47 = $1;
  $48 = ((($47)) + 18368|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)<=(24);
  if (!($50)) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
 $27 = $3;
 $28 = $27&255;
 $29 = $1;
 $30 = ((($29)) + 18372|0);
 HEAP8[$30>>0] = $28;
 $31 = $1;
 $32 = ((($31)) + 18376|0);
 HEAP32[$32>>2] = 1;
 STACKTOP = sp;return;
}
function _stbi__jpeg_decode_block_prog_dc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $5;
 $13 = ((($12)) + 18388|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = (_stbi__err(5663)|0);
  $4 = $16;
  $71 = $4;
  STACKTOP = sp;return ($71|0);
 }
 $17 = $5;
 $18 = ((($17)) + 18368|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)<(16);
 if ($20) {
  $21 = $5;
  _stbi__grow_buffer_unsafe($21);
 }
 $22 = $5;
 $23 = ((($22)) + 18392|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = $6;
  dest=$26; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
  $27 = $5;
  $28 = $7;
  $29 = (_stbi__jpeg_huff_decode($27,$28)|0);
  $11 = $29;
  $30 = $11;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = $5;
   $33 = $11;
   $34 = (_stbi__extend_receive($32,$33)|0);
   $35 = $34;
  } else {
   $35 = 0;
  }
  $9 = $35;
  $36 = $5;
  $37 = ((($36)) + 18076|0);
  $38 = $8;
  $39 = (($37) + (($38*72)|0)|0);
  $40 = ((($39)) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $9;
  $43 = (($41) + ($42))|0;
  $10 = $43;
  $44 = $10;
  $45 = $5;
  $46 = ((($45)) + 18076|0);
  $47 = $8;
  $48 = (($46) + (($47*72)|0)|0);
  $49 = ((($48)) + 24|0);
  HEAP32[$49>>2] = $44;
  $50 = $10;
  $51 = $5;
  $52 = ((($51)) + 18396|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $50 << $53;
  $55 = $54&65535;
  $56 = $6;
  HEAP16[$56>>1] = $55;
 } else {
  $57 = $5;
  $58 = (_stbi__jpeg_get_bit($57)|0);
  $59 = ($58|0)!=(0);
  if ($59) {
   $60 = $5;
   $61 = ((($60)) + 18396|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = 1 << $62;
   $64 = $63&65535;
   $65 = $64 << 16 >> 16;
   $66 = $6;
   $67 = HEAP16[$66>>1]|0;
   $68 = $67 << 16 >> 16;
   $69 = (($68) + ($65))|0;
   $70 = $69&65535;
   HEAP16[$66>>1] = $70;
  }
 }
 $4 = 1;
 $71 = $4;
 STACKTOP = sp;return ($71|0);
}
function _stbi__jpeg_decode_block_prog_ac($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = $5;
 $23 = ((($22)) + 18384|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = (_stbi__err(5663)|0);
  $4 = $26;
  $288 = $4;
  STACKTOP = sp;return ($288|0);
 }
 $27 = $5;
 $28 = ((($27)) + 18392|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 $31 = $5;
 $32 = ((($31)) + 18396|0);
 $33 = HEAP32[$32>>2]|0;
 L5: do {
  if ($30) {
   $10 = $33;
   $34 = $5;
   $35 = ((($34)) + 18400|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(0);
   $38 = $5;
   if ($37) {
    $39 = ((($38)) + 18400|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$39>>2] = $41;
    $4 = 1;
    $288 = $4;
    STACKTOP = sp;return ($288|0);
   }
   $42 = ((($38)) + 18384|0);
   $43 = HEAP32[$42>>2]|0;
   $9 = $43;
   L11: while(1) {
    $44 = $5;
    $45 = ((($44)) + 18368|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)<(16);
    if ($47) {
     $48 = $5;
     _stbi__grow_buffer_unsafe($48);
    }
    $49 = $5;
    $50 = ((($49)) + 18364|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $51 >>> 23;
    $53 = $52 & 511;
    $12 = $53;
    $54 = $8;
    $55 = $12;
    $56 = (($54) + ($55<<1)|0);
    $57 = HEAP16[$56>>1]|0;
    $58 = $57 << 16 >> 16;
    $13 = $58;
    $59 = $13;
    $60 = ($59|0)!=(0);
    do {
     if ($60) {
      $61 = $13;
      $62 = $61 >> 4;
      $63 = $62 & 15;
      $64 = $9;
      $65 = (($64) + ($63))|0;
      $9 = $65;
      $66 = $13;
      $67 = $66 & 15;
      $14 = $67;
      $68 = $14;
      $69 = $5;
      $70 = ((($69)) + 18364|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = $71 << $68;
      HEAP32[$70>>2] = $72;
      $73 = $14;
      $74 = $5;
      $75 = ((($74)) + 18368|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (($76) - ($73))|0;
      HEAP32[$75>>2] = $77;
      $78 = $9;
      $79 = (($78) + 1)|0;
      $9 = $79;
      $80 = (48 + ($78)|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = $81&255;
      $11 = $82;
      $83 = $13;
      $84 = $83 >> 8;
      $85 = $10;
      $86 = $84 << $85;
      $87 = $86&65535;
      $88 = $6;
      $89 = $11;
      $90 = (($88) + ($89<<1)|0);
      HEAP16[$90>>1] = $87;
     } else {
      $91 = $5;
      $92 = $7;
      $93 = (_stbi__jpeg_huff_decode($91,$92)|0);
      $15 = $93;
      $94 = $15;
      $95 = ($94|0)<(0);
      if ($95) {
       label = 12;
       break L11;
      }
      $97 = $15;
      $98 = $97 & 15;
      $14 = $98;
      $99 = $15;
      $100 = $99 >> 4;
      $13 = $100;
      $101 = $14;
      $102 = ($101|0)==(0);
      $103 = $13;
      if (!($102)) {
       $124 = $9;
       $125 = (($124) + ($103))|0;
       $9 = $125;
       $126 = $9;
       $127 = (($126) + 1)|0;
       $9 = $127;
       $128 = (48 + ($126)|0);
       $129 = HEAP8[$128>>0]|0;
       $130 = $129&255;
       $11 = $130;
       $131 = $5;
       $132 = $14;
       $133 = (_stbi__extend_receive($131,$132)|0);
       $134 = $10;
       $135 = $133 << $134;
       $136 = $135&65535;
       $137 = $6;
       $138 = $11;
       $139 = (($137) + ($138<<1)|0);
       HEAP16[$139>>1] = $136;
       break;
      }
      $104 = ($103|0)<(15);
      if ($104) {
       break L11;
      }
      $122 = $9;
      $123 = (($122) + 16)|0;
      $9 = $123;
     }
    } while(0);
    $140 = $9;
    $141 = $5;
    $142 = ((($141)) + 18388|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($140|0)<=($143|0);
    if (!($144)) {
     break L5;
    }
   }
   if ((label|0) == 12) {
    $96 = (_stbi__err(5457)|0);
    $4 = $96;
    $288 = $4;
    STACKTOP = sp;return ($288|0);
   }
   $105 = $13;
   $106 = 1 << $105;
   $107 = $5;
   $108 = ((($107)) + 18400|0);
   HEAP32[$108>>2] = $106;
   $109 = $13;
   $110 = ($109|0)!=(0);
   if ($110) {
    $111 = $5;
    $112 = $13;
    $113 = (_stbi__jpeg_get_bits($111,$112)|0);
    $114 = $5;
    $115 = ((($114)) + 18400|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (($116) + ($113))|0;
    HEAP32[$115>>2] = $117;
   }
   $118 = $5;
   $119 = ((($118)) + 18400|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($120) + -1)|0;
   HEAP32[$119>>2] = $121;
  } else {
   $145 = 1 << $33;
   $146 = $145&65535;
   $16 = $146;
   $147 = $5;
   $148 = ((($147)) + 18400|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = ($149|0)!=(0);
   $151 = $5;
   if ($150) {
    $152 = ((($151)) + 18400|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (($153) + -1)|0;
    HEAP32[$152>>2] = $154;
    $155 = $5;
    $156 = ((($155)) + 18384|0);
    $157 = HEAP32[$156>>2]|0;
    $9 = $157;
    while(1) {
     $158 = $9;
     $159 = $5;
     $160 = ((($159)) + 18388|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($158|0)<=($161|0);
     if (!($162)) {
      break L5;
     }
     $163 = $6;
     $164 = $9;
     $165 = (48 + ($164)|0);
     $166 = HEAP8[$165>>0]|0;
     $167 = $166&255;
     $168 = (($163) + ($167<<1)|0);
     $17 = $168;
     $169 = $17;
     $170 = HEAP16[$169>>1]|0;
     $171 = $170 << 16 >> 16;
     $172 = ($171|0)!=(0);
     do {
      if ($172) {
       $173 = $5;
       $174 = (_stbi__jpeg_get_bit($173)|0);
       $175 = ($174|0)!=(0);
       if ($175) {
        $176 = $17;
        $177 = HEAP16[$176>>1]|0;
        $178 = $177 << 16 >> 16;
        $179 = $16;
        $180 = $179 << 16 >> 16;
        $181 = $178 & $180;
        $182 = ($181|0)==(0);
        if ($182) {
         $183 = $17;
         $184 = HEAP16[$183>>1]|0;
         $185 = $184 << 16 >> 16;
         $186 = ($185|0)>(0);
         $187 = $16;
         $188 = $187 << 16 >> 16;
         $189 = $17;
         $190 = HEAP16[$189>>1]|0;
         $191 = $190 << 16 >> 16;
         if ($186) {
          $192 = (($191) + ($188))|0;
          $193 = $192&65535;
          HEAP16[$189>>1] = $193;
          break;
         } else {
          $194 = (($191) - ($188))|0;
          $195 = $194&65535;
          HEAP16[$189>>1] = $195;
          break;
         }
        }
       }
      }
     } while(0);
     $196 = $9;
     $197 = (($196) + 1)|0;
     $9 = $197;
    }
   }
   $198 = ((($151)) + 18384|0);
   $199 = HEAP32[$198>>2]|0;
   $9 = $199;
   L47: while(1) {
    $200 = $5;
    $201 = $7;
    $202 = (_stbi__jpeg_huff_decode($200,$201)|0);
    $20 = $202;
    $203 = $20;
    $204 = ($203|0)<(0);
    if ($204) {
     label = 33;
     break;
    }
    $206 = $20;
    $207 = $206 & 15;
    $19 = $207;
    $208 = $20;
    $209 = $208 >> 4;
    $18 = $209;
    $210 = $19;
    $211 = ($210|0)==(0);
    do {
     if ($211) {
      $212 = $18;
      $213 = ($212|0)<(15);
      if ($213) {
       $214 = $18;
       $215 = 1 << $214;
       $216 = (($215) - 1)|0;
       $217 = $5;
       $218 = ((($217)) + 18400|0);
       HEAP32[$218>>2] = $216;
       $219 = $18;
       $220 = ($219|0)!=(0);
       if ($220) {
        $221 = $5;
        $222 = $18;
        $223 = (_stbi__jpeg_get_bits($221,$222)|0);
        $224 = $5;
        $225 = ((($224)) + 18400|0);
        $226 = HEAP32[$225>>2]|0;
        $227 = (($226) + ($223))|0;
        HEAP32[$225>>2] = $227;
       }
       $18 = 64;
      }
     } else {
      $228 = $19;
      $229 = ($228|0)!=(1);
      if ($229) {
       label = 40;
       break L47;
      }
      $231 = $5;
      $232 = (_stbi__jpeg_get_bit($231)|0);
      $233 = ($232|0)!=(0);
      $234 = $16;
      $235 = $234 << 16 >> 16;
      if ($233) {
       $19 = $235;
       break;
      } else {
       $236 = (0 - ($235))|0;
       $19 = $236;
       break;
      }
     }
    } while(0);
    L62: while(1) {
     $237 = $9;
     $238 = $5;
     $239 = ((($238)) + 18388|0);
     $240 = HEAP32[$239>>2]|0;
     $241 = ($237|0)<=($240|0);
     if (!($241)) {
      break;
     }
     $242 = $6;
     $243 = $9;
     $244 = (($243) + 1)|0;
     $9 = $244;
     $245 = (48 + ($243)|0);
     $246 = HEAP8[$245>>0]|0;
     $247 = $246&255;
     $248 = (($242) + ($247<<1)|0);
     $21 = $248;
     $249 = $21;
     $250 = HEAP16[$249>>1]|0;
     $251 = $250 << 16 >> 16;
     $252 = ($251|0)!=(0);
     do {
      if ($252) {
       $253 = $5;
       $254 = (_stbi__jpeg_get_bit($253)|0);
       $255 = ($254|0)!=(0);
       if ($255) {
        $256 = $21;
        $257 = HEAP16[$256>>1]|0;
        $258 = $257 << 16 >> 16;
        $259 = $16;
        $260 = $259 << 16 >> 16;
        $261 = $258 & $260;
        $262 = ($261|0)==(0);
        if ($262) {
         $263 = $21;
         $264 = HEAP16[$263>>1]|0;
         $265 = $264 << 16 >> 16;
         $266 = ($265|0)>(0);
         $267 = $16;
         $268 = $267 << 16 >> 16;
         $269 = $21;
         $270 = HEAP16[$269>>1]|0;
         $271 = $270 << 16 >> 16;
         if ($266) {
          $272 = (($271) + ($268))|0;
          $273 = $272&65535;
          HEAP16[$269>>1] = $273;
          break;
         } else {
          $274 = (($271) - ($268))|0;
          $275 = $274&65535;
          HEAP16[$269>>1] = $275;
          break;
         }
        }
       }
      } else {
       $276 = $18;
       $277 = ($276|0)==(0);
       if ($277) {
        label = 53;
        break L62;
       }
       $281 = $18;
       $282 = (($281) + -1)|0;
       $18 = $282;
      }
     } while(0);
    }
    if ((label|0) == 53) {
     label = 0;
     $278 = $19;
     $279 = $278&65535;
     $280 = $21;
     HEAP16[$280>>1] = $279;
    }
    $283 = $9;
    $284 = $5;
    $285 = ((($284)) + 18388|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = ($283|0)<=($286|0);
    if (!($287)) {
     break L5;
    }
   }
   if ((label|0) == 33) {
    $205 = (_stbi__err(5457)|0);
    $4 = $205;
    $288 = $4;
    STACKTOP = sp;return ($288|0);
   }
   else if ((label|0) == 40) {
    $230 = (_stbi__err(5457)|0);
    $4 = $230;
    $288 = $4;
    STACKTOP = sp;return ($288|0);
   }
  }
 } while(0);
 $4 = 1;
 $288 = $4;
 STACKTOP = sp;return ($288|0);
}
function _stbi__jpeg_huff_decode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = ((($9)) + 18368|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<(16);
 if ($12) {
  $13 = $3;
  _stbi__grow_buffer_unsafe($13);
 }
 $14 = $3;
 $15 = ((($14)) + 18364|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 >>> 23;
 $18 = $17 & 511;
 $6 = $18;
 $19 = $4;
 $20 = $6;
 $21 = (($19) + ($20)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $7 = $23;
 $24 = $7;
 $25 = ($24|0)<(255);
 if ($25) {
  $26 = $4;
  $27 = ((($26)) + 1280|0);
  $28 = $7;
  $29 = (($27) + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $8 = $31;
  $32 = $8;
  $33 = $3;
  $34 = ((($33)) + 18368|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($32|0)>($35|0);
  if ($36) {
   $2 = -1;
   $135 = $2;
   STACKTOP = sp;return ($135|0);
  } else {
   $37 = $8;
   $38 = $3;
   $39 = ((($38)) + 18364|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 << $37;
   HEAP32[$39>>2] = $41;
   $42 = $8;
   $43 = $3;
   $44 = ((($43)) + 18368|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) - ($42))|0;
   HEAP32[$44>>2] = $46;
   $47 = $4;
   $48 = ((($47)) + 1024|0);
   $49 = $7;
   $50 = (($48) + ($49)|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $2 = $52;
   $135 = $2;
   STACKTOP = sp;return ($135|0);
  }
 }
 $53 = $3;
 $54 = ((($53)) + 18364|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55 >>> 16;
 $5 = $56;
 $7 = 10;
 while(1) {
  $57 = $5;
  $58 = $4;
  $59 = ((($58)) + 1540|0);
  $60 = $7;
  $61 = (($59) + ($60<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($57>>>0)<($62>>>0);
  $64 = $7;
  if ($63) {
   break;
  }
  $65 = (($64) + 1)|0;
  $7 = $65;
 }
 $66 = ($64|0)==(17);
 if ($66) {
  $67 = $3;
  $68 = ((($67)) + 18368|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) - 16)|0;
  HEAP32[$68>>2] = $70;
  $2 = -1;
  $135 = $2;
  STACKTOP = sp;return ($135|0);
 }
 $71 = $7;
 $72 = $3;
 $73 = ((($72)) + 18368|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($71|0)>($74|0);
 if ($75) {
  $2 = -1;
  $135 = $2;
  STACKTOP = sp;return ($135|0);
 }
 $76 = $3;
 $77 = ((($76)) + 18364|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $7;
 $80 = (32 - ($79))|0;
 $81 = $78 >>> $80;
 $82 = $7;
 $83 = (128 + ($82<<2)|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $81 & $84;
 $86 = $4;
 $87 = ((($86)) + 1612|0);
 $88 = $7;
 $89 = (($87) + ($88<<2)|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($85) + ($90))|0;
 $6 = $91;
 $92 = $3;
 $93 = ((($92)) + 18364|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $4;
 $96 = ((($95)) + 1280|0);
 $97 = $6;
 $98 = (($96) + ($97)|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = $99&255;
 $101 = (32 - ($100))|0;
 $102 = $94 >>> $101;
 $103 = $4;
 $104 = ((($103)) + 1280|0);
 $105 = $6;
 $106 = (($104) + ($105)|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&255;
 $109 = (128 + ($108<<2)|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $102 & $110;
 $112 = $4;
 $113 = ((($112)) + 512|0);
 $114 = $6;
 $115 = (($113) + ($114<<1)|0);
 $116 = HEAP16[$115>>1]|0;
 $117 = $116&65535;
 $118 = ($111|0)==($117|0);
 if (!($118)) {
  ___assert_fail((5474|0),(4971|0),1886,(5556|0));
  // unreachable;
 }
 $119 = $7;
 $120 = $3;
 $121 = ((($120)) + 18368|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($122) - ($119))|0;
 HEAP32[$121>>2] = $123;
 $124 = $7;
 $125 = $3;
 $126 = ((($125)) + 18364|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = $127 << $124;
 HEAP32[$126>>2] = $128;
 $129 = $4;
 $130 = ((($129)) + 1024|0);
 $131 = $6;
 $132 = (($130) + ($131)|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = $133&255;
 $2 = $134;
 $135 = $2;
 STACKTOP = sp;return ($135|0);
}
function _stbi__extend_receive($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 18368|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = ($8|0)<($9|0);
 if ($10) {
  $11 = $2;
  _stbi__grow_buffer_unsafe($11);
 }
 $12 = $2;
 $13 = ((($12)) + 18364|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 >> 31;
 $5 = $15;
 $16 = $2;
 $17 = ((($16)) + 18364|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = $18 << $19;
 $21 = $2;
 $22 = ((($21)) + 18364|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $3;
 $25 = (32 - ($24))|0;
 $26 = $23 >>> $25;
 $27 = $20 | $26;
 $4 = $27;
 $28 = $3;
 $29 = ($28|0)>=(0);
 $30 = $3;
 $31 = ($30|0)<(17);
 $or$cond = $29 & $31;
 if ($or$cond) {
  $32 = $4;
  $33 = $3;
  $34 = (128 + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 ^ -1;
  $37 = $32 & $36;
  $38 = $2;
  $39 = ((($38)) + 18364|0);
  HEAP32[$39>>2] = $37;
  $40 = $3;
  $41 = (128 + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $4;
  $44 = $43 & $42;
  $4 = $44;
  $45 = $3;
  $46 = $2;
  $47 = ((($46)) + 18368|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) - ($45))|0;
  HEAP32[$47>>2] = $49;
  $50 = $4;
  $51 = $3;
  $52 = (208 + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $5;
  $55 = $54 ^ -1;
  $56 = $53 & $55;
  $57 = (($50) + ($56))|0;
  STACKTOP = sp;return ($57|0);
 } else {
  ___assert_fail((5579|0),(4971|0),1907,(5642|0));
  // unreachable;
 }
 return (0)|0;
}
function _stbi__jpeg_get_bit($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 18368|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(1);
 if ($6) {
  $7 = $1;
  _stbi__grow_buffer_unsafe($7);
 }
 $8 = $1;
 $9 = ((($8)) + 18364|0);
 $10 = HEAP32[$9>>2]|0;
 $2 = $10;
 $11 = $1;
 $12 = ((($11)) + 18364|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 1;
 HEAP32[$12>>2] = $14;
 $15 = $1;
 $16 = ((($15)) + 18368|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -1)|0;
 HEAP32[$16>>2] = $18;
 $19 = $2;
 $20 = $19 & -2147483648;
 STACKTOP = sp;return ($20|0);
}
function _stbi__jpeg_get_bits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 18368|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = ($7|0)<($8|0);
 if ($9) {
  $10 = $2;
  _stbi__grow_buffer_unsafe($10);
 }
 $11 = $2;
 $12 = ((($11)) + 18364|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = $13 << $14;
 $16 = $2;
 $17 = ((($16)) + 18364|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = (32 - ($19))|0;
 $21 = $18 >>> $20;
 $22 = $15 | $21;
 $4 = $22;
 $23 = $4;
 $24 = $3;
 $25 = (128 + ($24<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 ^ -1;
 $28 = $23 & $27;
 $29 = $2;
 $30 = ((($29)) + 18364|0);
 HEAP32[$30>>2] = $28;
 $31 = $3;
 $32 = (128 + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $4;
 $35 = $34 & $33;
 $4 = $35;
 $36 = $3;
 $37 = $2;
 $38 = ((($37)) + 18368|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) - ($36))|0;
 HEAP32[$38>>2] = $40;
 $41 = $4;
 STACKTOP = sp;return ($41|0);
}
function _stbi__jpeg_dequantize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = ($5|0)<(64);
  if (!($6)) {
   break;
  }
  $7 = $3;
  $8 = $4;
  $9 = (($7) + ($8<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = $2;
  $13 = $4;
  $14 = (($12) + ($13<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = Math_imul($16, $11)|0;
  $18 = $17&65535;
  HEAP16[$14>>1] = $18;
  $19 = $4;
  $20 = (($19) + 1)|0;
  $4 = $20;
 }
 STACKTOP = sp;return;
}
function _stbi__check_png_header($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $4 = $3;
  $5 = ($4|0)<(8);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = $2;
  $7 = (_stbi__get8($6)|0);
  $8 = $7&255;
  $9 = $3;
  $10 = (5685 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($8|0)!=($12|0);
  if ($13) {
   label = 4;
   break;
  }
  $15 = $3;
  $16 = (($15) + 1)|0;
  $3 = $16;
 }
 if ((label|0) == 4) {
  $14 = (_stbi__err(5693)|0);
  $1 = $14;
  $17 = $1;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 6) {
  $1 = 1;
  $17 = $1;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _stbi__do_png($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = 0;
 $14 = $11;
 $15 = ($14|0)<(0);
 $16 = $11;
 $17 = ($16|0)>(4);
 $or$cond = $15 | $17;
 if ($or$cond) {
  $18 = (_stbi__err(5349)|0);
  $19 = ($18|0)!=(0);
  $20 = $19 ? 0 : 0;
  $21 = $20;
  $22 = $21;
  $6 = $22;
  $118 = $6;
  STACKTOP = sp;return ($118|0);
 }
 $23 = $7;
 $24 = $11;
 $25 = (_stbi__parse_png_file($23,0,$24)|0);
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $7;
  $28 = ((($27)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)<(8);
  if ($30) {
   $31 = $12;
   HEAP32[$31>>2] = 8;
  } else {
   $32 = $7;
   $33 = ((($32)) + 16|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $12;
   HEAP32[$35>>2] = $34;
  }
  $36 = $7;
  $37 = ((($36)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $13 = $38;
  $39 = $7;
  $40 = ((($39)) + 12|0);
  HEAP32[$40>>2] = 0;
  $41 = $11;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $11;
   $44 = $7;
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($43|0)!=($47|0);
   if ($48) {
    $49 = $12;
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)==(8);
    $52 = $13;
    if ($51) {
     $53 = $7;
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($54)) + 12|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $11;
     $58 = $7;
     $59 = HEAP32[$58>>2]|0;
     $60 = HEAP32[$59>>2]|0;
     $61 = $7;
     $62 = HEAP32[$61>>2]|0;
     $63 = ((($62)) + 4|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = (_stbi__convert_format($52,$56,$57,$60,$64)|0);
     $13 = $65;
    } else {
     $66 = $7;
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 12|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $11;
     $71 = $7;
     $72 = HEAP32[$71>>2]|0;
     $73 = HEAP32[$72>>2]|0;
     $74 = $7;
     $75 = HEAP32[$74>>2]|0;
     $76 = ((($75)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (_stbi__convert_format16($52,$69,$70,$73,$77)|0);
     $13 = $78;
    }
    $79 = $11;
    $80 = $7;
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($81)) + 12|0);
    HEAP32[$82>>2] = $79;
    $83 = $13;
    $84 = ($83|0)==(0|0);
    if ($84) {
     $85 = $13;
     $6 = $85;
     $118 = $6;
     STACKTOP = sp;return ($118|0);
    }
   }
  }
  $86 = $7;
  $87 = HEAP32[$86>>2]|0;
  $88 = HEAP32[$87>>2]|0;
  $89 = $8;
  HEAP32[$89>>2] = $88;
  $90 = $7;
  $91 = HEAP32[$90>>2]|0;
  $92 = ((($91)) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $9;
  HEAP32[$94>>2] = $93;
  $95 = $10;
  $96 = ($95|0)!=(0|0);
  if ($96) {
   $97 = $7;
   $98 = HEAP32[$97>>2]|0;
   $99 = ((($98)) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $10;
   HEAP32[$101>>2] = $100;
  }
 }
 $102 = $7;
 $103 = ((($102)) + 12|0);
 $104 = HEAP32[$103>>2]|0;
 _free($104);
 $105 = $7;
 $106 = ((($105)) + 12|0);
 HEAP32[$106>>2] = 0;
 $107 = $7;
 $108 = ((($107)) + 8|0);
 $109 = HEAP32[$108>>2]|0;
 _free($109);
 $110 = $7;
 $111 = ((($110)) + 8|0);
 HEAP32[$111>>2] = 0;
 $112 = $7;
 $113 = ((($112)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 _free($114);
 $115 = $7;
 $116 = ((($115)) + 4|0);
 HEAP32[$116>>2] = 0;
 $117 = $13;
 $6 = $117;
 $118 = $6;
 STACKTOP = sp;return ($118|0);
}
function _stbi__parse_png_file($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond3$not = 0, $or$cond5 = 0, $or$cond6 = 0, $switch$split2D = 0, $switch$split322D = 0, $switch$split352D = 0, $switch$split382D = 0, $switch$split412D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1136|0);
 $7 = sp;
 $10 = sp + 1118|0;
 $11 = sp + 1112|0;
 $22 = sp + 1048|0;
 $27 = sp + 1028|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $9 = 0;
 $12 = 0;
 $13 = 0;
 $15 = 0;
 $16 = 1;
 $18 = 0;
 $19 = 0;
 $20 = 0;
 $29 = $4;
 $30 = HEAP32[$29>>2]|0;
 $21 = $30;
 $31 = $4;
 $32 = ((($31)) + 8|0);
 HEAP32[$32>>2] = 0;
 $33 = $4;
 $34 = ((($33)) + 4|0);
 HEAP32[$34>>2] = 0;
 $35 = $4;
 $36 = ((($35)) + 12|0);
 HEAP32[$36>>2] = 0;
 $37 = $21;
 $38 = (_stbi__check_png_header($37)|0);
 $39 = ($38|0)!=(0);
 if (!($39)) {
  $3 = 0;
  $544 = $3;
  STACKTOP = sp;return ($544|0);
 }
 $40 = $5;
 $41 = ($40|0)==(1);
 if ($41) {
  $3 = 1;
  $544 = $3;
  STACKTOP = sp;return ($544|0);
 }
 L9: while(1) {
  $42 = $21;
  _stbi__get_chunk_header($22,$42);
  $43 = ((($22)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $switch$split2D = ($44|0)<(1229472850);
  L11: do {
   if ($switch$split2D) {
    $switch$split322D = ($44|0)<(1229209940);
    if ($switch$split322D) {
     switch ($44|0) {
     case 1130840649:  {
      break;
     }
     default: {
      label = 132;
      break L11;
     }
     }
     $20 = 1;
     $45 = $21;
     $46 = HEAP32[$22>>2]|0;
     _stbi__skip($45,$46);
     break;
    }
    $switch$split382D = ($44|0)<(1229278788);
    if (!($switch$split382D)) {
     switch ($44|0) {
     case 1229278788:  {
      label = 101;
      break L9;
      break;
     }
     default: {
      label = 132;
      break L11;
     }
     }
    }
    switch ($44|0) {
    case 1229209940:  {
     break;
    }
    default: {
     label = 132;
     break L11;
    }
    }
    $301 = $16;
    $302 = ($301|0)!=(0);
    if ($302) {
     label = 82;
     break L9;
    }
    $304 = $8;
    $305 = $304&255;
    $306 = ($305|0)==(0);
    $307 = $15;
    $308 = ($307|0)!=(0);
    $or$cond = $306 | $308;
    if (!($or$cond)) {
     label = 84;
     break L9;
    }
    $310 = $5;
    $311 = ($310|0)==(2);
    if ($311) {
     label = 86;
     break L9;
    }
    $316 = $12;
    $317 = HEAP32[$22>>2]|0;
    $318 = (($316) + ($317))|0;
    $319 = $12;
    $320 = ($318|0)<($319|0);
    if ($320) {
     label = 88;
     break L9;
    }
    $321 = $12;
    $322 = HEAP32[$22>>2]|0;
    $323 = (($321) + ($322))|0;
    $324 = $13;
    $325 = ($323>>>0)>($324>>>0);
    if ($325) {
     $326 = $13;
     $25 = $326;
     $327 = $13;
     $328 = ($327|0)==(0);
     if ($328) {
      $329 = HEAP32[$22>>2]|0;
      $330 = ($329>>>0)>(4096);
      $331 = HEAP32[$22>>2]|0;
      $332 = $330 ? $331 : 4096;
      $13 = $332;
     }
     while(1) {
      $333 = $12;
      $334 = HEAP32[$22>>2]|0;
      $335 = (($333) + ($334))|0;
      $336 = $13;
      $337 = ($335>>>0)>($336>>>0);
      if (!($337)) {
       break;
      }
      $338 = $13;
      $339 = $338<<1;
      $13 = $339;
     }
     $340 = $4;
     $341 = ((($340)) + 4|0);
     $342 = HEAP32[$341>>2]|0;
     $343 = $13;
     $344 = (_realloc($342,$343)|0);
     $26 = $344;
     $345 = $26;
     $346 = ($345|0)==(0|0);
     if ($346) {
      label = 96;
      break L9;
     }
     $348 = $26;
     $349 = $4;
     $350 = ((($349)) + 4|0);
     HEAP32[$350>>2] = $348;
    }
    $351 = $21;
    $352 = $4;
    $353 = ((($352)) + 4|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = $12;
    $356 = (($354) + ($355)|0);
    $357 = HEAP32[$22>>2]|0;
    $358 = (_stbi__getn($351,$356,$357)|0);
    $359 = ($358|0)!=(0);
    if (!($359)) {
     label = 99;
     break L9;
    }
    $361 = HEAP32[$22>>2]|0;
    $362 = $12;
    $363 = (($362) + ($361))|0;
    $12 = $363;
   } else {
    $switch$split352D = ($44|0)<(1347179589);
    if ($switch$split352D) {
     switch ($44|0) {
     case 1229472850:  {
      break;
     }
     default: {
      label = 132;
      break L11;
     }
     }
     $47 = $16;
     $48 = ($47|0)!=(0);
     if (!($48)) {
      label = 9;
      break L9;
     }
     $16 = 0;
     $50 = HEAP32[$22>>2]|0;
     $51 = ($50|0)!=(13);
     if ($51) {
      label = 11;
      break L9;
     }
     $53 = $21;
     $54 = (_stbi__get32be($53)|0);
     $55 = $21;
     HEAP32[$55>>2] = $54;
     $56 = $21;
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57>>>0)>(16777216);
     if ($58) {
      label = 13;
      break L9;
     }
     $60 = $21;
     $61 = (_stbi__get32be($60)|0);
     $62 = $21;
     $63 = ((($62)) + 4|0);
     HEAP32[$63>>2] = $61;
     $64 = $21;
     $65 = ((($64)) + 4|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66>>>0)>(16777216);
     if ($67) {
      label = 15;
      break L9;
     }
     $69 = $21;
     $70 = (_stbi__get8($69)|0);
     $71 = $70&255;
     $72 = $4;
     $73 = ((($72)) + 16|0);
     HEAP32[$73>>2] = $71;
     $74 = $4;
     $75 = ((($74)) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)!=(1);
     if ($77) {
      $78 = $4;
      $79 = ((($78)) + 16|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($80|0)!=(2);
      if ($81) {
       $82 = $4;
       $83 = ((($82)) + 16|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($84|0)!=(4);
       if ($85) {
        $86 = $4;
        $87 = ((($86)) + 16|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = ($88|0)!=(8);
        if ($89) {
         $90 = $4;
         $91 = ((($90)) + 16|0);
         $92 = HEAP32[$91>>2]|0;
         $93 = ($92|0)!=(16);
         if ($93) {
          label = 21;
          break L9;
         }
        }
       }
      }
     }
     $95 = $21;
     $96 = (_stbi__get8($95)|0);
     $97 = $96&255;
     $19 = $97;
     $98 = $19;
     $99 = ($98|0)>(6);
     if ($99) {
      label = 23;
      break L9;
     }
     $101 = $19;
     $102 = ($101|0)==(3);
     if ($102) {
      $103 = $4;
      $104 = ((($103)) + 16|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ($105|0)==(16);
      if ($106) {
       label = 26;
       break L9;
      }
     }
     $108 = $19;
     $109 = ($108|0)==(3);
     if ($109) {
      $8 = 3;
     } else {
      $110 = $19;
      $111 = $110 & 1;
      $112 = ($111|0)!=(0);
      if ($112) {
       label = 30;
       break L9;
      }
     }
     $114 = $21;
     $115 = (_stbi__get8($114)|0);
     $116 = $115&255;
     $23 = $116;
     $117 = $23;
     $118 = ($117|0)!=(0);
     if ($118) {
      label = 32;
      break L9;
     }
     $120 = $21;
     $121 = (_stbi__get8($120)|0);
     $122 = $121&255;
     $24 = $122;
     $123 = $24;
     $124 = ($123|0)!=(0);
     if ($124) {
      label = 34;
      break L9;
     }
     $126 = $21;
     $127 = (_stbi__get8($126)|0);
     $128 = $127&255;
     $18 = $128;
     $129 = $18;
     $130 = ($129|0)>(1);
     if ($130) {
      label = 36;
      break L9;
     }
     $132 = $21;
     $133 = HEAP32[$132>>2]|0;
     $134 = ($133|0)!=(0);
     if (!($134)) {
      label = 39;
      break L9;
     }
     $135 = $21;
     $136 = ((($135)) + 4|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)!=(0);
     if (!($138)) {
      label = 39;
      break L9;
     }
     $140 = $8;
     $141 = ($140<<24>>24)!=(0);
     if ($141) {
      $167 = $21;
      $168 = ((($167)) + 8|0);
      HEAP32[$168>>2] = 1;
      $169 = $21;
      $170 = HEAP32[$169>>2]|0;
      $171 = (1073741824 / ($170>>>0))&-1;
      $172 = (($171>>>0) / 4)&-1;
      $173 = $21;
      $174 = ((($173)) + 4|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($172>>>0)<($175>>>0);
      if ($176) {
       label = 46;
       break L9;
      } else {
       break;
      }
     }
     $142 = $19;
     $143 = $142 & 2;
     $144 = ($143|0)!=(0);
     $145 = $144 ? 3 : 1;
     $146 = $19;
     $147 = $146 & 4;
     $148 = ($147|0)!=(0);
     $149 = $148 ? 1 : 0;
     $150 = (($145) + ($149))|0;
     $151 = $21;
     $152 = ((($151)) + 8|0);
     HEAP32[$152>>2] = $150;
     $153 = $21;
     $154 = HEAP32[$153>>2]|0;
     $155 = (1073741824 / ($154>>>0))&-1;
     $156 = $21;
     $157 = ((($156)) + 8|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = (($155>>>0) / ($158>>>0))&-1;
     $160 = $21;
     $161 = ((($160)) + 4|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ($159>>>0)<($162>>>0);
     if ($163) {
      label = 42;
      break L9;
     }
     $165 = $5;
     $166 = ($165|0)==(2);
     if ($166) {
      label = 44;
      break L9;
     } else {
      break;
     }
    }
    $switch$split412D = ($44|0)<(1951551059);
    if ($switch$split412D) {
     switch ($44|0) {
     case 1347179589:  {
      break;
     }
     default: {
      label = 132;
      break L11;
     }
     }
     $178 = $16;
     $179 = ($178|0)!=(0);
     if ($179) {
      label = 48;
      break L9;
     }
     $181 = HEAP32[$22>>2]|0;
     $182 = ($181>>>0)>(768);
     if ($182) {
      label = 50;
      break L9;
     }
     $184 = HEAP32[$22>>2]|0;
     $185 = (($184>>>0) / 3)&-1;
     $15 = $185;
     $186 = $15;
     $187 = ($186*3)|0;
     $188 = HEAP32[$22>>2]|0;
     $189 = ($187|0)!=($188|0);
     if ($189) {
      label = 52;
      break L9;
     }
     $14 = 0;
     while(1) {
      $191 = $14;
      $192 = $15;
      $193 = ($191>>>0)<($192>>>0);
      if (!($193)) {
       break L11;
      }
      $194 = $21;
      $195 = (_stbi__get8($194)|0);
      $196 = $14;
      $197 = $196<<2;
      $198 = (($197) + 0)|0;
      $199 = (($7) + ($198)|0);
      HEAP8[$199>>0] = $195;
      $200 = $21;
      $201 = (_stbi__get8($200)|0);
      $202 = $14;
      $203 = $202<<2;
      $204 = (($203) + 1)|0;
      $205 = (($7) + ($204)|0);
      HEAP8[$205>>0] = $201;
      $206 = $21;
      $207 = (_stbi__get8($206)|0);
      $208 = $14;
      $209 = $208<<2;
      $210 = (($209) + 2)|0;
      $211 = (($7) + ($210)|0);
      HEAP8[$211>>0] = $207;
      $212 = $14;
      $213 = $212<<2;
      $214 = (($213) + 3)|0;
      $215 = (($7) + ($214)|0);
      HEAP8[$215>>0] = -1;
      $216 = $14;
      $217 = (($216) + 1)|0;
      $14 = $217;
     }
    }
    switch ($44|0) {
    case 1951551059:  {
     break;
    }
    default: {
     label = 132;
     break L11;
    }
    }
    $218 = $16;
    $219 = ($218|0)!=(0);
    if ($219) {
     label = 57;
     break L9;
    }
    $221 = $4;
    $222 = ((($221)) + 4|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = ($223|0)!=(0|0);
    if ($224) {
     label = 59;
     break L9;
    }
    $226 = $8;
    $227 = ($226<<24>>24)!=(0);
    if ($227) {
     $228 = $5;
     $229 = ($228|0)==(2);
     if ($229) {
      label = 62;
      break L9;
     }
     $232 = $15;
     $233 = ($232|0)==(0);
     if ($233) {
      label = 64;
      break L9;
     }
     $235 = HEAP32[$22>>2]|0;
     $236 = $15;
     $237 = ($235>>>0)>($236>>>0);
     if ($237) {
      label = 66;
      break L9;
     }
     $8 = 4;
     $14 = 0;
     while(1) {
      $239 = $14;
      $240 = HEAP32[$22>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if (!($241)) {
       break L11;
      }
      $242 = $21;
      $243 = (_stbi__get8($242)|0);
      $244 = $14;
      $245 = $244<<2;
      $246 = (($245) + 3)|0;
      $247 = (($7) + ($246)|0);
      HEAP8[$247>>0] = $243;
      $248 = $14;
      $249 = (($248) + 1)|0;
      $14 = $249;
     }
    }
    $250 = $21;
    $251 = ((($250)) + 8|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = $252 & 1;
    $254 = ($253|0)!=(0);
    if (!($254)) {
     label = 71;
     break L9;
    }
    $256 = HEAP32[$22>>2]|0;
    $257 = $21;
    $258 = ((($257)) + 8|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = $259<<1;
    $261 = ($256|0)!=($260|0);
    if ($261) {
     label = 73;
     break L9;
    }
    $9 = 1;
    $263 = $4;
    $264 = ((($263)) + 16|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = ($265|0)==(16);
    $17 = 0;
    if ($266) {
     while(1) {
      $267 = $17;
      $268 = $21;
      $269 = ((($268)) + 8|0);
      $270 = HEAP32[$269>>2]|0;
      $271 = ($267|0)<($270|0);
      if (!($271)) {
       break L11;
      }
      $272 = $21;
      $273 = (_stbi__get16be($272)|0);
      $274 = $273&65535;
      $275 = $17;
      $276 = (($11) + ($275<<1)|0);
      HEAP16[$276>>1] = $274;
      $277 = $17;
      $278 = (($277) + 1)|0;
      $17 = $278;
     }
    } else {
     while(1) {
      $279 = $17;
      $280 = $21;
      $281 = ((($280)) + 8|0);
      $282 = HEAP32[$281>>2]|0;
      $283 = ($279|0)<($282|0);
      if (!($283)) {
       break L11;
      }
      $284 = $21;
      $285 = (_stbi__get16be($284)|0);
      $286 = $285 & 255;
      $287 = $286&255;
      $288 = $287&255;
      $289 = $4;
      $290 = ((($289)) + 16|0);
      $291 = HEAP32[$290>>2]|0;
      $292 = (5921 + ($291)|0);
      $293 = HEAP8[$292>>0]|0;
      $294 = $293&255;
      $295 = Math_imul($288, $294)|0;
      $296 = $295&255;
      $297 = $17;
      $298 = (($10) + ($297)|0);
      HEAP8[$298>>0] = $296;
      $299 = $17;
      $300 = (($299) + 1)|0;
      $17 = $300;
     }
    }
   }
  } while(0);
  if ((label|0) == 132) {
   label = 0;
   $513 = $16;
   $514 = ($513|0)!=(0);
   if ($514) {
    label = 133;
    break;
   }
   $516 = ((($22)) + 4|0);
   $517 = HEAP32[$516>>2]|0;
   $518 = $517 & 536870912;
   $519 = ($518|0)==(0);
   if ($519) {
    label = 135;
    break;
   }
   $541 = $21;
   $542 = HEAP32[$22>>2]|0;
   _stbi__skip($541,$542);
  }
  $543 = $21;
  (_stbi__get32be($543)|0);
 }
 switch (label|0) {
  case 9: {
   $49 = (_stbi__err(5705)|0);
   $3 = $49;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 11: {
   $52 = (_stbi__err(5719)|0);
   $3 = $52;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 13: {
   $59 = (_stbi__err(5330)|0);
   $3 = $59;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 15: {
   $68 = (_stbi__err(5330)|0);
   $3 = $68;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 21: {
   $94 = (_stbi__err(5732)|0);
   $3 = $94;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 23: {
   $100 = (_stbi__err(5752)|0);
   $3 = $100;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 26: {
   $107 = (_stbi__err(5752)|0);
   $3 = $107;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 30: {
   $113 = (_stbi__err(5752)|0);
   $3 = $113;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 32: {
   $119 = (_stbi__err(5762)|0);
   $3 = $119;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 34: {
   $125 = (_stbi__err(5778)|0);
   $3 = $125;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 36: {
   $131 = (_stbi__err(5796)|0);
   $3 = $131;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 39: {
   $139 = (_stbi__err(5817)|0);
   $3 = $139;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 42: {
   $164 = (_stbi__err(5330)|0);
   $3 = $164;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 44: {
   $3 = 1;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 46: {
   $177 = (_stbi__err(5330)|0);
   $3 = $177;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 48: {
   $180 = (_stbi__err(5831)|0);
   $3 = $180;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 50: {
   $183 = (_stbi__err(5846)|0);
   $3 = $183;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 52: {
   $190 = (_stbi__err(5846)|0);
   $3 = $190;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 57: {
   $220 = (_stbi__err(5831)|0);
   $3 = $220;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 59: {
   $225 = (_stbi__err(5859)|0);
   $3 = $225;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 62: {
   $230 = $21;
   $231 = ((($230)) + 8|0);
   HEAP32[$231>>2] = 4;
   $3 = 1;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 64: {
   $234 = (_stbi__err(5875)|0);
   $3 = $234;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 66: {
   $238 = (_stbi__err(5892)|0);
   $3 = $238;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 71: {
   $255 = (_stbi__err(5905)|0);
   $3 = $255;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 73: {
   $262 = (_stbi__err(5892)|0);
   $3 = $262;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 82: {
   $303 = (_stbi__err(5831)|0);
   $3 = $303;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 84: {
   $309 = (_stbi__err(5930)|0);
   $3 = $309;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 86: {
   $312 = $8;
   $313 = $312&255;
   $314 = $21;
   $315 = ((($314)) + 8|0);
   HEAP32[$315>>2] = $313;
   $3 = 1;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 88: {
   $3 = 0;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 96: {
   $347 = (_stbi__err(5340)|0);
   $3 = $347;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 99: {
   $360 = (_stbi__err(5938)|0);
   $3 = $360;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 101: {
   $364 = $16;
   $365 = ($364|0)!=(0);
   if ($365) {
    $366 = (_stbi__err(5831)|0);
    $3 = $366;
    $544 = $3;
    STACKTOP = sp;return ($544|0);
   }
   $367 = $5;
   $368 = ($367|0)!=(0);
   if ($368) {
    $3 = 1;
    $544 = $3;
    STACKTOP = sp;return ($544|0);
   }
   $369 = $4;
   $370 = ((($369)) + 4|0);
   $371 = HEAP32[$370>>2]|0;
   $372 = ($371|0)==(0|0);
   if ($372) {
    $373 = (_stbi__err(5948)|0);
    $3 = $373;
    $544 = $3;
    STACKTOP = sp;return ($544|0);
   }
   $374 = $21;
   $375 = HEAP32[$374>>2]|0;
   $376 = $4;
   $377 = ((($376)) + 16|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = Math_imul($375, $378)|0;
   $380 = (($379) + 7)|0;
   $381 = (($380>>>0) / 8)&-1;
   $28 = $381;
   $382 = $28;
   $383 = $21;
   $384 = ((($383)) + 4|0);
   $385 = HEAP32[$384>>2]|0;
   $386 = Math_imul($382, $385)|0;
   $387 = $21;
   $388 = ((($387)) + 8|0);
   $389 = HEAP32[$388>>2]|0;
   $390 = Math_imul($386, $389)|0;
   $391 = $21;
   $392 = ((($391)) + 4|0);
   $393 = HEAP32[$392>>2]|0;
   $394 = (($390) + ($393))|0;
   HEAP32[$27>>2] = $394;
   $395 = $4;
   $396 = ((($395)) + 4|0);
   $397 = HEAP32[$396>>2]|0;
   $398 = $12;
   $399 = HEAP32[$27>>2]|0;
   $400 = $20;
   $401 = ($400|0)!=(0);
   $402 = $401 ^ 1;
   $403 = $402&1;
   $404 = (_stbi_zlib_decode_malloc_guesssize_headerflag($397,$398,$399,$27,$403)|0);
   $405 = $4;
   $406 = ((($405)) + 8|0);
   HEAP32[$406>>2] = $404;
   $407 = $4;
   $408 = ((($407)) + 8|0);
   $409 = HEAP32[$408>>2]|0;
   $410 = ($409|0)==(0|0);
   if ($410) {
    $3 = 0;
    $544 = $3;
    STACKTOP = sp;return ($544|0);
   }
   $411 = $4;
   $412 = ((($411)) + 4|0);
   $413 = HEAP32[$412>>2]|0;
   _free($413);
   $414 = $4;
   $415 = ((($414)) + 4|0);
   HEAP32[$415>>2] = 0;
   $416 = $6;
   $417 = $21;
   $418 = ((($417)) + 8|0);
   $419 = HEAP32[$418>>2]|0;
   $420 = (($419) + 1)|0;
   $421 = ($416|0)==($420|0);
   $422 = $6;
   $423 = ($422|0)!=(3);
   $or$cond3 = $421 & $423;
   $or$cond3$not = $or$cond3 ^ 1;
   $424 = $8;
   $425 = ($424<<24>>24)!=(0);
   $or$cond5 = $or$cond3$not | $425;
   if ($or$cond5) {
    $426 = $9;
    $427 = $426&255;
    $428 = ($427|0)!=(0);
    if ($428) {
     label = 111;
    } else {
     $435 = $21;
     $436 = ((($435)) + 8|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = $21;
     $439 = ((($438)) + 12|0);
     HEAP32[$439>>2] = $437;
    }
   } else {
    label = 111;
   }
   if ((label|0) == 111) {
    $429 = $21;
    $430 = ((($429)) + 8|0);
    $431 = HEAP32[$430>>2]|0;
    $432 = (($431) + 1)|0;
    $433 = $21;
    $434 = ((($433)) + 12|0);
    HEAP32[$434>>2] = $432;
   }
   $440 = $4;
   $441 = $4;
   $442 = ((($441)) + 8|0);
   $443 = HEAP32[$442>>2]|0;
   $444 = HEAP32[$27>>2]|0;
   $445 = $21;
   $446 = ((($445)) + 12|0);
   $447 = HEAP32[$446>>2]|0;
   $448 = $4;
   $449 = ((($448)) + 16|0);
   $450 = HEAP32[$449>>2]|0;
   $451 = $19;
   $452 = $18;
   $453 = (_stbi__create_png_image($440,$443,$444,$447,$450,$451,$452)|0);
   $454 = ($453|0)!=(0);
   if (!($454)) {
    $3 = 0;
    $544 = $3;
    STACKTOP = sp;return ($544|0);
   }
   $455 = $9;
   $456 = ($455<<24>>24)!=(0);
   do {
    if ($456) {
     $457 = $4;
     $458 = ((($457)) + 16|0);
     $459 = HEAP32[$458>>2]|0;
     $460 = ($459|0)==(16);
     $461 = $4;
     if ($460) {
      $462 = $21;
      $463 = ((($462)) + 12|0);
      $464 = HEAP32[$463>>2]|0;
      $465 = (_stbi__compute_transparency16($461,$11,$464)|0);
      $466 = ($465|0)!=(0);
      if ($466) {
       break;
      }
      $3 = 0;
      $544 = $3;
      STACKTOP = sp;return ($544|0);
     } else {
      $467 = $21;
      $468 = ((($467)) + 12|0);
      $469 = HEAP32[$468>>2]|0;
      $470 = (_stbi__compute_transparency($461,$10,$469)|0);
      $471 = ($470|0)!=(0);
      if ($471) {
       break;
      }
      $3 = 0;
      $544 = $3;
      STACKTOP = sp;return ($544|0);
     }
    }
   } while(0);
   $472 = $20;
   $473 = ($472|0)!=(0);
   $474 = (0)!=(0);
   $or$cond6 = $473 & $474;
   if ($or$cond6) {
    $475 = $21;
    $476 = ((($475)) + 12|0);
    $477 = HEAP32[$476>>2]|0;
    $478 = ($477|0)>(2);
    if ($478) {
     $479 = $4;
     _stbi__de_iphone($479);
    }
   }
   $480 = $8;
   $481 = ($480<<24>>24)!=(0);
   if ($481) {
    $482 = $8;
    $483 = $482&255;
    $484 = $21;
    $485 = ((($484)) + 8|0);
    HEAP32[$485>>2] = $483;
    $486 = $8;
    $487 = $486&255;
    $488 = $21;
    $489 = ((($488)) + 12|0);
    HEAP32[$489>>2] = $487;
    $490 = $6;
    $491 = ($490|0)>=(3);
    if ($491) {
     $492 = $6;
     $493 = $21;
     $494 = ((($493)) + 12|0);
     HEAP32[$494>>2] = $492;
    }
    $495 = $4;
    $496 = $15;
    $497 = $21;
    $498 = ((($497)) + 12|0);
    $499 = HEAP32[$498>>2]|0;
    $500 = (_stbi__expand_png_palette($495,$7,$496,$499)|0);
    $501 = ($500|0)!=(0);
    if (!($501)) {
     $3 = 0;
     $544 = $3;
     STACKTOP = sp;return ($544|0);
    }
   } else {
    $502 = $9;
    $503 = ($502<<24>>24)!=(0);
    if ($503) {
     $504 = $21;
     $505 = ((($504)) + 8|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = (($506) + 1)|0;
     HEAP32[$505>>2] = $507;
    }
   }
   $508 = $4;
   $509 = ((($508)) + 8|0);
   $510 = HEAP32[$509>>2]|0;
   _free($510);
   $511 = $4;
   $512 = ((($511)) + 8|0);
   HEAP32[$512>>2] = 0;
   $3 = 1;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 133: {
   $515 = (_stbi__err(5831)|0);
   $3 = $515;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
  case 135: {
   $520 = ((($22)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 >>> 24;
   $523 = $522 & 255;
   $524 = $523&255;
   HEAP8[272] = $524;
   $525 = ((($22)) + 4|0);
   $526 = HEAP32[$525>>2]|0;
   $527 = $526 >>> 16;
   $528 = $527 & 255;
   $529 = $528&255;
   HEAP8[(273)>>0] = $529;
   $530 = ((($22)) + 4|0);
   $531 = HEAP32[$530>>2]|0;
   $532 = $531 >>> 8;
   $533 = $532 & 255;
   $534 = $533&255;
   HEAP8[(274)>>0] = $534;
   $535 = ((($22)) + 4|0);
   $536 = HEAP32[$535>>2]|0;
   $537 = $536 >>> 0;
   $538 = $537 & 255;
   $539 = $538&255;
   HEAP8[(275)>>0] = $539;
   $540 = (_stbi__err(272)|0);
   $3 = $540;
   $544 = $3;
   STACKTOP = sp;return ($544|0);
   break;
  }
 }
 return (0)|0;
}
function _stbi__convert_format($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $16 = $8;
 $17 = $7;
 $18 = ($16|0)==($17|0);
 if ($18) {
  $19 = $6;
  $5 = $19;
  $310 = $5;
  STACKTOP = sp;return ($310|0);
 }
 $20 = $8;
 $21 = ($20|0)>=(1);
 $22 = $8;
 $23 = ($22|0)<=(4);
 $or$cond = $21 & $23;
 if (!($or$cond)) {
  ___assert_fail((6226|0),(4971|0),1525,(6257|0));
  // unreachable;
 }
 $24 = $8;
 $25 = $9;
 $26 = $10;
 $27 = (_stbi__malloc_mad3($24,$25,$26,0)|0);
 $13 = $27;
 $28 = $13;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $30 = $6;
  _free($30);
  $31 = (_stbi__err(5340)|0);
  $32 = ($31|0)!=(0);
  $33 = $32 ? 0 : 0;
  $34 = $33;
  $35 = $34;
  $5 = $35;
  $310 = $5;
  STACKTOP = sp;return ($310|0);
 }
 $12 = 0;
 L12: while(1) {
  $36 = $12;
  $37 = $10;
  $38 = ($36|0)<($37|0);
  $39 = $6;
  if (!($38)) {
   break;
  }
  $40 = $12;
  $41 = $9;
  $42 = Math_imul($40, $41)|0;
  $43 = $7;
  $44 = Math_imul($42, $43)|0;
  $45 = (($39) + ($44)|0);
  $14 = $45;
  $46 = $13;
  $47 = $12;
  $48 = $9;
  $49 = Math_imul($47, $48)|0;
  $50 = $8;
  $51 = Math_imul($49, $50)|0;
  $52 = (($46) + ($51)|0);
  $15 = $52;
  $53 = $7;
  $54 = $53<<3;
  $55 = $8;
  $56 = (($54) + ($55))|0;
  L15: do {
   switch ($56|0) {
   case 10:  {
    $57 = $9;
    $58 = (($57) - 1)|0;
    $11 = $58;
    while(1) {
     $59 = $11;
     $60 = ($59|0)>=(0);
     if (!($60)) {
      break L15;
     }
     $61 = $14;
     $62 = HEAP8[$61>>0]|0;
     $63 = $15;
     HEAP8[$63>>0] = $62;
     $64 = $15;
     $65 = ((($64)) + 1|0);
     HEAP8[$65>>0] = -1;
     $66 = $11;
     $67 = (($66) + -1)|0;
     $11 = $67;
     $68 = $14;
     $69 = ((($68)) + 1|0);
     $14 = $69;
     $70 = $15;
     $71 = ((($70)) + 2|0);
     $15 = $71;
    }
    break;
   }
   case 11:  {
    $72 = $9;
    $73 = (($72) - 1)|0;
    $11 = $73;
    while(1) {
     $74 = $11;
     $75 = ($74|0)>=(0);
     if (!($75)) {
      break L15;
     }
     $76 = $14;
     $77 = HEAP8[$76>>0]|0;
     $78 = $15;
     $79 = ((($78)) + 2|0);
     HEAP8[$79>>0] = $77;
     $80 = $15;
     $81 = ((($80)) + 1|0);
     HEAP8[$81>>0] = $77;
     $82 = $15;
     HEAP8[$82>>0] = $77;
     $83 = $11;
     $84 = (($83) + -1)|0;
     $11 = $84;
     $85 = $14;
     $86 = ((($85)) + 1|0);
     $14 = $86;
     $87 = $15;
     $88 = ((($87)) + 3|0);
     $15 = $88;
    }
    break;
   }
   case 12:  {
    $89 = $9;
    $90 = (($89) - 1)|0;
    $11 = $90;
    while(1) {
     $91 = $11;
     $92 = ($91|0)>=(0);
     if (!($92)) {
      break L15;
     }
     $93 = $14;
     $94 = HEAP8[$93>>0]|0;
     $95 = $15;
     $96 = ((($95)) + 2|0);
     HEAP8[$96>>0] = $94;
     $97 = $15;
     $98 = ((($97)) + 1|0);
     HEAP8[$98>>0] = $94;
     $99 = $15;
     HEAP8[$99>>0] = $94;
     $100 = $15;
     $101 = ((($100)) + 3|0);
     HEAP8[$101>>0] = -1;
     $102 = $11;
     $103 = (($102) + -1)|0;
     $11 = $103;
     $104 = $14;
     $105 = ((($104)) + 1|0);
     $14 = $105;
     $106 = $15;
     $107 = ((($106)) + 4|0);
     $15 = $107;
    }
    break;
   }
   case 17:  {
    $108 = $9;
    $109 = (($108) - 1)|0;
    $11 = $109;
    while(1) {
     $110 = $11;
     $111 = ($110|0)>=(0);
     if (!($111)) {
      break L15;
     }
     $112 = $14;
     $113 = HEAP8[$112>>0]|0;
     $114 = $15;
     HEAP8[$114>>0] = $113;
     $115 = $11;
     $116 = (($115) + -1)|0;
     $11 = $116;
     $117 = $14;
     $118 = ((($117)) + 2|0);
     $14 = $118;
     $119 = $15;
     $120 = ((($119)) + 1|0);
     $15 = $120;
    }
    break;
   }
   case 19:  {
    $121 = $9;
    $122 = (($121) - 1)|0;
    $11 = $122;
    while(1) {
     $123 = $11;
     $124 = ($123|0)>=(0);
     if (!($124)) {
      break L15;
     }
     $125 = $14;
     $126 = HEAP8[$125>>0]|0;
     $127 = $15;
     $128 = ((($127)) + 2|0);
     HEAP8[$128>>0] = $126;
     $129 = $15;
     $130 = ((($129)) + 1|0);
     HEAP8[$130>>0] = $126;
     $131 = $15;
     HEAP8[$131>>0] = $126;
     $132 = $11;
     $133 = (($132) + -1)|0;
     $11 = $133;
     $134 = $14;
     $135 = ((($134)) + 2|0);
     $14 = $135;
     $136 = $15;
     $137 = ((($136)) + 3|0);
     $15 = $137;
    }
    break;
   }
   case 20:  {
    $138 = $9;
    $139 = (($138) - 1)|0;
    $11 = $139;
    while(1) {
     $140 = $11;
     $141 = ($140|0)>=(0);
     if (!($141)) {
      break L15;
     }
     $142 = $14;
     $143 = HEAP8[$142>>0]|0;
     $144 = $15;
     $145 = ((($144)) + 2|0);
     HEAP8[$145>>0] = $143;
     $146 = $15;
     $147 = ((($146)) + 1|0);
     HEAP8[$147>>0] = $143;
     $148 = $15;
     HEAP8[$148>>0] = $143;
     $149 = $14;
     $150 = ((($149)) + 1|0);
     $151 = HEAP8[$150>>0]|0;
     $152 = $15;
     $153 = ((($152)) + 3|0);
     HEAP8[$153>>0] = $151;
     $154 = $11;
     $155 = (($154) + -1)|0;
     $11 = $155;
     $156 = $14;
     $157 = ((($156)) + 2|0);
     $14 = $157;
     $158 = $15;
     $159 = ((($158)) + 4|0);
     $15 = $159;
    }
    break;
   }
   case 28:  {
    $160 = $9;
    $161 = (($160) - 1)|0;
    $11 = $161;
    while(1) {
     $162 = $11;
     $163 = ($162|0)>=(0);
     if (!($163)) {
      break L15;
     }
     $164 = $14;
     $165 = HEAP8[$164>>0]|0;
     $166 = $15;
     HEAP8[$166>>0] = $165;
     $167 = $14;
     $168 = ((($167)) + 1|0);
     $169 = HEAP8[$168>>0]|0;
     $170 = $15;
     $171 = ((($170)) + 1|0);
     HEAP8[$171>>0] = $169;
     $172 = $14;
     $173 = ((($172)) + 2|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $15;
     $176 = ((($175)) + 2|0);
     HEAP8[$176>>0] = $174;
     $177 = $15;
     $178 = ((($177)) + 3|0);
     HEAP8[$178>>0] = -1;
     $179 = $11;
     $180 = (($179) + -1)|0;
     $11 = $180;
     $181 = $14;
     $182 = ((($181)) + 3|0);
     $14 = $182;
     $183 = $15;
     $184 = ((($183)) + 4|0);
     $15 = $184;
    }
    break;
   }
   case 25:  {
    $185 = $9;
    $186 = (($185) - 1)|0;
    $11 = $186;
    while(1) {
     $187 = $11;
     $188 = ($187|0)>=(0);
     if (!($188)) {
      break L15;
     }
     $189 = $14;
     $190 = HEAP8[$189>>0]|0;
     $191 = $190&255;
     $192 = $14;
     $193 = ((($192)) + 1|0);
     $194 = HEAP8[$193>>0]|0;
     $195 = $194&255;
     $196 = $14;
     $197 = ((($196)) + 2|0);
     $198 = HEAP8[$197>>0]|0;
     $199 = $198&255;
     $200 = (_stbi__compute_y($191,$195,$199)|0);
     $201 = $15;
     HEAP8[$201>>0] = $200;
     $202 = $11;
     $203 = (($202) + -1)|0;
     $11 = $203;
     $204 = $14;
     $205 = ((($204)) + 3|0);
     $14 = $205;
     $206 = $15;
     $207 = ((($206)) + 1|0);
     $15 = $207;
    }
    break;
   }
   case 26:  {
    $208 = $9;
    $209 = (($208) - 1)|0;
    $11 = $209;
    while(1) {
     $210 = $11;
     $211 = ($210|0)>=(0);
     if (!($211)) {
      break L15;
     }
     $212 = $14;
     $213 = HEAP8[$212>>0]|0;
     $214 = $213&255;
     $215 = $14;
     $216 = ((($215)) + 1|0);
     $217 = HEAP8[$216>>0]|0;
     $218 = $217&255;
     $219 = $14;
     $220 = ((($219)) + 2|0);
     $221 = HEAP8[$220>>0]|0;
     $222 = $221&255;
     $223 = (_stbi__compute_y($214,$218,$222)|0);
     $224 = $15;
     HEAP8[$224>>0] = $223;
     $225 = $15;
     $226 = ((($225)) + 1|0);
     HEAP8[$226>>0] = -1;
     $227 = $11;
     $228 = (($227) + -1)|0;
     $11 = $228;
     $229 = $14;
     $230 = ((($229)) + 3|0);
     $14 = $230;
     $231 = $15;
     $232 = ((($231)) + 2|0);
     $15 = $232;
    }
    break;
   }
   case 33:  {
    $233 = $9;
    $234 = (($233) - 1)|0;
    $11 = $234;
    while(1) {
     $235 = $11;
     $236 = ($235|0)>=(0);
     if (!($236)) {
      break L15;
     }
     $237 = $14;
     $238 = HEAP8[$237>>0]|0;
     $239 = $238&255;
     $240 = $14;
     $241 = ((($240)) + 1|0);
     $242 = HEAP8[$241>>0]|0;
     $243 = $242&255;
     $244 = $14;
     $245 = ((($244)) + 2|0);
     $246 = HEAP8[$245>>0]|0;
     $247 = $246&255;
     $248 = (_stbi__compute_y($239,$243,$247)|0);
     $249 = $15;
     HEAP8[$249>>0] = $248;
     $250 = $11;
     $251 = (($250) + -1)|0;
     $11 = $251;
     $252 = $14;
     $253 = ((($252)) + 4|0);
     $14 = $253;
     $254 = $15;
     $255 = ((($254)) + 1|0);
     $15 = $255;
    }
    break;
   }
   case 34:  {
    $256 = $9;
    $257 = (($256) - 1)|0;
    $11 = $257;
    while(1) {
     $258 = $11;
     $259 = ($258|0)>=(0);
     if (!($259)) {
      break L15;
     }
     $260 = $14;
     $261 = HEAP8[$260>>0]|0;
     $262 = $261&255;
     $263 = $14;
     $264 = ((($263)) + 1|0);
     $265 = HEAP8[$264>>0]|0;
     $266 = $265&255;
     $267 = $14;
     $268 = ((($267)) + 2|0);
     $269 = HEAP8[$268>>0]|0;
     $270 = $269&255;
     $271 = (_stbi__compute_y($262,$266,$270)|0);
     $272 = $15;
     HEAP8[$272>>0] = $271;
     $273 = $14;
     $274 = ((($273)) + 3|0);
     $275 = HEAP8[$274>>0]|0;
     $276 = $15;
     $277 = ((($276)) + 1|0);
     HEAP8[$277>>0] = $275;
     $278 = $11;
     $279 = (($278) + -1)|0;
     $11 = $279;
     $280 = $14;
     $281 = ((($280)) + 4|0);
     $14 = $281;
     $282 = $15;
     $283 = ((($282)) + 2|0);
     $15 = $283;
    }
    break;
   }
   case 35:  {
    $284 = $9;
    $285 = (($284) - 1)|0;
    $11 = $285;
    while(1) {
     $286 = $11;
     $287 = ($286|0)>=(0);
     if (!($287)) {
      break L15;
     }
     $288 = $14;
     $289 = HEAP8[$288>>0]|0;
     $290 = $15;
     HEAP8[$290>>0] = $289;
     $291 = $14;
     $292 = ((($291)) + 1|0);
     $293 = HEAP8[$292>>0]|0;
     $294 = $15;
     $295 = ((($294)) + 1|0);
     HEAP8[$295>>0] = $293;
     $296 = $14;
     $297 = ((($296)) + 2|0);
     $298 = HEAP8[$297>>0]|0;
     $299 = $15;
     $300 = ((($299)) + 2|0);
     HEAP8[$300>>0] = $298;
     $301 = $11;
     $302 = (($301) + -1)|0;
     $11 = $302;
     $303 = $14;
     $304 = ((($303)) + 4|0);
     $14 = $304;
     $305 = $15;
     $306 = ((($305)) + 3|0);
     $15 = $306;
    }
    break;
   }
   default: {
    label = 46;
    break L12;
   }
   }
  } while(0);
  $307 = $12;
  $308 = (($307) + 1)|0;
  $12 = $308;
 }
 if ((label|0) == 46) {
  ___assert_fail((6278|0),(4971|0),1554,(6257|0));
  // unreachable;
 }
 _free($39);
 $309 = $13;
 $5 = $309;
 $310 = $5;
 STACKTOP = sp;return ($310|0);
}
function _stbi__convert_format16($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $16 = $8;
 $17 = $7;
 $18 = ($16|0)==($17|0);
 if ($18) {
  $19 = $6;
  $5 = $19;
  $313 = $5;
  STACKTOP = sp;return ($313|0);
 }
 $20 = $8;
 $21 = ($20|0)>=(1);
 $22 = $8;
 $23 = ($22|0)<=(4);
 $or$cond = $21 & $23;
 if (!($or$cond)) {
  ___assert_fail((6226|0),(4971|0),1574,(6280|0));
  // unreachable;
 }
 $24 = $8;
 $25 = $9;
 $26 = Math_imul($24, $25)|0;
 $27 = $10;
 $28 = Math_imul($26, $27)|0;
 $29 = $28<<1;
 $30 = (_stbi__malloc($29)|0);
 $13 = $30;
 $31 = $13;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $33 = $6;
  _free($33);
  $34 = (_stbi__err(5340)|0);
  $35 = ($34|0)!=(0);
  $36 = $35 ? 0 : 0;
  $37 = $36;
  $38 = $37;
  $5 = $38;
  $313 = $5;
  STACKTOP = sp;return ($313|0);
 }
 $12 = 0;
 L12: while(1) {
  $39 = $12;
  $40 = $10;
  $41 = ($39|0)<($40|0);
  $42 = $6;
  if (!($41)) {
   break;
  }
  $43 = $12;
  $44 = $9;
  $45 = Math_imul($43, $44)|0;
  $46 = $7;
  $47 = Math_imul($45, $46)|0;
  $48 = (($42) + ($47<<1)|0);
  $14 = $48;
  $49 = $13;
  $50 = $12;
  $51 = $9;
  $52 = Math_imul($50, $51)|0;
  $53 = $8;
  $54 = Math_imul($52, $53)|0;
  $55 = (($49) + ($54<<1)|0);
  $15 = $55;
  $56 = $7;
  $57 = $56<<3;
  $58 = $8;
  $59 = (($57) + ($58))|0;
  L15: do {
   switch ($59|0) {
   case 10:  {
    $60 = $9;
    $61 = (($60) - 1)|0;
    $11 = $61;
    while(1) {
     $62 = $11;
     $63 = ($62|0)>=(0);
     if (!($63)) {
      break L15;
     }
     $64 = $14;
     $65 = HEAP16[$64>>1]|0;
     $66 = $15;
     HEAP16[$66>>1] = $65;
     $67 = $15;
     $68 = ((($67)) + 2|0);
     HEAP16[$68>>1] = -1;
     $69 = $11;
     $70 = (($69) + -1)|0;
     $11 = $70;
     $71 = $14;
     $72 = ((($71)) + 2|0);
     $14 = $72;
     $73 = $15;
     $74 = ((($73)) + 4|0);
     $15 = $74;
    }
    break;
   }
   case 11:  {
    $75 = $9;
    $76 = (($75) - 1)|0;
    $11 = $76;
    while(1) {
     $77 = $11;
     $78 = ($77|0)>=(0);
     if (!($78)) {
      break L15;
     }
     $79 = $14;
     $80 = HEAP16[$79>>1]|0;
     $81 = $15;
     $82 = ((($81)) + 4|0);
     HEAP16[$82>>1] = $80;
     $83 = $15;
     $84 = ((($83)) + 2|0);
     HEAP16[$84>>1] = $80;
     $85 = $15;
     HEAP16[$85>>1] = $80;
     $86 = $11;
     $87 = (($86) + -1)|0;
     $11 = $87;
     $88 = $14;
     $89 = ((($88)) + 2|0);
     $14 = $89;
     $90 = $15;
     $91 = ((($90)) + 6|0);
     $15 = $91;
    }
    break;
   }
   case 12:  {
    $92 = $9;
    $93 = (($92) - 1)|0;
    $11 = $93;
    while(1) {
     $94 = $11;
     $95 = ($94|0)>=(0);
     if (!($95)) {
      break L15;
     }
     $96 = $14;
     $97 = HEAP16[$96>>1]|0;
     $98 = $15;
     $99 = ((($98)) + 4|0);
     HEAP16[$99>>1] = $97;
     $100 = $15;
     $101 = ((($100)) + 2|0);
     HEAP16[$101>>1] = $97;
     $102 = $15;
     HEAP16[$102>>1] = $97;
     $103 = $15;
     $104 = ((($103)) + 6|0);
     HEAP16[$104>>1] = -1;
     $105 = $11;
     $106 = (($105) + -1)|0;
     $11 = $106;
     $107 = $14;
     $108 = ((($107)) + 2|0);
     $14 = $108;
     $109 = $15;
     $110 = ((($109)) + 8|0);
     $15 = $110;
    }
    break;
   }
   case 17:  {
    $111 = $9;
    $112 = (($111) - 1)|0;
    $11 = $112;
    while(1) {
     $113 = $11;
     $114 = ($113|0)>=(0);
     if (!($114)) {
      break L15;
     }
     $115 = $14;
     $116 = HEAP16[$115>>1]|0;
     $117 = $15;
     HEAP16[$117>>1] = $116;
     $118 = $11;
     $119 = (($118) + -1)|0;
     $11 = $119;
     $120 = $14;
     $121 = ((($120)) + 4|0);
     $14 = $121;
     $122 = $15;
     $123 = ((($122)) + 2|0);
     $15 = $123;
    }
    break;
   }
   case 19:  {
    $124 = $9;
    $125 = (($124) - 1)|0;
    $11 = $125;
    while(1) {
     $126 = $11;
     $127 = ($126|0)>=(0);
     if (!($127)) {
      break L15;
     }
     $128 = $14;
     $129 = HEAP16[$128>>1]|0;
     $130 = $15;
     $131 = ((($130)) + 4|0);
     HEAP16[$131>>1] = $129;
     $132 = $15;
     $133 = ((($132)) + 2|0);
     HEAP16[$133>>1] = $129;
     $134 = $15;
     HEAP16[$134>>1] = $129;
     $135 = $11;
     $136 = (($135) + -1)|0;
     $11 = $136;
     $137 = $14;
     $138 = ((($137)) + 4|0);
     $14 = $138;
     $139 = $15;
     $140 = ((($139)) + 6|0);
     $15 = $140;
    }
    break;
   }
   case 20:  {
    $141 = $9;
    $142 = (($141) - 1)|0;
    $11 = $142;
    while(1) {
     $143 = $11;
     $144 = ($143|0)>=(0);
     if (!($144)) {
      break L15;
     }
     $145 = $14;
     $146 = HEAP16[$145>>1]|0;
     $147 = $15;
     $148 = ((($147)) + 4|0);
     HEAP16[$148>>1] = $146;
     $149 = $15;
     $150 = ((($149)) + 2|0);
     HEAP16[$150>>1] = $146;
     $151 = $15;
     HEAP16[$151>>1] = $146;
     $152 = $14;
     $153 = ((($152)) + 2|0);
     $154 = HEAP16[$153>>1]|0;
     $155 = $15;
     $156 = ((($155)) + 6|0);
     HEAP16[$156>>1] = $154;
     $157 = $11;
     $158 = (($157) + -1)|0;
     $11 = $158;
     $159 = $14;
     $160 = ((($159)) + 4|0);
     $14 = $160;
     $161 = $15;
     $162 = ((($161)) + 8|0);
     $15 = $162;
    }
    break;
   }
   case 28:  {
    $163 = $9;
    $164 = (($163) - 1)|0;
    $11 = $164;
    while(1) {
     $165 = $11;
     $166 = ($165|0)>=(0);
     if (!($166)) {
      break L15;
     }
     $167 = $14;
     $168 = HEAP16[$167>>1]|0;
     $169 = $15;
     HEAP16[$169>>1] = $168;
     $170 = $14;
     $171 = ((($170)) + 2|0);
     $172 = HEAP16[$171>>1]|0;
     $173 = $15;
     $174 = ((($173)) + 2|0);
     HEAP16[$174>>1] = $172;
     $175 = $14;
     $176 = ((($175)) + 4|0);
     $177 = HEAP16[$176>>1]|0;
     $178 = $15;
     $179 = ((($178)) + 4|0);
     HEAP16[$179>>1] = $177;
     $180 = $15;
     $181 = ((($180)) + 6|0);
     HEAP16[$181>>1] = -1;
     $182 = $11;
     $183 = (($182) + -1)|0;
     $11 = $183;
     $184 = $14;
     $185 = ((($184)) + 6|0);
     $14 = $185;
     $186 = $15;
     $187 = ((($186)) + 8|0);
     $15 = $187;
    }
    break;
   }
   case 25:  {
    $188 = $9;
    $189 = (($188) - 1)|0;
    $11 = $189;
    while(1) {
     $190 = $11;
     $191 = ($190|0)>=(0);
     if (!($191)) {
      break L15;
     }
     $192 = $14;
     $193 = HEAP16[$192>>1]|0;
     $194 = $193&65535;
     $195 = $14;
     $196 = ((($195)) + 2|0);
     $197 = HEAP16[$196>>1]|0;
     $198 = $197&65535;
     $199 = $14;
     $200 = ((($199)) + 4|0);
     $201 = HEAP16[$200>>1]|0;
     $202 = $201&65535;
     $203 = (_stbi__compute_y_16($194,$198,$202)|0);
     $204 = $15;
     HEAP16[$204>>1] = $203;
     $205 = $11;
     $206 = (($205) + -1)|0;
     $11 = $206;
     $207 = $14;
     $208 = ((($207)) + 6|0);
     $14 = $208;
     $209 = $15;
     $210 = ((($209)) + 2|0);
     $15 = $210;
    }
    break;
   }
   case 26:  {
    $211 = $9;
    $212 = (($211) - 1)|0;
    $11 = $212;
    while(1) {
     $213 = $11;
     $214 = ($213|0)>=(0);
     if (!($214)) {
      break L15;
     }
     $215 = $14;
     $216 = HEAP16[$215>>1]|0;
     $217 = $216&65535;
     $218 = $14;
     $219 = ((($218)) + 2|0);
     $220 = HEAP16[$219>>1]|0;
     $221 = $220&65535;
     $222 = $14;
     $223 = ((($222)) + 4|0);
     $224 = HEAP16[$223>>1]|0;
     $225 = $224&65535;
     $226 = (_stbi__compute_y_16($217,$221,$225)|0);
     $227 = $15;
     HEAP16[$227>>1] = $226;
     $228 = $15;
     $229 = ((($228)) + 2|0);
     HEAP16[$229>>1] = -1;
     $230 = $11;
     $231 = (($230) + -1)|0;
     $11 = $231;
     $232 = $14;
     $233 = ((($232)) + 6|0);
     $14 = $233;
     $234 = $15;
     $235 = ((($234)) + 4|0);
     $15 = $235;
    }
    break;
   }
   case 33:  {
    $236 = $9;
    $237 = (($236) - 1)|0;
    $11 = $237;
    while(1) {
     $238 = $11;
     $239 = ($238|0)>=(0);
     if (!($239)) {
      break L15;
     }
     $240 = $14;
     $241 = HEAP16[$240>>1]|0;
     $242 = $241&65535;
     $243 = $14;
     $244 = ((($243)) + 2|0);
     $245 = HEAP16[$244>>1]|0;
     $246 = $245&65535;
     $247 = $14;
     $248 = ((($247)) + 4|0);
     $249 = HEAP16[$248>>1]|0;
     $250 = $249&65535;
     $251 = (_stbi__compute_y_16($242,$246,$250)|0);
     $252 = $15;
     HEAP16[$252>>1] = $251;
     $253 = $11;
     $254 = (($253) + -1)|0;
     $11 = $254;
     $255 = $14;
     $256 = ((($255)) + 8|0);
     $14 = $256;
     $257 = $15;
     $258 = ((($257)) + 2|0);
     $15 = $258;
    }
    break;
   }
   case 34:  {
    $259 = $9;
    $260 = (($259) - 1)|0;
    $11 = $260;
    while(1) {
     $261 = $11;
     $262 = ($261|0)>=(0);
     if (!($262)) {
      break L15;
     }
     $263 = $14;
     $264 = HEAP16[$263>>1]|0;
     $265 = $264&65535;
     $266 = $14;
     $267 = ((($266)) + 2|0);
     $268 = HEAP16[$267>>1]|0;
     $269 = $268&65535;
     $270 = $14;
     $271 = ((($270)) + 4|0);
     $272 = HEAP16[$271>>1]|0;
     $273 = $272&65535;
     $274 = (_stbi__compute_y_16($265,$269,$273)|0);
     $275 = $15;
     HEAP16[$275>>1] = $274;
     $276 = $14;
     $277 = ((($276)) + 6|0);
     $278 = HEAP16[$277>>1]|0;
     $279 = $15;
     $280 = ((($279)) + 2|0);
     HEAP16[$280>>1] = $278;
     $281 = $11;
     $282 = (($281) + -1)|0;
     $11 = $282;
     $283 = $14;
     $284 = ((($283)) + 8|0);
     $14 = $284;
     $285 = $15;
     $286 = ((($285)) + 4|0);
     $15 = $286;
    }
    break;
   }
   case 35:  {
    $287 = $9;
    $288 = (($287) - 1)|0;
    $11 = $288;
    while(1) {
     $289 = $11;
     $290 = ($289|0)>=(0);
     if (!($290)) {
      break L15;
     }
     $291 = $14;
     $292 = HEAP16[$291>>1]|0;
     $293 = $15;
     HEAP16[$293>>1] = $292;
     $294 = $14;
     $295 = ((($294)) + 2|0);
     $296 = HEAP16[$295>>1]|0;
     $297 = $15;
     $298 = ((($297)) + 2|0);
     HEAP16[$298>>1] = $296;
     $299 = $14;
     $300 = ((($299)) + 4|0);
     $301 = HEAP16[$300>>1]|0;
     $302 = $15;
     $303 = ((($302)) + 4|0);
     HEAP16[$303>>1] = $301;
     $304 = $11;
     $305 = (($304) + -1)|0;
     $11 = $305;
     $306 = $14;
     $307 = ((($306)) + 8|0);
     $14 = $307;
     $308 = $15;
     $309 = ((($308)) + 6|0);
     $15 = $309;
    }
    break;
   }
   default: {
    label = 46;
    break L12;
   }
   }
  } while(0);
  $310 = $12;
  $311 = (($310) + 1)|0;
  $12 = $311;
 }
 if ((label|0) == 46) {
  ___assert_fail((6278|0),(4971|0),1603,(6280|0));
  // unreachable;
 }
 _free($42);
 $312 = $13;
 $5 = $312;
 $313 = $5;
 STACKTOP = sp;return ($313|0);
}
function _stbi__get_chunk_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $2 = $1;
 $4 = $2;
 $5 = (_stbi__get32be($4)|0);
 HEAP32[$3>>2] = $5;
 $6 = $2;
 $7 = (_stbi__get32be($6)|0);
 $8 = ((($3)) + 4|0);
 HEAP32[$8>>2] = $7;
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;
 STACKTOP = sp;return;
}
function _stbi__get32be($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_stbi__get16be($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = $5 << 16;
 $7 = $1;
 $8 = (_stbi__get16be($7)|0);
 $9 = (($6) + ($8))|0;
 STACKTOP = sp;return ($9|0);
}
function _stbi__getn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $4;
  $15 = ((($14)) + 172|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $4;
  $18 = ((($17)) + 168|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $16;
  $21 = $19;
  $22 = (($20) - ($21))|0;
  $7 = $22;
  $23 = $7;
  $24 = $6;
  $25 = ($23|0)<($24|0);
  if ($25) {
   $26 = $5;
   $27 = $4;
   $28 = ((($27)) + 168|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $7;
   _memcpy(($26|0),($29|0),($30|0))|0;
   $31 = $4;
   $32 = ((($31)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $4;
   $35 = ((($34)) + 28|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $5;
   $38 = $7;
   $39 = (($37) + ($38)|0);
   $40 = $6;
   $41 = $7;
   $42 = (($40) - ($41))|0;
   $43 = (FUNCTION_TABLE_iiii[$33 & 31]($36,$39,$42)|0);
   $9 = $43;
   $44 = $9;
   $45 = $6;
   $46 = $7;
   $47 = (($45) - ($46))|0;
   $48 = ($44|0)==($47|0);
   $49 = $48&1;
   $8 = $49;
   $50 = $4;
   $51 = ((($50)) + 172|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $4;
   $54 = ((($53)) + 168|0);
   HEAP32[$54>>2] = $52;
   $55 = $8;
   $3 = $55;
   $75 = $3;
   STACKTOP = sp;return ($75|0);
  }
 }
 $56 = $4;
 $57 = ((($56)) + 168|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $6;
 $60 = (($58) + ($59)|0);
 $61 = $4;
 $62 = ((($61)) + 172|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($60>>>0)<=($63>>>0);
 if ($64) {
  $65 = $5;
  $66 = $4;
  $67 = ((($66)) + 168|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $6;
  _memcpy(($65|0),($68|0),($69|0))|0;
  $70 = $6;
  $71 = $4;
  $72 = ((($71)) + 168|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + ($70)|0);
  HEAP32[$72>>2] = $74;
  $3 = 1;
  $75 = $3;
  STACKTOP = sp;return ($75|0);
 } else {
  $3 = 0;
  $75 = $3;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _stbi__create_png_image($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $19 = sp + 96|0;
 $20 = sp + 64|0;
 $21 = sp + 32|0;
 $22 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $30 = $12;
 $31 = ($30|0)==(16);
 $32 = $31 ? 2 : 1;
 $15 = $32;
 $33 = $11;
 $34 = $15;
 $35 = Math_imul($33, $34)|0;
 $16 = $35;
 $36 = $14;
 $37 = ($36|0)!=(0);
 $38 = $8;
 if (!($37)) {
  $39 = $9;
  $40 = $10;
  $41 = $11;
  $42 = $8;
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  $45 = $8;
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $12;
  $50 = $13;
  $51 = (_stbi__create_png_image_raw($38,$39,$40,$41,$44,$48,$49,$50)|0);
  $7 = $51;
  $189 = $7;
  STACKTOP = sp;return ($189|0);
 }
 $52 = HEAP32[$38>>2]|0;
 $53 = HEAP32[$52>>2]|0;
 $54 = $8;
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $16;
 $59 = (_stbi__malloc_mad3($53,$57,$58,0)|0);
 $17 = $59;
 $18 = 0;
 while(1) {
  $60 = $18;
  $61 = ($60|0)<(7);
  if (!($61)) {
   label = 16;
   break;
  }
  ;HEAP32[$19>>2]=HEAP32[304>>2]|0;HEAP32[$19+4>>2]=HEAP32[304+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[304+8>>2]|0;HEAP32[$19+12>>2]=HEAP32[304+12>>2]|0;HEAP32[$19+16>>2]=HEAP32[304+16>>2]|0;HEAP32[$19+20>>2]=HEAP32[304+20>>2]|0;HEAP32[$19+24>>2]=HEAP32[304+24>>2]|0;
  ;HEAP32[$20>>2]=HEAP32[336>>2]|0;HEAP32[$20+4>>2]=HEAP32[336+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[336+8>>2]|0;HEAP32[$20+12>>2]=HEAP32[336+12>>2]|0;HEAP32[$20+16>>2]=HEAP32[336+16>>2]|0;HEAP32[$20+20>>2]=HEAP32[336+20>>2]|0;HEAP32[$20+24>>2]=HEAP32[336+24>>2]|0;
  ;HEAP32[$21>>2]=HEAP32[368>>2]|0;HEAP32[$21+4>>2]=HEAP32[368+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[368+8>>2]|0;HEAP32[$21+12>>2]=HEAP32[368+12>>2]|0;HEAP32[$21+16>>2]=HEAP32[368+16>>2]|0;HEAP32[$21+20>>2]=HEAP32[368+20>>2]|0;HEAP32[$21+24>>2]=HEAP32[368+24>>2]|0;
  ;HEAP32[$22>>2]=HEAP32[400>>2]|0;HEAP32[$22+4>>2]=HEAP32[400+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[400+8>>2]|0;HEAP32[$22+12>>2]=HEAP32[400+12>>2]|0;HEAP32[$22+16>>2]=HEAP32[400+16>>2]|0;HEAP32[$22+20>>2]=HEAP32[400+20>>2]|0;HEAP32[$22+24>>2]=HEAP32[400+24>>2]|0;
  $62 = $8;
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$63>>2]|0;
  $65 = $18;
  $66 = (($19) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($64) - ($67))|0;
  $69 = $18;
  $70 = (($21) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($68) + ($71))|0;
  $73 = (($72) - 1)|0;
  $74 = $18;
  $75 = (($21) + ($74<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($73>>>0) / ($76>>>0))&-1;
  $25 = $77;
  $78 = $8;
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($79)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $18;
  $83 = (($20) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($81) - ($84))|0;
  $86 = $18;
  $87 = (($22) + ($86<<2)|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($85) + ($88))|0;
  $90 = (($89) - 1)|0;
  $91 = $18;
  $92 = (($22) + ($91<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($90>>>0) / ($93>>>0))&-1;
  $26 = $94;
  $95 = $25;
  $96 = ($95|0)!=(0);
  $97 = $26;
  $98 = ($97|0)!=(0);
  $or$cond = $96 & $98;
  if ($or$cond) {
   $99 = $8;
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($100)) + 8|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $25;
   $104 = Math_imul($102, $103)|0;
   $105 = $12;
   $106 = Math_imul($104, $105)|0;
   $107 = (($106) + 7)|0;
   $108 = $107 >> 3;
   $109 = (($108) + 1)|0;
   $110 = $26;
   $111 = Math_imul($109, $110)|0;
   $27 = $111;
   $112 = $8;
   $113 = $9;
   $114 = $10;
   $115 = $11;
   $116 = $25;
   $117 = $26;
   $118 = $12;
   $119 = $13;
   $120 = (_stbi__create_png_image_raw($112,$113,$114,$115,$116,$117,$118,$119)|0);
   $121 = ($120|0)!=(0);
   if (!($121)) {
    label = 7;
    break;
   }
   $24 = 0;
   while(1) {
    $123 = $24;
    $124 = $26;
    $125 = ($123|0)<($124|0);
    if (!($125)) {
     break;
    }
    $23 = 0;
    while(1) {
     $126 = $23;
     $127 = $25;
     $128 = ($126|0)<($127|0);
     $129 = $24;
     if (!($128)) {
      break;
     }
     $130 = $18;
     $131 = (($22) + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = Math_imul($129, $132)|0;
     $134 = $18;
     $135 = (($20) + ($134<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($133) + ($136))|0;
     $28 = $137;
     $138 = $23;
     $139 = $18;
     $140 = (($21) + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = Math_imul($138, $141)|0;
     $143 = $18;
     $144 = (($19) + ($143<<2)|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($142) + ($145))|0;
     $29 = $146;
     $147 = $17;
     $148 = $28;
     $149 = $8;
     $150 = HEAP32[$149>>2]|0;
     $151 = HEAP32[$150>>2]|0;
     $152 = Math_imul($148, $151)|0;
     $153 = $16;
     $154 = Math_imul($152, $153)|0;
     $155 = (($147) + ($154)|0);
     $156 = $29;
     $157 = $16;
     $158 = Math_imul($156, $157)|0;
     $159 = (($155) + ($158)|0);
     $160 = $8;
     $161 = ((($160)) + 12|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $24;
     $164 = $25;
     $165 = Math_imul($163, $164)|0;
     $166 = $23;
     $167 = (($165) + ($166))|0;
     $168 = $16;
     $169 = Math_imul($167, $168)|0;
     $170 = (($162) + ($169)|0);
     $171 = $16;
     _memcpy(($159|0),($170|0),($171|0))|0;
     $172 = $23;
     $173 = (($172) + 1)|0;
     $23 = $173;
    }
    $174 = (($129) + 1)|0;
    $24 = $174;
   }
   $175 = $8;
   $176 = ((($175)) + 12|0);
   $177 = HEAP32[$176>>2]|0;
   _free($177);
   $178 = $27;
   $179 = $9;
   $180 = (($179) + ($178)|0);
   $9 = $180;
   $181 = $27;
   $182 = $10;
   $183 = (($182) - ($181))|0;
   $10 = $183;
  }
  $184 = $18;
  $185 = (($184) + 1)|0;
  $18 = $185;
 }
 if ((label|0) == 7) {
  $122 = $17;
  _free($122);
  $7 = 0;
  $189 = $7;
  STACKTOP = sp;return ($189|0);
 }
 else if ((label|0) == 16) {
  $186 = $17;
  $187 = $8;
  $188 = ((($187)) + 12|0);
  HEAP32[$188>>2] = $186;
  $7 = 1;
  $189 = $7;
  STACKTOP = sp;return ($189|0);
 }
 return (0)|0;
}
function _stbi__compute_transparency16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 $12 = $6;
 $13 = HEAP32[$12>>2]|0;
 $14 = $6;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($13, $16)|0;
 $8 = $17;
 $18 = $3;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $9 = $20;
 $21 = $5;
 $22 = ($21|0)==(2);
 $23 = $5;
 $24 = ($23|0)==(4);
 $or$cond = $22 | $24;
 if (!($or$cond)) {
  ___assert_fail((6111|0),(4971|0),4619,(6136|0));
  // unreachable;
 }
 $25 = $5;
 $26 = ($25|0)==(2);
 $7 = 0;
 if ($26) {
  while(1) {
   $27 = $7;
   $28 = $8;
   $29 = ($27>>>0)<($28>>>0);
   if (!($29)) {
    break;
   }
   $30 = $9;
   $31 = HEAP16[$30>>1]|0;
   $32 = $31&65535;
   $33 = $4;
   $34 = HEAP16[$33>>1]|0;
   $35 = $34&65535;
   $36 = ($32|0)==($35|0);
   $37 = $36 ? 0 : 65535;
   $38 = $37&65535;
   $39 = $9;
   $40 = ((($39)) + 2|0);
   HEAP16[$40>>1] = $38;
   $41 = $9;
   $42 = ((($41)) + 4|0);
   $9 = $42;
   $43 = $7;
   $44 = (($43) + 1)|0;
   $7 = $44;
  }
  STACKTOP = sp;return 1;
 }
 while(1) {
  $45 = $7;
  $46 = $8;
  $47 = ($45>>>0)<($46>>>0);
  if (!($47)) {
   break;
  }
  $48 = $9;
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $51 = $4;
  $52 = HEAP16[$51>>1]|0;
  $53 = $52&65535;
  $54 = ($50|0)==($53|0);
  if ($54) {
   $55 = $9;
   $56 = ((($55)) + 2|0);
   $57 = HEAP16[$56>>1]|0;
   $58 = $57&65535;
   $59 = $4;
   $60 = ((($59)) + 2|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61&65535;
   $63 = ($58|0)==($62|0);
   if ($63) {
    $64 = $9;
    $65 = ((($64)) + 4|0);
    $66 = HEAP16[$65>>1]|0;
    $67 = $66&65535;
    $68 = $4;
    $69 = ((($68)) + 4|0);
    $70 = HEAP16[$69>>1]|0;
    $71 = $70&65535;
    $72 = ($67|0)==($71|0);
    if ($72) {
     $73 = $9;
     $74 = ((($73)) + 6|0);
     HEAP16[$74>>1] = 0;
    }
   }
  }
  $75 = $9;
  $76 = ((($75)) + 8|0);
  $9 = $76;
  $77 = $7;
  $78 = (($77) + 1)|0;
  $7 = $78;
 }
 STACKTOP = sp;return 1;
}
function _stbi__compute_transparency($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 $12 = $6;
 $13 = HEAP32[$12>>2]|0;
 $14 = $6;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($13, $16)|0;
 $8 = $17;
 $18 = $3;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $9 = $20;
 $21 = $5;
 $22 = ($21|0)==(2);
 $23 = $5;
 $24 = ($23|0)==(4);
 $or$cond = $22 | $24;
 if (!($or$cond)) {
  ___assert_fail((6111|0),(4971|0),4594,(6165|0));
  // unreachable;
 }
 $25 = $5;
 $26 = ($25|0)==(2);
 $7 = 0;
 if ($26) {
  while(1) {
   $27 = $7;
   $28 = $8;
   $29 = ($27>>>0)<($28>>>0);
   if (!($29)) {
    break;
   }
   $30 = $9;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $4;
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = ($32|0)==($35|0);
   $37 = $36 ? 0 : 255;
   $38 = $37&255;
   $39 = $9;
   $40 = ((($39)) + 1|0);
   HEAP8[$40>>0] = $38;
   $41 = $9;
   $42 = ((($41)) + 2|0);
   $9 = $42;
   $43 = $7;
   $44 = (($43) + 1)|0;
   $7 = $44;
  }
  STACKTOP = sp;return 1;
 }
 while(1) {
  $45 = $7;
  $46 = $8;
  $47 = ($45>>>0)<($46>>>0);
  if (!($47)) {
   break;
  }
  $48 = $9;
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $4;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = ($50|0)==($53|0);
  if ($54) {
   $55 = $9;
   $56 = ((($55)) + 1|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $4;
   $60 = ((($59)) + 1|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = ($58|0)==($62|0);
   if ($63) {
    $64 = $9;
    $65 = ((($64)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = $4;
    $69 = ((($68)) + 2|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70&255;
    $72 = ($67|0)==($71|0);
    if ($72) {
     $73 = $9;
     $74 = ((($73)) + 3|0);
     HEAP8[$74>>0] = 0;
    }
   }
  }
  $75 = $9;
  $76 = ((($75)) + 4|0);
  $9 = $76;
  $77 = $7;
  $78 = (($77) + 1)|0;
  $7 = $78;
 }
 STACKTOP = sp;return 1;
}
function _stbi__de_iphone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $2 = $12;
 $13 = $2;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = Math_imul($14, $17)|0;
 $4 = $18;
 $19 = $1;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $5 = $21;
 $22 = $2;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(3);
 if ($25) {
  $3 = 0;
  while(1) {
   $26 = $3;
   $27 = $4;
   $28 = ($26>>>0)<($27>>>0);
   if (!($28)) {
    break;
   }
   $29 = $5;
   $30 = HEAP8[$29>>0]|0;
   $6 = $30;
   $31 = $5;
   $32 = ((($31)) + 2|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $5;
   HEAP8[$34>>0] = $33;
   $35 = $6;
   $36 = $5;
   $37 = ((($36)) + 2|0);
   HEAP8[$37>>0] = $35;
   $38 = $5;
   $39 = ((($38)) + 3|0);
   $5 = $39;
   $40 = $3;
   $41 = (($40) + 1)|0;
   $3 = $41;
  }
  STACKTOP = sp;return;
 }
 $42 = $2;
 $43 = ((($42)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(4);
 if (!($45)) {
  ___assert_fail((6192|0),(4971|0),4700,(6210|0));
  // unreachable;
 }
 $46 = (0)!=(0);
 $3 = 0;
 if (!($46)) {
  while(1) {
   $111 = $3;
   $112 = $4;
   $113 = ($111>>>0)<($112>>>0);
   if (!($113)) {
    break;
   }
   $114 = $5;
   $115 = HEAP8[$114>>0]|0;
   $10 = $115;
   $116 = $5;
   $117 = ((($116)) + 2|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $5;
   HEAP8[$119>>0] = $118;
   $120 = $10;
   $121 = $5;
   $122 = ((($121)) + 2|0);
   HEAP8[$122>>0] = $120;
   $123 = $5;
   $124 = ((($123)) + 4|0);
   $5 = $124;
   $125 = $3;
   $126 = (($125) + 1)|0;
   $3 = $126;
  }
  STACKTOP = sp;return;
 }
 while(1) {
  $47 = $3;
  $48 = $4;
  $49 = ($47>>>0)<($48>>>0);
  if (!($49)) {
   break;
  }
  $50 = $5;
  $51 = ((($50)) + 3|0);
  $52 = HEAP8[$51>>0]|0;
  $7 = $52;
  $53 = $5;
  $54 = HEAP8[$53>>0]|0;
  $8 = $54;
  $55 = $7;
  $56 = ($55<<24>>24)!=(0);
  if ($56) {
   $57 = $7;
   $58 = $57&255;
   $59 = (($58|0) / 2)&-1;
   $60 = $59&255;
   $9 = $60;
   $61 = $5;
   $62 = ((($61)) + 2|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = ($64*255)|0;
   $66 = $9;
   $67 = $66&255;
   $68 = (($65) + ($67))|0;
   $69 = $7;
   $70 = $69&255;
   $71 = (($68|0) / ($70|0))&-1;
   $72 = $71&255;
   $73 = $5;
   HEAP8[$73>>0] = $72;
   $74 = $5;
   $75 = ((($74)) + 1|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = ($77*255)|0;
   $79 = $9;
   $80 = $79&255;
   $81 = (($78) + ($80))|0;
   $82 = $7;
   $83 = $82&255;
   $84 = (($81|0) / ($83|0))&-1;
   $85 = $84&255;
   $86 = $5;
   $87 = ((($86)) + 1|0);
   HEAP8[$87>>0] = $85;
   $88 = $8;
   $89 = $88&255;
   $90 = ($89*255)|0;
   $91 = $9;
   $92 = $91&255;
   $93 = (($90) + ($92))|0;
   $94 = $7;
   $95 = $94&255;
   $96 = (($93|0) / ($95|0))&-1;
   $97 = $96&255;
   $98 = $5;
   $99 = ((($98)) + 2|0);
   HEAP8[$99>>0] = $97;
  } else {
   $100 = $5;
   $101 = ((($100)) + 2|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $5;
   HEAP8[$103>>0] = $102;
   $104 = $8;
   $105 = $5;
   $106 = ((($105)) + 2|0);
   HEAP8[$106>>0] = $104;
  }
  $107 = $5;
  $108 = ((($107)) + 4|0);
  $5 = $108;
  $109 = $3;
  $110 = (($109) + 1)|0;
  $3 = $110;
 }
 STACKTOP = sp;return;
}
function _stbi__expand_png_palette($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $16 = $5;
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = $5;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = Math_imul($18, $22)|0;
 $10 = $23;
 $24 = $5;
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $13 = $26;
 $27 = $10;
 $28 = $8;
 $29 = (_stbi__malloc_mad2($27,$28,0)|0);
 $11 = $29;
 $30 = $11;
 $31 = ($30|0)==(0|0);
 if ($31) {
  $32 = (_stbi__err(5340)|0);
  $4 = $32;
  $113 = $4;
  STACKTOP = sp;return ($113|0);
 }
 $33 = $11;
 $12 = $33;
 $34 = $8;
 $35 = ($34|0)==(3);
 $9 = 0;
 L5: do {
  if ($35) {
   while(1) {
    $36 = $9;
    $37 = $10;
    $38 = ($36>>>0)<($37>>>0);
    if (!($38)) {
     break L5;
    }
    $39 = $13;
    $40 = $9;
    $41 = (($39) + ($40)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = $43<<2;
    $14 = $44;
    $45 = $6;
    $46 = $14;
    $47 = (($45) + ($46)|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $11;
    HEAP8[$49>>0] = $48;
    $50 = $6;
    $51 = $14;
    $52 = (($51) + 1)|0;
    $53 = (($50) + ($52)|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $11;
    $56 = ((($55)) + 1|0);
    HEAP8[$56>>0] = $54;
    $57 = $6;
    $58 = $14;
    $59 = (($58) + 2)|0;
    $60 = (($57) + ($59)|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $11;
    $63 = ((($62)) + 2|0);
    HEAP8[$63>>0] = $61;
    $64 = $11;
    $65 = ((($64)) + 3|0);
    $11 = $65;
    $66 = $9;
    $67 = (($66) + 1)|0;
    $9 = $67;
   }
  } else {
   while(1) {
    $68 = $9;
    $69 = $10;
    $70 = ($68>>>0)<($69>>>0);
    if (!($70)) {
     break L5;
    }
    $71 = $13;
    $72 = $9;
    $73 = (($71) + ($72)|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = $75<<2;
    $15 = $76;
    $77 = $6;
    $78 = $15;
    $79 = (($77) + ($78)|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = $11;
    HEAP8[$81>>0] = $80;
    $82 = $6;
    $83 = $15;
    $84 = (($83) + 1)|0;
    $85 = (($82) + ($84)|0);
    $86 = HEAP8[$85>>0]|0;
    $87 = $11;
    $88 = ((($87)) + 1|0);
    HEAP8[$88>>0] = $86;
    $89 = $6;
    $90 = $15;
    $91 = (($90) + 2)|0;
    $92 = (($89) + ($91)|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $11;
    $95 = ((($94)) + 2|0);
    HEAP8[$95>>0] = $93;
    $96 = $6;
    $97 = $15;
    $98 = (($97) + 3)|0;
    $99 = (($96) + ($98)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $11;
    $102 = ((($101)) + 3|0);
    HEAP8[$102>>0] = $100;
    $103 = $11;
    $104 = ((($103)) + 4|0);
    $11 = $104;
    $105 = $9;
    $106 = (($105) + 1)|0;
    $9 = $106;
   }
  }
 } while(0);
 $107 = $5;
 $108 = ((($107)) + 12|0);
 $109 = HEAP32[$108>>2]|0;
 _free($109);
 $110 = $12;
 $111 = $5;
 $112 = ((($111)) + 12|0);
 HEAP32[$112>>2] = $110;
 $4 = 1;
 $113 = $4;
 STACKTOP = sp;return ($113|0);
}
function _stbi__create_png_image_raw($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $39 = $15;
 $40 = ($39|0)==(16);
 $41 = $40 ? 2 : 1;
 $17 = $41;
 $42 = $9;
 $43 = HEAP32[$42>>2]|0;
 $18 = $43;
 $44 = $13;
 $45 = $12;
 $46 = Math_imul($44, $45)|0;
 $47 = $17;
 $48 = Math_imul($46, $47)|0;
 $21 = $48;
 $49 = $18;
 $50 = ((($49)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $25 = $51;
 $52 = $12;
 $53 = $17;
 $54 = Math_imul($52, $53)|0;
 $26 = $54;
 $55 = $25;
 $56 = $17;
 $57 = Math_imul($55, $56)|0;
 $27 = $57;
 $58 = $13;
 $28 = $58;
 $59 = $12;
 $60 = $18;
 $61 = ((($60)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($59|0)==($62|0);
 if (!($63)) {
  $64 = $12;
  $65 = $18;
  $66 = ((($65)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 1)|0;
  $69 = ($64|0)==($68|0);
  if (!($69)) {
   ___assert_fail((5956|0),(4971|0),4343,(5997|0));
   // unreachable;
  }
 }
 $70 = $13;
 $71 = $14;
 $72 = $26;
 $73 = (_stbi__malloc_mad3($70,$71,$72,0)|0);
 $74 = $9;
 $75 = ((($74)) + 12|0);
 HEAP32[$75>>2] = $73;
 $76 = $9;
 $77 = ((($76)) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)!=(0|0);
 if (!($79)) {
  $80 = (_stbi__err(5340)|0);
  $8 = $80;
  $1233 = $8;
  STACKTOP = sp;return ($1233|0);
 }
 $81 = $25;
 $82 = $13;
 $83 = $15;
 $84 = (_stbi__mad3sizes_valid($81,$82,$83,7)|0);
 $85 = ($84|0)!=(0);
 if (!($85)) {
  $86 = (_stbi__err(5330)|0);
  $8 = $86;
  $1233 = $8;
  STACKTOP = sp;return ($1233|0);
 }
 $87 = $25;
 $88 = $13;
 $89 = Math_imul($87, $88)|0;
 $90 = $15;
 $91 = Math_imul($89, $90)|0;
 $92 = (($91) + 7)|0;
 $93 = $92 >>> 3;
 $23 = $93;
 $94 = $23;
 $95 = (($94) + 1)|0;
 $96 = $14;
 $97 = Math_imul($95, $96)|0;
 $22 = $97;
 $98 = $11;
 $99 = $22;
 $100 = ($98>>>0)<($99>>>0);
 if ($100) {
  $101 = (_stbi__err(6024)|0);
  $8 = $101;
  $1233 = $8;
  STACKTOP = sp;return ($1233|0);
 }
 $20 = 0;
 L17: while(1) {
  $102 = $20;
  $103 = $14;
  $104 = ($102>>>0)<($103>>>0);
  if (!($104)) {
   label = 113;
   break;
  }
  $105 = $9;
  $106 = ((($105)) + 12|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $21;
  $109 = $20;
  $110 = Math_imul($108, $109)|0;
  $111 = (($107) + ($110)|0);
  $29 = $111;
  $112 = $10;
  $113 = ((($112)) + 1|0);
  $10 = $113;
  $114 = HEAP8[$112>>0]|0;
  $115 = $114&255;
  $31 = $115;
  $116 = $31;
  $117 = ($116|0)>(4);
  if ($117) {
   label = 13;
   break;
  }
  $119 = $15;
  $120 = ($119|0)<(8);
  if ($120) {
   $121 = $23;
   $122 = $13;
   $123 = ($121>>>0)<=($122>>>0);
   if (!($123)) {
    label = 16;
    break;
   }
   $124 = $13;
   $125 = $12;
   $126 = Math_imul($124, $125)|0;
   $127 = $23;
   $128 = (($126) - ($127))|0;
   $129 = $29;
   $130 = (($129) + ($128)|0);
   $29 = $130;
   $27 = 1;
   $131 = $23;
   $28 = $131;
  }
  $132 = $29;
  $133 = $21;
  $134 = (0 - ($133))|0;
  $135 = (($132) + ($134)|0);
  $30 = $135;
  $136 = $20;
  $137 = ($136|0)==(0);
  if ($137) {
   $138 = $31;
   $139 = (6078 + ($138)|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140&255;
   $31 = $141;
  }
  $24 = 0;
  while(1) {
   $142 = $24;
   $143 = $27;
   $144 = ($142|0)<($143|0);
   if (!($144)) {
    break;
   }
   $145 = $31;
   switch ($145|0) {
   case 0:  {
    $146 = $10;
    $147 = $24;
    $148 = (($146) + ($147)|0);
    $149 = HEAP8[$148>>0]|0;
    $150 = $29;
    $151 = $24;
    $152 = (($150) + ($151)|0);
    HEAP8[$152>>0] = $149;
    break;
   }
   case 1:  {
    $153 = $10;
    $154 = $24;
    $155 = (($153) + ($154)|0);
    $156 = HEAP8[$155>>0]|0;
    $157 = $29;
    $158 = $24;
    $159 = (($157) + ($158)|0);
    HEAP8[$159>>0] = $156;
    break;
   }
   case 2:  {
    $160 = $10;
    $161 = $24;
    $162 = (($160) + ($161)|0);
    $163 = HEAP8[$162>>0]|0;
    $164 = $163&255;
    $165 = $30;
    $166 = $24;
    $167 = (($165) + ($166)|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = $168&255;
    $170 = (($164) + ($169))|0;
    $171 = $170 & 255;
    $172 = $171&255;
    $173 = $29;
    $174 = $24;
    $175 = (($173) + ($174)|0);
    HEAP8[$175>>0] = $172;
    break;
   }
   case 3:  {
    $176 = $10;
    $177 = $24;
    $178 = (($176) + ($177)|0);
    $179 = HEAP8[$178>>0]|0;
    $180 = $179&255;
    $181 = $30;
    $182 = $24;
    $183 = (($181) + ($182)|0);
    $184 = HEAP8[$183>>0]|0;
    $185 = $184&255;
    $186 = $185 >> 1;
    $187 = (($180) + ($186))|0;
    $188 = $187 & 255;
    $189 = $188&255;
    $190 = $29;
    $191 = $24;
    $192 = (($190) + ($191)|0);
    HEAP8[$192>>0] = $189;
    break;
   }
   case 4:  {
    $193 = $10;
    $194 = $24;
    $195 = (($193) + ($194)|0);
    $196 = HEAP8[$195>>0]|0;
    $197 = $196&255;
    $198 = $30;
    $199 = $24;
    $200 = (($198) + ($199)|0);
    $201 = HEAP8[$200>>0]|0;
    $202 = $201&255;
    $203 = (_stbi__paeth(0,$202,0)|0);
    $204 = (($197) + ($203))|0;
    $205 = $204 & 255;
    $206 = $205&255;
    $207 = $29;
    $208 = $24;
    $209 = (($207) + ($208)|0);
    HEAP8[$209>>0] = $206;
    break;
   }
   case 5:  {
    $210 = $10;
    $211 = $24;
    $212 = (($210) + ($211)|0);
    $213 = HEAP8[$212>>0]|0;
    $214 = $29;
    $215 = $24;
    $216 = (($214) + ($215)|0);
    HEAP8[$216>>0] = $213;
    break;
   }
   case 6:  {
    $217 = $10;
    $218 = $24;
    $219 = (($217) + ($218)|0);
    $220 = HEAP8[$219>>0]|0;
    $221 = $29;
    $222 = $24;
    $223 = (($221) + ($222)|0);
    HEAP8[$223>>0] = $220;
    break;
   }
   default: {
   }
   }
   $224 = $24;
   $225 = (($224) + 1)|0;
   $24 = $225;
  }
  $226 = $15;
  $227 = ($226|0)==(8);
  do {
   if ($227) {
    $228 = $25;
    $229 = $12;
    $230 = ($228|0)!=($229|0);
    if ($230) {
     $231 = $29;
     $232 = $25;
     $233 = (($231) + ($232)|0);
     HEAP8[$233>>0] = -1;
    }
    $234 = $25;
    $235 = $10;
    $236 = (($235) + ($234)|0);
    $10 = $236;
    $237 = $12;
    $238 = $29;
    $239 = (($238) + ($237)|0);
    $29 = $239;
    $240 = $12;
    $241 = $30;
    $242 = (($241) + ($240)|0);
    $30 = $242;
   } else {
    $243 = $15;
    $244 = ($243|0)==(16);
    if (!($244)) {
     $264 = $10;
     $265 = ((($264)) + 1|0);
     $10 = $265;
     $266 = $29;
     $267 = ((($266)) + 1|0);
     $29 = $267;
     $268 = $30;
     $269 = ((($268)) + 1|0);
     $30 = $269;
     break;
    }
    $245 = $25;
    $246 = $12;
    $247 = ($245|0)!=($246|0);
    if ($247) {
     $248 = $29;
     $249 = $27;
     $250 = (($248) + ($249)|0);
     HEAP8[$250>>0] = -1;
     $251 = $29;
     $252 = $27;
     $253 = (($252) + 1)|0;
     $254 = (($251) + ($253)|0);
     HEAP8[$254>>0] = -1;
    }
    $255 = $27;
    $256 = $10;
    $257 = (($256) + ($255)|0);
    $10 = $257;
    $258 = $26;
    $259 = $29;
    $260 = (($259) + ($258)|0);
    $29 = $260;
    $261 = $26;
    $262 = $30;
    $263 = (($262) + ($261)|0);
    $30 = $263;
   }
  } while(0);
  $270 = $15;
  $271 = ($270|0)<(8);
  L54: do {
   if ($271) {
    label = 42;
   } else {
    $272 = $25;
    $273 = $12;
    $274 = ($272|0)==($273|0);
    if ($274) {
     label = 42;
    } else {
     $444 = $25;
     $445 = (($444) + 1)|0;
     $446 = $12;
     $447 = ($445|0)==($446|0);
     if (!($447)) {
      label = 64;
      break L17;
     }
     $448 = $31;
     L58: do {
      switch ($448|0) {
      case 0:  {
       $449 = $13;
       $450 = (($449) - 1)|0;
       $19 = $450;
       while(1) {
        $451 = $19;
        $452 = ($451>>>0)>=(1);
        if (!($452)) {
         break L58;
        }
        $24 = 0;
        while(1) {
         $453 = $24;
         $454 = $27;
         $455 = ($453|0)<($454|0);
         if (!($455)) {
          break;
         }
         $456 = $10;
         $457 = $24;
         $458 = (($456) + ($457)|0);
         $459 = HEAP8[$458>>0]|0;
         $460 = $29;
         $461 = $24;
         $462 = (($460) + ($461)|0);
         HEAP8[$462>>0] = $459;
         $463 = $24;
         $464 = (($463) + 1)|0;
         $24 = $464;
        }
        $465 = $19;
        $466 = (($465) + -1)|0;
        $19 = $466;
        $467 = $29;
        $468 = $27;
        $469 = (($467) + ($468)|0);
        HEAP8[$469>>0] = -1;
        $470 = $27;
        $471 = $10;
        $472 = (($471) + ($470)|0);
        $10 = $472;
        $473 = $26;
        $474 = $29;
        $475 = (($474) + ($473)|0);
        $29 = $475;
        $476 = $26;
        $477 = $30;
        $478 = (($477) + ($476)|0);
        $30 = $478;
       }
       break;
      }
      case 1:  {
       $479 = $13;
       $480 = (($479) - 1)|0;
       $19 = $480;
       while(1) {
        $481 = $19;
        $482 = ($481>>>0)>=(1);
        if (!($482)) {
         break L58;
        }
        $24 = 0;
        while(1) {
         $483 = $24;
         $484 = $27;
         $485 = ($483|0)<($484|0);
         if (!($485)) {
          break;
         }
         $486 = $10;
         $487 = $24;
         $488 = (($486) + ($487)|0);
         $489 = HEAP8[$488>>0]|0;
         $490 = $489&255;
         $491 = $29;
         $492 = $24;
         $493 = $26;
         $494 = (($492) - ($493))|0;
         $495 = (($491) + ($494)|0);
         $496 = HEAP8[$495>>0]|0;
         $497 = $496&255;
         $498 = (($490) + ($497))|0;
         $499 = $498 & 255;
         $500 = $499&255;
         $501 = $29;
         $502 = $24;
         $503 = (($501) + ($502)|0);
         HEAP8[$503>>0] = $500;
         $504 = $24;
         $505 = (($504) + 1)|0;
         $24 = $505;
        }
        $506 = $19;
        $507 = (($506) + -1)|0;
        $19 = $507;
        $508 = $29;
        $509 = $27;
        $510 = (($508) + ($509)|0);
        HEAP8[$510>>0] = -1;
        $511 = $27;
        $512 = $10;
        $513 = (($512) + ($511)|0);
        $10 = $513;
        $514 = $26;
        $515 = $29;
        $516 = (($515) + ($514)|0);
        $29 = $516;
        $517 = $26;
        $518 = $30;
        $519 = (($518) + ($517)|0);
        $30 = $519;
       }
       break;
      }
      case 2:  {
       $520 = $13;
       $521 = (($520) - 1)|0;
       $19 = $521;
       while(1) {
        $522 = $19;
        $523 = ($522>>>0)>=(1);
        if (!($523)) {
         break L58;
        }
        $24 = 0;
        while(1) {
         $524 = $24;
         $525 = $27;
         $526 = ($524|0)<($525|0);
         if (!($526)) {
          break;
         }
         $527 = $10;
         $528 = $24;
         $529 = (($527) + ($528)|0);
         $530 = HEAP8[$529>>0]|0;
         $531 = $530&255;
         $532 = $30;
         $533 = $24;
         $534 = (($532) + ($533)|0);
         $535 = HEAP8[$534>>0]|0;
         $536 = $535&255;
         $537 = (($531) + ($536))|0;
         $538 = $537 & 255;
         $539 = $538&255;
         $540 = $29;
         $541 = $24;
         $542 = (($540) + ($541)|0);
         HEAP8[$542>>0] = $539;
         $543 = $24;
         $544 = (($543) + 1)|0;
         $24 = $544;
        }
        $545 = $19;
        $546 = (($545) + -1)|0;
        $19 = $546;
        $547 = $29;
        $548 = $27;
        $549 = (($547) + ($548)|0);
        HEAP8[$549>>0] = -1;
        $550 = $27;
        $551 = $10;
        $552 = (($551) + ($550)|0);
        $10 = $552;
        $553 = $26;
        $554 = $29;
        $555 = (($554) + ($553)|0);
        $29 = $555;
        $556 = $26;
        $557 = $30;
        $558 = (($557) + ($556)|0);
        $30 = $558;
       }
       break;
      }
      case 3:  {
       $559 = $13;
       $560 = (($559) - 1)|0;
       $19 = $560;
       while(1) {
        $561 = $19;
        $562 = ($561>>>0)>=(1);
        if (!($562)) {
         break L58;
        }
        $24 = 0;
        while(1) {
         $563 = $24;
         $564 = $27;
         $565 = ($563|0)<($564|0);
         if (!($565)) {
          break;
         }
         $566 = $10;
         $567 = $24;
         $568 = (($566) + ($567)|0);
         $569 = HEAP8[$568>>0]|0;
         $570 = $569&255;
         $571 = $30;
         $572 = $24;
         $573 = (($571) + ($572)|0);
         $574 = HEAP8[$573>>0]|0;
         $575 = $574&255;
         $576 = $29;
         $577 = $24;
         $578 = $26;
         $579 = (($577) - ($578))|0;
         $580 = (($576) + ($579)|0);
         $581 = HEAP8[$580>>0]|0;
         $582 = $581&255;
         $583 = (($575) + ($582))|0;
         $584 = $583 >> 1;
         $585 = (($570) + ($584))|0;
         $586 = $585 & 255;
         $587 = $586&255;
         $588 = $29;
         $589 = $24;
         $590 = (($588) + ($589)|0);
         HEAP8[$590>>0] = $587;
         $591 = $24;
         $592 = (($591) + 1)|0;
         $24 = $592;
        }
        $593 = $19;
        $594 = (($593) + -1)|0;
        $19 = $594;
        $595 = $29;
        $596 = $27;
        $597 = (($595) + ($596)|0);
        HEAP8[$597>>0] = -1;
        $598 = $27;
        $599 = $10;
        $600 = (($599) + ($598)|0);
        $10 = $600;
        $601 = $26;
        $602 = $29;
        $603 = (($602) + ($601)|0);
        $29 = $603;
        $604 = $26;
        $605 = $30;
        $606 = (($605) + ($604)|0);
        $30 = $606;
       }
       break;
      }
      case 4:  {
       $607 = $13;
       $608 = (($607) - 1)|0;
       $19 = $608;
       while(1) {
        $609 = $19;
        $610 = ($609>>>0)>=(1);
        if (!($610)) {
         break L58;
        }
        $24 = 0;
        while(1) {
         $611 = $24;
         $612 = $27;
         $613 = ($611|0)<($612|0);
         if (!($613)) {
          break;
         }
         $614 = $10;
         $615 = $24;
         $616 = (($614) + ($615)|0);
         $617 = HEAP8[$616>>0]|0;
         $618 = $617&255;
         $619 = $29;
         $620 = $24;
         $621 = $26;
         $622 = (($620) - ($621))|0;
         $623 = (($619) + ($622)|0);
         $624 = HEAP8[$623>>0]|0;
         $625 = $624&255;
         $626 = $30;
         $627 = $24;
         $628 = (($626) + ($627)|0);
         $629 = HEAP8[$628>>0]|0;
         $630 = $629&255;
         $631 = $30;
         $632 = $24;
         $633 = $26;
         $634 = (($632) - ($633))|0;
         $635 = (($631) + ($634)|0);
         $636 = HEAP8[$635>>0]|0;
         $637 = $636&255;
         $638 = (_stbi__paeth($625,$630,$637)|0);
         $639 = (($618) + ($638))|0;
         $640 = $639 & 255;
         $641 = $640&255;
         $642 = $29;
         $643 = $24;
         $644 = (($642) + ($643)|0);
         HEAP8[$644>>0] = $641;
         $645 = $24;
         $646 = (($645) + 1)|0;
         $24 = $646;
        }
        $647 = $19;
        $648 = (($647) + -1)|0;
        $19 = $648;
        $649 = $29;
        $650 = $27;
        $651 = (($649) + ($650)|0);
        HEAP8[$651>>0] = -1;
        $652 = $27;
        $653 = $10;
        $654 = (($653) + ($652)|0);
        $10 = $654;
        $655 = $26;
        $656 = $29;
        $657 = (($656) + ($655)|0);
        $29 = $657;
        $658 = $26;
        $659 = $30;
        $660 = (($659) + ($658)|0);
        $30 = $660;
       }
       break;
      }
      case 5:  {
       $661 = $13;
       $662 = (($661) - 1)|0;
       $19 = $662;
       while(1) {
        $663 = $19;
        $664 = ($663>>>0)>=(1);
        if (!($664)) {
         break L58;
        }
        $24 = 0;
        while(1) {
         $665 = $24;
         $666 = $27;
         $667 = ($665|0)<($666|0);
         if (!($667)) {
          break;
         }
         $668 = $10;
         $669 = $24;
         $670 = (($668) + ($669)|0);
         $671 = HEAP8[$670>>0]|0;
         $672 = $671&255;
         $673 = $29;
         $674 = $24;
         $675 = $26;
         $676 = (($674) - ($675))|0;
         $677 = (($673) + ($676)|0);
         $678 = HEAP8[$677>>0]|0;
         $679 = $678&255;
         $680 = $679 >> 1;
         $681 = (($672) + ($680))|0;
         $682 = $681 & 255;
         $683 = $682&255;
         $684 = $29;
         $685 = $24;
         $686 = (($684) + ($685)|0);
         HEAP8[$686>>0] = $683;
         $687 = $24;
         $688 = (($687) + 1)|0;
         $24 = $688;
        }
        $689 = $19;
        $690 = (($689) + -1)|0;
        $19 = $690;
        $691 = $29;
        $692 = $27;
        $693 = (($691) + ($692)|0);
        HEAP8[$693>>0] = -1;
        $694 = $27;
        $695 = $10;
        $696 = (($695) + ($694)|0);
        $10 = $696;
        $697 = $26;
        $698 = $29;
        $699 = (($698) + ($697)|0);
        $29 = $699;
        $700 = $26;
        $701 = $30;
        $702 = (($701) + ($700)|0);
        $30 = $702;
       }
       break;
      }
      case 6:  {
       $703 = $13;
       $704 = (($703) - 1)|0;
       $19 = $704;
       while(1) {
        $705 = $19;
        $706 = ($705>>>0)>=(1);
        if (!($706)) {
         break L58;
        }
        $24 = 0;
        while(1) {
         $707 = $24;
         $708 = $27;
         $709 = ($707|0)<($708|0);
         if (!($709)) {
          break;
         }
         $710 = $10;
         $711 = $24;
         $712 = (($710) + ($711)|0);
         $713 = HEAP8[$712>>0]|0;
         $714 = $713&255;
         $715 = $29;
         $716 = $24;
         $717 = $26;
         $718 = (($716) - ($717))|0;
         $719 = (($715) + ($718)|0);
         $720 = HEAP8[$719>>0]|0;
         $721 = $720&255;
         $722 = (_stbi__paeth($721,0,0)|0);
         $723 = (($714) + ($722))|0;
         $724 = $723 & 255;
         $725 = $724&255;
         $726 = $29;
         $727 = $24;
         $728 = (($726) + ($727)|0);
         HEAP8[$728>>0] = $725;
         $729 = $24;
         $730 = (($729) + 1)|0;
         $24 = $730;
        }
        $731 = $19;
        $732 = (($731) + -1)|0;
        $19 = $732;
        $733 = $29;
        $734 = $27;
        $735 = (($733) + ($734)|0);
        HEAP8[$735>>0] = -1;
        $736 = $27;
        $737 = $10;
        $738 = (($737) + ($736)|0);
        $10 = $738;
        $739 = $26;
        $740 = $29;
        $741 = (($740) + ($739)|0);
        $29 = $741;
        $742 = $26;
        $743 = $30;
        $744 = (($743) + ($742)|0);
        $30 = $744;
       }
       break;
      }
      default: {
      }
      }
     } while(0);
     $745 = $15;
     $746 = ($745|0)==(16);
     if ($746) {
      $747 = $9;
      $748 = ((($747)) + 12|0);
      $749 = HEAP32[$748>>2]|0;
      $750 = $21;
      $751 = $20;
      $752 = Math_imul($750, $751)|0;
      $753 = (($749) + ($752)|0);
      $29 = $753;
      $19 = 0;
      while(1) {
       $754 = $19;
       $755 = $13;
       $756 = ($754>>>0)<($755>>>0);
       if (!($756)) {
        break L54;
       }
       $757 = $29;
       $758 = $27;
       $759 = (($758) + 1)|0;
       $760 = (($757) + ($759)|0);
       HEAP8[$760>>0] = -1;
       $761 = $19;
       $762 = (($761) + 1)|0;
       $19 = $762;
       $763 = $26;
       $764 = $29;
       $765 = (($764) + ($763)|0);
       $29 = $765;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 42) {
   label = 0;
   $275 = $28;
   $276 = (($275) - 1)|0;
   $277 = $27;
   $278 = Math_imul($276, $277)|0;
   $32 = $278;
   $279 = $31;
   L122: do {
    switch ($279|0) {
    case 0:  {
     $280 = $29;
     $281 = $10;
     $282 = $32;
     _memcpy(($280|0),($281|0),($282|0))|0;
     break;
    }
    case 1:  {
     $24 = 0;
     while(1) {
      $283 = $24;
      $284 = $32;
      $285 = ($283|0)<($284|0);
      if (!($285)) {
       break L122;
      }
      $286 = $10;
      $287 = $24;
      $288 = (($286) + ($287)|0);
      $289 = HEAP8[$288>>0]|0;
      $290 = $289&255;
      $291 = $29;
      $292 = $24;
      $293 = $27;
      $294 = (($292) - ($293))|0;
      $295 = (($291) + ($294)|0);
      $296 = HEAP8[$295>>0]|0;
      $297 = $296&255;
      $298 = (($290) + ($297))|0;
      $299 = $298 & 255;
      $300 = $299&255;
      $301 = $29;
      $302 = $24;
      $303 = (($301) + ($302)|0);
      HEAP8[$303>>0] = $300;
      $304 = $24;
      $305 = (($304) + 1)|0;
      $24 = $305;
     }
     break;
    }
    case 2:  {
     $24 = 0;
     while(1) {
      $306 = $24;
      $307 = $32;
      $308 = ($306|0)<($307|0);
      if (!($308)) {
       break L122;
      }
      $309 = $10;
      $310 = $24;
      $311 = (($309) + ($310)|0);
      $312 = HEAP8[$311>>0]|0;
      $313 = $312&255;
      $314 = $30;
      $315 = $24;
      $316 = (($314) + ($315)|0);
      $317 = HEAP8[$316>>0]|0;
      $318 = $317&255;
      $319 = (($313) + ($318))|0;
      $320 = $319 & 255;
      $321 = $320&255;
      $322 = $29;
      $323 = $24;
      $324 = (($322) + ($323)|0);
      HEAP8[$324>>0] = $321;
      $325 = $24;
      $326 = (($325) + 1)|0;
      $24 = $326;
     }
     break;
    }
    case 3:  {
     $24 = 0;
     while(1) {
      $327 = $24;
      $328 = $32;
      $329 = ($327|0)<($328|0);
      if (!($329)) {
       break L122;
      }
      $330 = $10;
      $331 = $24;
      $332 = (($330) + ($331)|0);
      $333 = HEAP8[$332>>0]|0;
      $334 = $333&255;
      $335 = $30;
      $336 = $24;
      $337 = (($335) + ($336)|0);
      $338 = HEAP8[$337>>0]|0;
      $339 = $338&255;
      $340 = $29;
      $341 = $24;
      $342 = $27;
      $343 = (($341) - ($342))|0;
      $344 = (($340) + ($343)|0);
      $345 = HEAP8[$344>>0]|0;
      $346 = $345&255;
      $347 = (($339) + ($346))|0;
      $348 = $347 >> 1;
      $349 = (($334) + ($348))|0;
      $350 = $349 & 255;
      $351 = $350&255;
      $352 = $29;
      $353 = $24;
      $354 = (($352) + ($353)|0);
      HEAP8[$354>>0] = $351;
      $355 = $24;
      $356 = (($355) + 1)|0;
      $24 = $356;
     }
     break;
    }
    case 4:  {
     $24 = 0;
     while(1) {
      $357 = $24;
      $358 = $32;
      $359 = ($357|0)<($358|0);
      if (!($359)) {
       break L122;
      }
      $360 = $10;
      $361 = $24;
      $362 = (($360) + ($361)|0);
      $363 = HEAP8[$362>>0]|0;
      $364 = $363&255;
      $365 = $29;
      $366 = $24;
      $367 = $27;
      $368 = (($366) - ($367))|0;
      $369 = (($365) + ($368)|0);
      $370 = HEAP8[$369>>0]|0;
      $371 = $370&255;
      $372 = $30;
      $373 = $24;
      $374 = (($372) + ($373)|0);
      $375 = HEAP8[$374>>0]|0;
      $376 = $375&255;
      $377 = $30;
      $378 = $24;
      $379 = $27;
      $380 = (($378) - ($379))|0;
      $381 = (($377) + ($380)|0);
      $382 = HEAP8[$381>>0]|0;
      $383 = $382&255;
      $384 = (_stbi__paeth($371,$376,$383)|0);
      $385 = (($364) + ($384))|0;
      $386 = $385 & 255;
      $387 = $386&255;
      $388 = $29;
      $389 = $24;
      $390 = (($388) + ($389)|0);
      HEAP8[$390>>0] = $387;
      $391 = $24;
      $392 = (($391) + 1)|0;
      $24 = $392;
     }
     break;
    }
    case 5:  {
     $24 = 0;
     while(1) {
      $393 = $24;
      $394 = $32;
      $395 = ($393|0)<($394|0);
      if (!($395)) {
       break L122;
      }
      $396 = $10;
      $397 = $24;
      $398 = (($396) + ($397)|0);
      $399 = HEAP8[$398>>0]|0;
      $400 = $399&255;
      $401 = $29;
      $402 = $24;
      $403 = $27;
      $404 = (($402) - ($403))|0;
      $405 = (($401) + ($404)|0);
      $406 = HEAP8[$405>>0]|0;
      $407 = $406&255;
      $408 = $407 >> 1;
      $409 = (($400) + ($408))|0;
      $410 = $409 & 255;
      $411 = $410&255;
      $412 = $29;
      $413 = $24;
      $414 = (($412) + ($413)|0);
      HEAP8[$414>>0] = $411;
      $415 = $24;
      $416 = (($415) + 1)|0;
      $24 = $416;
     }
     break;
    }
    case 6:  {
     $24 = 0;
     while(1) {
      $417 = $24;
      $418 = $32;
      $419 = ($417|0)<($418|0);
      if (!($419)) {
       break L122;
      }
      $420 = $10;
      $421 = $24;
      $422 = (($420) + ($421)|0);
      $423 = HEAP8[$422>>0]|0;
      $424 = $423&255;
      $425 = $29;
      $426 = $24;
      $427 = $27;
      $428 = (($426) - ($427))|0;
      $429 = (($425) + ($428)|0);
      $430 = HEAP8[$429>>0]|0;
      $431 = $430&255;
      $432 = (_stbi__paeth($431,0,0)|0);
      $433 = (($424) + ($432))|0;
      $434 = $433 & 255;
      $435 = $434&255;
      $436 = $29;
      $437 = $24;
      $438 = (($436) + ($437)|0);
      HEAP8[$438>>0] = $435;
      $439 = $24;
      $440 = (($439) + 1)|0;
      $24 = $440;
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $441 = $32;
   $442 = $10;
   $443 = (($442) + ($441)|0);
   $10 = $443;
  }
  $766 = $20;
  $767 = (($766) + 1)|0;
  $20 = $767;
 }
 if ((label|0) == 13) {
  $118 = (_stbi__err(6042)|0);
  $8 = $118;
  $1233 = $8;
  STACKTOP = sp;return ($1233|0);
 }
 else if ((label|0) == 16) {
  ___assert_fail((6057|0),(4971|0),4365,(5997|0));
  // unreachable;
 }
 else if ((label|0) == 64) {
  ___assert_fail((6083|0),(4971|0),4427,(5997|0));
  // unreachable;
 }
 else if ((label|0) == 113) {
  $768 = $15;
  $769 = ($768|0)<(8);
  L152: do {
   if ($769) {
    $20 = 0;
    L154: while(1) {
     $770 = $20;
     $771 = $14;
     $772 = ($770>>>0)<($771>>>0);
     if (!($772)) {
      break L152;
     }
     $773 = $9;
     $774 = ((($773)) + 12|0);
     $775 = HEAP32[$774>>2]|0;
     $776 = $21;
     $777 = $20;
     $778 = Math_imul($776, $777)|0;
     $779 = (($775) + ($778)|0);
     $33 = $779;
     $780 = $9;
     $781 = ((($780)) + 12|0);
     $782 = HEAP32[$781>>2]|0;
     $783 = $21;
     $784 = $20;
     $785 = Math_imul($783, $784)|0;
     $786 = (($782) + ($785)|0);
     $787 = $13;
     $788 = $12;
     $789 = Math_imul($787, $788)|0;
     $790 = (($786) + ($789)|0);
     $791 = $23;
     $792 = (0 - ($791))|0;
     $793 = (($790) + ($792)|0);
     $34 = $793;
     $794 = $16;
     $795 = ($794|0)==(0);
     if ($795) {
      $796 = $15;
      $797 = (5921 + ($796)|0);
      $798 = HEAP8[$797>>0]|0;
      $799 = $798&255;
      $801 = $799;
     } else {
      $801 = 1;
     }
     $800 = $801&255;
     $35 = $800;
     $802 = $15;
     $803 = ($802|0)==(4);
     do {
      if ($803) {
       $804 = $13;
       $805 = $25;
       $806 = Math_imul($804, $805)|0;
       $24 = $806;
       while(1) {
        $807 = $24;
        $808 = ($807|0)>=(2);
        if (!($808)) {
         break;
        }
        $809 = $35;
        $810 = $809&255;
        $811 = $34;
        $812 = HEAP8[$811>>0]|0;
        $813 = $812&255;
        $814 = $813 >> 4;
        $815 = Math_imul($810, $814)|0;
        $816 = $815&255;
        $817 = $33;
        $818 = ((($817)) + 1|0);
        $33 = $818;
        HEAP8[$817>>0] = $816;
        $819 = $35;
        $820 = $819&255;
        $821 = $34;
        $822 = HEAP8[$821>>0]|0;
        $823 = $822&255;
        $824 = $823 & 15;
        $825 = Math_imul($820, $824)|0;
        $826 = $825&255;
        $827 = $33;
        $828 = ((($827)) + 1|0);
        $33 = $828;
        HEAP8[$827>>0] = $826;
        $829 = $24;
        $830 = (($829) - 2)|0;
        $24 = $830;
        $831 = $34;
        $832 = ((($831)) + 1|0);
        $34 = $832;
       }
       $833 = $24;
       $834 = ($833|0)>(0);
       if ($834) {
        $835 = $35;
        $836 = $835&255;
        $837 = $34;
        $838 = HEAP8[$837>>0]|0;
        $839 = $838&255;
        $840 = $839 >> 4;
        $841 = Math_imul($836, $840)|0;
        $842 = $841&255;
        $843 = $33;
        $844 = ((($843)) + 1|0);
        $33 = $844;
        HEAP8[$843>>0] = $842;
       }
      } else {
       $845 = $15;
       $846 = ($845|0)==(2);
       if ($846) {
        $847 = $13;
        $848 = $25;
        $849 = Math_imul($847, $848)|0;
        $24 = $849;
        while(1) {
         $850 = $24;
         $851 = ($850|0)>=(4);
         if (!($851)) {
          break;
         }
         $852 = $35;
         $853 = $852&255;
         $854 = $34;
         $855 = HEAP8[$854>>0]|0;
         $856 = $855&255;
         $857 = $856 >> 6;
         $858 = Math_imul($853, $857)|0;
         $859 = $858&255;
         $860 = $33;
         $861 = ((($860)) + 1|0);
         $33 = $861;
         HEAP8[$860>>0] = $859;
         $862 = $35;
         $863 = $862&255;
         $864 = $34;
         $865 = HEAP8[$864>>0]|0;
         $866 = $865&255;
         $867 = $866 >> 4;
         $868 = $867 & 3;
         $869 = Math_imul($863, $868)|0;
         $870 = $869&255;
         $871 = $33;
         $872 = ((($871)) + 1|0);
         $33 = $872;
         HEAP8[$871>>0] = $870;
         $873 = $35;
         $874 = $873&255;
         $875 = $34;
         $876 = HEAP8[$875>>0]|0;
         $877 = $876&255;
         $878 = $877 >> 2;
         $879 = $878 & 3;
         $880 = Math_imul($874, $879)|0;
         $881 = $880&255;
         $882 = $33;
         $883 = ((($882)) + 1|0);
         $33 = $883;
         HEAP8[$882>>0] = $881;
         $884 = $35;
         $885 = $884&255;
         $886 = $34;
         $887 = HEAP8[$886>>0]|0;
         $888 = $887&255;
         $889 = $888 & 3;
         $890 = Math_imul($885, $889)|0;
         $891 = $890&255;
         $892 = $33;
         $893 = ((($892)) + 1|0);
         $33 = $893;
         HEAP8[$892>>0] = $891;
         $894 = $24;
         $895 = (($894) - 4)|0;
         $24 = $895;
         $896 = $34;
         $897 = ((($896)) + 1|0);
         $34 = $897;
        }
        $898 = $24;
        $899 = ($898|0)>(0);
        if ($899) {
         $900 = $35;
         $901 = $900&255;
         $902 = $34;
         $903 = HEAP8[$902>>0]|0;
         $904 = $903&255;
         $905 = $904 >> 6;
         $906 = Math_imul($901, $905)|0;
         $907 = $906&255;
         $908 = $33;
         $909 = ((($908)) + 1|0);
         $33 = $909;
         HEAP8[$908>>0] = $907;
        }
        $910 = $24;
        $911 = ($910|0)>(1);
        if ($911) {
         $912 = $35;
         $913 = $912&255;
         $914 = $34;
         $915 = HEAP8[$914>>0]|0;
         $916 = $915&255;
         $917 = $916 >> 4;
         $918 = $917 & 3;
         $919 = Math_imul($913, $918)|0;
         $920 = $919&255;
         $921 = $33;
         $922 = ((($921)) + 1|0);
         $33 = $922;
         HEAP8[$921>>0] = $920;
        }
        $923 = $24;
        $924 = ($923|0)>(2);
        if (!($924)) {
         break;
        }
        $925 = $35;
        $926 = $925&255;
        $927 = $34;
        $928 = HEAP8[$927>>0]|0;
        $929 = $928&255;
        $930 = $929 >> 2;
        $931 = $930 & 3;
        $932 = Math_imul($926, $931)|0;
        $933 = $932&255;
        $934 = $33;
        $935 = ((($934)) + 1|0);
        $33 = $935;
        HEAP8[$934>>0] = $933;
        break;
       }
       $936 = $15;
       $937 = ($936|0)==(1);
       if ($937) {
        $938 = $13;
        $939 = $25;
        $940 = Math_imul($938, $939)|0;
        $24 = $940;
        while(1) {
         $941 = $24;
         $942 = ($941|0)>=(8);
         if (!($942)) {
          break;
         }
         $943 = $35;
         $944 = $943&255;
         $945 = $34;
         $946 = HEAP8[$945>>0]|0;
         $947 = $946&255;
         $948 = $947 >> 7;
         $949 = Math_imul($944, $948)|0;
         $950 = $949&255;
         $951 = $33;
         $952 = ((($951)) + 1|0);
         $33 = $952;
         HEAP8[$951>>0] = $950;
         $953 = $35;
         $954 = $953&255;
         $955 = $34;
         $956 = HEAP8[$955>>0]|0;
         $957 = $956&255;
         $958 = $957 >> 6;
         $959 = $958 & 1;
         $960 = Math_imul($954, $959)|0;
         $961 = $960&255;
         $962 = $33;
         $963 = ((($962)) + 1|0);
         $33 = $963;
         HEAP8[$962>>0] = $961;
         $964 = $35;
         $965 = $964&255;
         $966 = $34;
         $967 = HEAP8[$966>>0]|0;
         $968 = $967&255;
         $969 = $968 >> 5;
         $970 = $969 & 1;
         $971 = Math_imul($965, $970)|0;
         $972 = $971&255;
         $973 = $33;
         $974 = ((($973)) + 1|0);
         $33 = $974;
         HEAP8[$973>>0] = $972;
         $975 = $35;
         $976 = $975&255;
         $977 = $34;
         $978 = HEAP8[$977>>0]|0;
         $979 = $978&255;
         $980 = $979 >> 4;
         $981 = $980 & 1;
         $982 = Math_imul($976, $981)|0;
         $983 = $982&255;
         $984 = $33;
         $985 = ((($984)) + 1|0);
         $33 = $985;
         HEAP8[$984>>0] = $983;
         $986 = $35;
         $987 = $986&255;
         $988 = $34;
         $989 = HEAP8[$988>>0]|0;
         $990 = $989&255;
         $991 = $990 >> 3;
         $992 = $991 & 1;
         $993 = Math_imul($987, $992)|0;
         $994 = $993&255;
         $995 = $33;
         $996 = ((($995)) + 1|0);
         $33 = $996;
         HEAP8[$995>>0] = $994;
         $997 = $35;
         $998 = $997&255;
         $999 = $34;
         $1000 = HEAP8[$999>>0]|0;
         $1001 = $1000&255;
         $1002 = $1001 >> 2;
         $1003 = $1002 & 1;
         $1004 = Math_imul($998, $1003)|0;
         $1005 = $1004&255;
         $1006 = $33;
         $1007 = ((($1006)) + 1|0);
         $33 = $1007;
         HEAP8[$1006>>0] = $1005;
         $1008 = $35;
         $1009 = $1008&255;
         $1010 = $34;
         $1011 = HEAP8[$1010>>0]|0;
         $1012 = $1011&255;
         $1013 = $1012 >> 1;
         $1014 = $1013 & 1;
         $1015 = Math_imul($1009, $1014)|0;
         $1016 = $1015&255;
         $1017 = $33;
         $1018 = ((($1017)) + 1|0);
         $33 = $1018;
         HEAP8[$1017>>0] = $1016;
         $1019 = $35;
         $1020 = $1019&255;
         $1021 = $34;
         $1022 = HEAP8[$1021>>0]|0;
         $1023 = $1022&255;
         $1024 = $1023 & 1;
         $1025 = Math_imul($1020, $1024)|0;
         $1026 = $1025&255;
         $1027 = $33;
         $1028 = ((($1027)) + 1|0);
         $33 = $1028;
         HEAP8[$1027>>0] = $1026;
         $1029 = $24;
         $1030 = (($1029) - 8)|0;
         $24 = $1030;
         $1031 = $34;
         $1032 = ((($1031)) + 1|0);
         $34 = $1032;
        }
        $1033 = $24;
        $1034 = ($1033|0)>(0);
        if ($1034) {
         $1035 = $35;
         $1036 = $1035&255;
         $1037 = $34;
         $1038 = HEAP8[$1037>>0]|0;
         $1039 = $1038&255;
         $1040 = $1039 >> 7;
         $1041 = Math_imul($1036, $1040)|0;
         $1042 = $1041&255;
         $1043 = $33;
         $1044 = ((($1043)) + 1|0);
         $33 = $1044;
         HEAP8[$1043>>0] = $1042;
        }
        $1045 = $24;
        $1046 = ($1045|0)>(1);
        if ($1046) {
         $1047 = $35;
         $1048 = $1047&255;
         $1049 = $34;
         $1050 = HEAP8[$1049>>0]|0;
         $1051 = $1050&255;
         $1052 = $1051 >> 6;
         $1053 = $1052 & 1;
         $1054 = Math_imul($1048, $1053)|0;
         $1055 = $1054&255;
         $1056 = $33;
         $1057 = ((($1056)) + 1|0);
         $33 = $1057;
         HEAP8[$1056>>0] = $1055;
        }
        $1058 = $24;
        $1059 = ($1058|0)>(2);
        if ($1059) {
         $1060 = $35;
         $1061 = $1060&255;
         $1062 = $34;
         $1063 = HEAP8[$1062>>0]|0;
         $1064 = $1063&255;
         $1065 = $1064 >> 5;
         $1066 = $1065 & 1;
         $1067 = Math_imul($1061, $1066)|0;
         $1068 = $1067&255;
         $1069 = $33;
         $1070 = ((($1069)) + 1|0);
         $33 = $1070;
         HEAP8[$1069>>0] = $1068;
        }
        $1071 = $24;
        $1072 = ($1071|0)>(3);
        if ($1072) {
         $1073 = $35;
         $1074 = $1073&255;
         $1075 = $34;
         $1076 = HEAP8[$1075>>0]|0;
         $1077 = $1076&255;
         $1078 = $1077 >> 4;
         $1079 = $1078 & 1;
         $1080 = Math_imul($1074, $1079)|0;
         $1081 = $1080&255;
         $1082 = $33;
         $1083 = ((($1082)) + 1|0);
         $33 = $1083;
         HEAP8[$1082>>0] = $1081;
        }
        $1084 = $24;
        $1085 = ($1084|0)>(4);
        if ($1085) {
         $1086 = $35;
         $1087 = $1086&255;
         $1088 = $34;
         $1089 = HEAP8[$1088>>0]|0;
         $1090 = $1089&255;
         $1091 = $1090 >> 3;
         $1092 = $1091 & 1;
         $1093 = Math_imul($1087, $1092)|0;
         $1094 = $1093&255;
         $1095 = $33;
         $1096 = ((($1095)) + 1|0);
         $33 = $1096;
         HEAP8[$1095>>0] = $1094;
        }
        $1097 = $24;
        $1098 = ($1097|0)>(5);
        if ($1098) {
         $1099 = $35;
         $1100 = $1099&255;
         $1101 = $34;
         $1102 = HEAP8[$1101>>0]|0;
         $1103 = $1102&255;
         $1104 = $1103 >> 2;
         $1105 = $1104 & 1;
         $1106 = Math_imul($1100, $1105)|0;
         $1107 = $1106&255;
         $1108 = $33;
         $1109 = ((($1108)) + 1|0);
         $33 = $1109;
         HEAP8[$1108>>0] = $1107;
        }
        $1110 = $24;
        $1111 = ($1110|0)>(6);
        if (!($1111)) {
         break;
        }
        $1112 = $35;
        $1113 = $1112&255;
        $1114 = $34;
        $1115 = HEAP8[$1114>>0]|0;
        $1116 = $1115&255;
        $1117 = $1116 >> 1;
        $1118 = $1117 & 1;
        $1119 = Math_imul($1113, $1118)|0;
        $1120 = $1119&255;
        $1121 = $33;
        $1122 = ((($1121)) + 1|0);
        $33 = $1122;
        HEAP8[$1121>>0] = $1120;
       }
      }
     } while(0);
     $1123 = $25;
     $1124 = $12;
     $1125 = ($1123|0)!=($1124|0);
     L207: do {
      if ($1125) {
       $1126 = $9;
       $1127 = ((($1126)) + 12|0);
       $1128 = HEAP32[$1127>>2]|0;
       $1129 = $21;
       $1130 = $20;
       $1131 = Math_imul($1129, $1130)|0;
       $1132 = (($1128) + ($1131)|0);
       $33 = $1132;
       $1133 = $25;
       $1134 = ($1133|0)==(1);
       if ($1134) {
        $1135 = $13;
        $1136 = (($1135) - 1)|0;
        $36 = $1136;
        while(1) {
         $1137 = $36;
         $1138 = ($1137|0)>=(0);
         if (!($1138)) {
          break L207;
         }
         $1139 = $33;
         $1140 = $36;
         $1141 = $1140<<1;
         $1142 = (($1141) + 1)|0;
         $1143 = (($1139) + ($1142)|0);
         HEAP8[$1143>>0] = -1;
         $1144 = $33;
         $1145 = $36;
         $1146 = (($1144) + ($1145)|0);
         $1147 = HEAP8[$1146>>0]|0;
         $1148 = $33;
         $1149 = $36;
         $1150 = $1149<<1;
         $1151 = (($1150) + 0)|0;
         $1152 = (($1148) + ($1151)|0);
         HEAP8[$1152>>0] = $1147;
         $1153 = $36;
         $1154 = (($1153) + -1)|0;
         $36 = $1154;
        }
       }
       $1155 = $25;
       $1156 = ($1155|0)==(3);
       if (!($1156)) {
        break L154;
       }
       $1157 = $13;
       $1158 = (($1157) - 1)|0;
       $36 = $1158;
       while(1) {
        $1159 = $36;
        $1160 = ($1159|0)>=(0);
        if (!($1160)) {
         break L207;
        }
        $1161 = $33;
        $1162 = $36;
        $1163 = $1162<<2;
        $1164 = (($1163) + 3)|0;
        $1165 = (($1161) + ($1164)|0);
        HEAP8[$1165>>0] = -1;
        $1166 = $33;
        $1167 = $36;
        $1168 = ($1167*3)|0;
        $1169 = (($1168) + 2)|0;
        $1170 = (($1166) + ($1169)|0);
        $1171 = HEAP8[$1170>>0]|0;
        $1172 = $33;
        $1173 = $36;
        $1174 = $1173<<2;
        $1175 = (($1174) + 2)|0;
        $1176 = (($1172) + ($1175)|0);
        HEAP8[$1176>>0] = $1171;
        $1177 = $33;
        $1178 = $36;
        $1179 = ($1178*3)|0;
        $1180 = (($1179) + 1)|0;
        $1181 = (($1177) + ($1180)|0);
        $1182 = HEAP8[$1181>>0]|0;
        $1183 = $33;
        $1184 = $36;
        $1185 = $1184<<2;
        $1186 = (($1185) + 1)|0;
        $1187 = (($1183) + ($1186)|0);
        HEAP8[$1187>>0] = $1182;
        $1188 = $33;
        $1189 = $36;
        $1190 = ($1189*3)|0;
        $1191 = (($1190) + 0)|0;
        $1192 = (($1188) + ($1191)|0);
        $1193 = HEAP8[$1192>>0]|0;
        $1194 = $33;
        $1195 = $36;
        $1196 = $1195<<2;
        $1197 = (($1196) + 0)|0;
        $1198 = (($1194) + ($1197)|0);
        HEAP8[$1198>>0] = $1193;
        $1199 = $36;
        $1200 = (($1199) + -1)|0;
        $36 = $1200;
       }
      }
     } while(0);
     $1201 = $20;
     $1202 = (($1201) + 1)|0;
     $20 = $1202;
    }
    ___assert_fail((6100|0),(4971|0),4516,(5997|0));
    // unreachable;
   } else {
    $1203 = $15;
    $1204 = ($1203|0)==(16);
    if ($1204) {
     $1205 = $9;
     $1206 = ((($1205)) + 12|0);
     $1207 = HEAP32[$1206>>2]|0;
     $37 = $1207;
     $1208 = $37;
     $38 = $1208;
     $19 = 0;
     while(1) {
      $1209 = $19;
      $1210 = $13;
      $1211 = $14;
      $1212 = Math_imul($1210, $1211)|0;
      $1213 = $12;
      $1214 = Math_imul($1212, $1213)|0;
      $1215 = ($1209>>>0)<($1214>>>0);
      if (!($1215)) {
       break L152;
      }
      $1216 = $37;
      $1217 = HEAP8[$1216>>0]|0;
      $1218 = $1217&255;
      $1219 = $1218 << 8;
      $1220 = $37;
      $1221 = ((($1220)) + 1|0);
      $1222 = HEAP8[$1221>>0]|0;
      $1223 = $1222&255;
      $1224 = $1219 | $1223;
      $1225 = $1224&65535;
      $1226 = $38;
      HEAP16[$1226>>1] = $1225;
      $1227 = $19;
      $1228 = (($1227) + 1)|0;
      $19 = $1228;
      $1229 = $38;
      $1230 = ((($1229)) + 2|0);
      $38 = $1230;
      $1231 = $37;
      $1232 = ((($1231)) + 2|0);
      $37 = $1232;
     }
    }
   }
  } while(0);
  $8 = 1;
  $1233 = $8;
  STACKTOP = sp;return ($1233|0);
 }
 return (0)|0;
}
function _stbi__paeth($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 $12 = $5;
 $13 = (($11) + ($12))|0;
 $14 = $6;
 $15 = (($13) - ($14))|0;
 $7 = $15;
 $16 = $7;
 $17 = $4;
 $18 = (($16) - ($17))|0;
 $19 = (Math_abs(($18|0))|0);
 $8 = $19;
 $20 = $7;
 $21 = $5;
 $22 = (($20) - ($21))|0;
 $23 = (Math_abs(($22|0))|0);
 $9 = $23;
 $24 = $7;
 $25 = $6;
 $26 = (($24) - ($25))|0;
 $27 = (Math_abs(($26|0))|0);
 $10 = $27;
 $28 = $8;
 $29 = $9;
 $30 = ($28|0)<=($29|0);
 if ($30) {
  $31 = $8;
  $32 = $10;
  $33 = ($31|0)<=($32|0);
  if ($33) {
   $34 = $4;
   $3 = $34;
   $40 = $3;
   STACKTOP = sp;return ($40|0);
  }
 }
 $35 = $9;
 $36 = $10;
 $37 = ($35|0)<=($36|0);
 if ($37) {
  $38 = $5;
  $3 = $38;
  $40 = $3;
  STACKTOP = sp;return ($40|0);
 } else {
  $39 = $6;
  $3 = $39;
  $40 = $3;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _stbi__compute_y_16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ($6*77)|0;
 $8 = $4;
 $9 = ($8*150)|0;
 $10 = (($7) + ($9))|0;
 $11 = $5;
 $12 = ($11*29)|0;
 $13 = (($10) + ($12))|0;
 $14 = $13 >> 8;
 $15 = $14&65535;
 STACKTOP = sp;return ($15|0);
}
function _stbi__bmp_test_raw($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = (_stbi__get8($5)|0);
 $7 = $6&255;
 $8 = ($7|0)!=(66);
 if ($8) {
  $1 = 0;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 $9 = $2;
 $10 = (_stbi__get8($9)|0);
 $11 = $10&255;
 $12 = ($11|0)!=(77);
 if ($12) {
  $1 = 0;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 $13 = $2;
 (_stbi__get32le($13)|0);
 $14 = $2;
 (_stbi__get16le($14)|0);
 $15 = $2;
 (_stbi__get16le($15)|0);
 $16 = $2;
 (_stbi__get32le($16)|0);
 $17 = $2;
 $18 = (_stbi__get32le($17)|0);
 $4 = $18;
 $19 = $4;
 $20 = ($19|0)==(12);
 $21 = $4;
 $22 = ($21|0)==(40);
 $or$cond = $20 | $22;
 $23 = $4;
 $24 = ($23|0)==(56);
 $or$cond3 = $or$cond | $24;
 $25 = $4;
 $26 = ($25|0)==(108);
 $or$cond5 = $or$cond3 | $26;
 if ($or$cond5) {
  $30 = 1;
 } else {
  $27 = $4;
  $28 = ($27|0)==(124);
  $30 = $28;
 }
 $29 = $30&1;
 $3 = $29;
 $31 = $3;
 $1 = $31;
 $32 = $1;
 STACKTOP = sp;return ($32|0);
}
function _stbi__get32le($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_stbi__get16le($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = $1;
 $7 = (_stbi__get16le($6)|0);
 $8 = $7 << 16;
 $9 = (($5) + ($8))|0;
 STACKTOP = sp;return ($9|0);
}
function _stbi__get16le($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_stbi__get8($3)|0);
 $5 = $4&255;
 $2 = $5;
 $6 = $2;
 $7 = $1;
 $8 = (_stbi__get8($7)|0);
 $9 = $8&255;
 $10 = $9 << 8;
 $11 = (($6) + ($10))|0;
 STACKTOP = sp;return ($11|0);
}
function _stbi__bmp_parse_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (_stbi__get8($8)|0);
 $10 = $9&255;
 $11 = ($10|0)!=(66);
 if (!($11)) {
  $12 = $3;
  $13 = (_stbi__get8($12)|0);
  $14 = $13&255;
  $15 = ($14|0)!=(77);
  if (!($15)) {
   $21 = $3;
   (_stbi__get32le($21)|0);
   $22 = $3;
   (_stbi__get16le($22)|0);
   $23 = $3;
   (_stbi__get16le($23)|0);
   $24 = $3;
   $25 = (_stbi__get32le($24)|0);
   $26 = $4;
   $27 = ((($26)) + 4|0);
   HEAP32[$27>>2] = $25;
   $28 = $3;
   $29 = (_stbi__get32le($28)|0);
   $5 = $29;
   $30 = $4;
   $31 = ((($30)) + 8|0);
   HEAP32[$31>>2] = $29;
   $32 = $4;
   $33 = ((($32)) + 24|0);
   HEAP32[$33>>2] = 0;
   $34 = $4;
   $35 = ((($34)) + 20|0);
   HEAP32[$35>>2] = 0;
   $36 = $4;
   $37 = ((($36)) + 16|0);
   HEAP32[$37>>2] = 0;
   $38 = $4;
   $39 = ((($38)) + 12|0);
   HEAP32[$39>>2] = 0;
   $40 = $5;
   $41 = ($40|0)!=(12);
   $42 = $5;
   $43 = ($42|0)!=(40);
   $or$cond = $41 & $43;
   $44 = $5;
   $45 = ($44|0)!=(56);
   $or$cond3 = $or$cond & $45;
   $46 = $5;
   $47 = ($46|0)!=(108);
   $or$cond5 = $or$cond3 & $47;
   $48 = $5;
   $49 = ($48|0)!=(124);
   $or$cond7 = $or$cond5 & $49;
   if ($or$cond7) {
    $50 = (_stbi__err(6337)|0);
    $51 = ($50|0)!=(0);
    $52 = $51 ? 0 : 0;
    $53 = $52;
    $54 = $53;
    $2 = $54;
    $208 = $2;
    STACKTOP = sp;return ($208|0);
   }
   $55 = $5;
   $56 = ($55|0)==(12);
   $57 = $3;
   if ($56) {
    $58 = (_stbi__get16le($57)|0);
    $59 = $3;
    HEAP32[$59>>2] = $58;
    $60 = $3;
    $61 = (_stbi__get16le($60)|0);
    $62 = $3;
    $63 = ((($62)) + 4|0);
    HEAP32[$63>>2] = $61;
   } else {
    $64 = (_stbi__get32le($57)|0);
    $65 = $3;
    HEAP32[$65>>2] = $64;
    $66 = $3;
    $67 = (_stbi__get32le($66)|0);
    $68 = $3;
    $69 = ((($68)) + 4|0);
    HEAP32[$69>>2] = $67;
   }
   $70 = $3;
   $71 = (_stbi__get16le($70)|0);
   $72 = ($71|0)!=(1);
   if ($72) {
    $73 = (_stbi__err(6349)|0);
    $74 = ($73|0)!=(0);
    $75 = $74 ? 0 : 0;
    $76 = $75;
    $77 = $76;
    $2 = $77;
    $208 = $2;
    STACKTOP = sp;return ($208|0);
   }
   $78 = $3;
   $79 = (_stbi__get16le($78)|0);
   $80 = $4;
   HEAP32[$80>>2] = $79;
   $81 = $5;
   $82 = ($81|0)!=(12);
   do {
    if ($82) {
     $83 = $3;
     $84 = (_stbi__get32le($83)|0);
     $6 = $84;
     $85 = $6;
     $86 = ($85|0)==(1);
     $87 = $6;
     $88 = ($87|0)==(2);
     $or$cond9 = $86 | $88;
     if ($or$cond9) {
      $89 = (_stbi__err(6357)|0);
      $90 = ($89|0)!=(0);
      $91 = $90 ? 0 : 0;
      $92 = $91;
      $93 = $92;
      $2 = $93;
      $208 = $2;
      STACKTOP = sp;return ($208|0);
     }
     $94 = $3;
     (_stbi__get32le($94)|0);
     $95 = $3;
     (_stbi__get32le($95)|0);
     $96 = $3;
     (_stbi__get32le($96)|0);
     $97 = $3;
     (_stbi__get32le($97)|0);
     $98 = $3;
     (_stbi__get32le($98)|0);
     $99 = $5;
     $100 = ($99|0)==(40);
     $101 = $5;
     $102 = ($101|0)==(56);
     $or$cond11 = $100 | $102;
     $103 = $5;
     if (!($or$cond11)) {
      $172 = ($103|0)!=(108);
      $173 = $5;
      $174 = ($173|0)!=(124);
      $or$cond13 = $172 & $174;
      if ($or$cond13) {
       $175 = (_stbi__err(6349)|0);
       $176 = ($175|0)!=(0);
       $177 = $176 ? 0 : 0;
       $178 = $177;
       $179 = $178;
       $2 = $179;
       $208 = $2;
       STACKTOP = sp;return ($208|0);
      }
      $180 = $3;
      $181 = (_stbi__get32le($180)|0);
      $182 = $4;
      $183 = ((($182)) + 12|0);
      HEAP32[$183>>2] = $181;
      $184 = $3;
      $185 = (_stbi__get32le($184)|0);
      $186 = $4;
      $187 = ((($186)) + 16|0);
      HEAP32[$187>>2] = $185;
      $188 = $3;
      $189 = (_stbi__get32le($188)|0);
      $190 = $4;
      $191 = ((($190)) + 20|0);
      HEAP32[$191>>2] = $189;
      $192 = $3;
      $193 = (_stbi__get32le($192)|0);
      $194 = $4;
      $195 = ((($194)) + 24|0);
      HEAP32[$195>>2] = $193;
      $196 = $3;
      (_stbi__get32le($196)|0);
      $7 = 0;
      while(1) {
       $197 = $7;
       $198 = ($197|0)<(12);
       if (!($198)) {
        break;
       }
       $199 = $3;
       (_stbi__get32le($199)|0);
       $200 = $7;
       $201 = (($200) + 1)|0;
       $7 = $201;
      }
      $202 = $5;
      $203 = ($202|0)==(124);
      if (!($203)) {
       break;
      }
      $204 = $3;
      (_stbi__get32le($204)|0);
      $205 = $3;
      (_stbi__get32le($205)|0);
      $206 = $3;
      (_stbi__get32le($206)|0);
      $207 = $3;
      (_stbi__get32le($207)|0);
      break;
     }
     $104 = ($103|0)==(56);
     if ($104) {
      $105 = $3;
      (_stbi__get32le($105)|0);
      $106 = $3;
      (_stbi__get32le($106)|0);
      $107 = $3;
      (_stbi__get32le($107)|0);
      $108 = $3;
      (_stbi__get32le($108)|0);
     }
     $109 = $4;
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(16);
     if (!($111)) {
      $112 = $4;
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(32);
      if (!($114)) {
       break;
      }
     }
     $115 = $6;
     $116 = ($115|0)==(0);
     if ($116) {
      $117 = $4;
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(32);
      $120 = $4;
      $121 = ((($120)) + 12|0);
      if ($119) {
       HEAP32[$121>>2] = 16711680;
       $122 = $4;
       $123 = ((($122)) + 16|0);
       HEAP32[$123>>2] = 65280;
       $124 = $4;
       $125 = ((($124)) + 20|0);
       HEAP32[$125>>2] = 255;
       $126 = $4;
       $127 = ((($126)) + 24|0);
       HEAP32[$127>>2] = -16777216;
       $128 = $4;
       $129 = ((($128)) + 28|0);
       HEAP32[$129>>2] = 0;
       break;
      } else {
       HEAP32[$121>>2] = 31744;
       $130 = $4;
       $131 = ((($130)) + 16|0);
       HEAP32[$131>>2] = 992;
       $132 = $4;
       $133 = ((($132)) + 20|0);
       HEAP32[$133>>2] = 31;
       break;
      }
     }
     $134 = $6;
     $135 = ($134|0)==(3);
     if (!($135)) {
      $167 = (_stbi__err(6349)|0);
      $168 = ($167|0)!=(0);
      $169 = $168 ? 0 : 0;
      $170 = $169;
      $171 = $170;
      $2 = $171;
      $208 = $2;
      STACKTOP = sp;return ($208|0);
     }
     $136 = $3;
     $137 = (_stbi__get32le($136)|0);
     $138 = $4;
     $139 = ((($138)) + 12|0);
     HEAP32[$139>>2] = $137;
     $140 = $3;
     $141 = (_stbi__get32le($140)|0);
     $142 = $4;
     $143 = ((($142)) + 16|0);
     HEAP32[$143>>2] = $141;
     $144 = $3;
     $145 = (_stbi__get32le($144)|0);
     $146 = $4;
     $147 = ((($146)) + 20|0);
     HEAP32[$147>>2] = $145;
     $148 = $4;
     $149 = ((($148)) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = $4;
     $152 = ((($151)) + 16|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($150|0)==($153|0);
     if ($154) {
      $155 = $4;
      $156 = ((($155)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = $4;
      $159 = ((($158)) + 20|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($157|0)==($160|0);
      if ($161) {
       $162 = (_stbi__err(6349)|0);
       $163 = ($162|0)!=(0);
       $164 = $163 ? 0 : 0;
       $165 = $164;
       $166 = $165;
       $2 = $166;
       $208 = $2;
       STACKTOP = sp;return ($208|0);
      }
     }
    }
   } while(0);
   $2 = (1);
   $208 = $2;
   STACKTOP = sp;return ($208|0);
  }
 }
 $16 = (_stbi__err(6329)|0);
 $17 = ($16|0)!=(0);
 $18 = $17 ? 0 : 0;
 $19 = $18;
 $20 = $19;
 $2 = $20;
 $208 = $2;
 STACKTOP = sp;return ($208|0);
}
function _stbi__high_bit($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 $4 = $2;
 $5 = ($4|0)==(0);
 if ($5) {
  $1 = -1;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 }
 $6 = $2;
 $7 = ($6>>>0)>=(65536);
 if ($7) {
  $8 = $3;
  $9 = (($8) + 16)|0;
  $3 = $9;
  $10 = $2;
  $11 = $10 >>> 16;
  $2 = $11;
 }
 $12 = $2;
 $13 = ($12>>>0)>=(256);
 if ($13) {
  $14 = $3;
  $15 = (($14) + 8)|0;
  $3 = $15;
  $16 = $2;
  $17 = $16 >>> 8;
  $2 = $17;
 }
 $18 = $2;
 $19 = ($18>>>0)>=(16);
 if ($19) {
  $20 = $3;
  $21 = (($20) + 4)|0;
  $3 = $21;
  $22 = $2;
  $23 = $22 >>> 4;
  $2 = $23;
 }
 $24 = $2;
 $25 = ($24>>>0)>=(4);
 if ($25) {
  $26 = $3;
  $27 = (($26) + 2)|0;
  $3 = $27;
  $28 = $2;
  $29 = $28 >>> 2;
  $2 = $29;
 }
 $30 = $2;
 $31 = ($30>>>0)>=(2);
 if ($31) {
  $32 = $3;
  $33 = (($32) + 1)|0;
  $3 = $33;
  $34 = $2;
  $35 = $34 >>> 1;
  $2 = $35;
 }
 $36 = $3;
 $1 = $36;
 $37 = $1;
 STACKTOP = sp;return ($37|0);
}
function _stbi__bitcount($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 & 1431655765;
 $4 = $1;
 $5 = $4 >>> 1;
 $6 = $5 & 1431655765;
 $7 = (($3) + ($6))|0;
 $1 = $7;
 $8 = $1;
 $9 = $8 & 858993459;
 $10 = $1;
 $11 = $10 >>> 2;
 $12 = $11 & 858993459;
 $13 = (($9) + ($12))|0;
 $1 = $13;
 $14 = $1;
 $15 = $1;
 $16 = $15 >>> 4;
 $17 = (($14) + ($16))|0;
 $18 = $17 & 252645135;
 $1 = $18;
 $19 = $1;
 $20 = $1;
 $21 = $20 >>> 8;
 $22 = (($19) + ($21))|0;
 $1 = $22;
 $23 = $1;
 $24 = $1;
 $25 = $24 >>> 16;
 $26 = (($23) + ($25))|0;
 $1 = $26;
 $27 = $1;
 $28 = $27 & 255;
 STACKTOP = sp;return ($28|0);
}
function _stbi__shiftsigned($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = ($6|0)<(0);
 $8 = $4;
 if ($7) {
  $9 = (0 - ($8))|0;
  $10 = $3;
  $11 = $10 << $9;
  $3 = $11;
 } else {
  $12 = $3;
  $13 = $12 >> $8;
  $3 = $13;
 }
 $14 = $3;
 $15 = ($14|0)>=(0);
 $16 = $3;
 $17 = ($16|0)<(256);
 $or$cond = $15 & $17;
 if (!($or$cond)) {
  ___assert_fail((6365|0),(4971|0),5047,(6383|0));
  // unreachable;
 }
 $18 = $5;
 $19 = (8 - ($18))|0;
 $20 = $3;
 $21 = $20 >> $19;
 $3 = $21;
 $22 = $5;
 $23 = ($22|0)>=(0);
 $24 = $5;
 $25 = ($24|0)<=(8);
 $or$cond3 = $23 & $25;
 if ($or$cond3) {
  $26 = $3;
  $27 = $5;
  $28 = (432 + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = Math_imul($26, $29)|0;
  $31 = $5;
  $32 = (480 + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $30 >> $33;
  STACKTOP = sp;return ($34|0);
 } else {
  ___assert_fail((6401|0),(4971|0),5049,(6383|0));
  // unreachable;
 }
 return (0)|0;
}
function _stbi__gif_test_raw($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_stbi__get8($4)|0);
 $6 = $5&255;
 $7 = ($6|0)!=(71);
 do {
  if ($7) {
   label = 5;
  } else {
   $8 = $2;
   $9 = (_stbi__get8($8)|0);
   $10 = $9&255;
   $11 = ($10|0)!=(73);
   if ($11) {
    label = 5;
   } else {
    $12 = $2;
    $13 = (_stbi__get8($12)|0);
    $14 = $13&255;
    $15 = ($14|0)!=(70);
    if ($15) {
     label = 5;
    } else {
     $16 = $2;
     $17 = (_stbi__get8($16)|0);
     $18 = $17&255;
     $19 = ($18|0)!=(56);
     if ($19) {
      label = 5;
     } else {
      $20 = $2;
      $21 = (_stbi__get8($20)|0);
      $22 = $21&255;
      $3 = $22;
      $23 = $3;
      $24 = ($23|0)!=(57);
      $25 = $3;
      $26 = ($25|0)!=(55);
      $or$cond = $24 & $26;
      if ($or$cond) {
       $1 = 0;
       break;
      }
      $27 = $2;
      $28 = (_stbi__get8($27)|0);
      $29 = $28&255;
      $30 = ($29|0)!=(97);
      if ($30) {
       $1 = 0;
       break;
      } else {
       $1 = 1;
       break;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $1 = 0;
 }
 $31 = $1;
 STACKTOP = sp;return ($31|0);
}
function _stbi__gif_load_next($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = 0;
 $23 = $7;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 do {
  if ($26) {
   $27 = $6;
   $28 = $7;
   $29 = $8;
   $30 = (_stbi__gif_header($27,$28,$29,0)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    $5 = 0;
    $440 = $5;
    STACKTOP = sp;return ($440|0);
   }
   $32 = $7;
   $33 = HEAP32[$32>>2]|0;
   $34 = $33<<2;
   $35 = $7;
   $36 = ((($35)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = Math_imul($34, $37)|0;
   $39 = (_stbi__malloc($38)|0);
   $40 = $7;
   $41 = ((($40)) + 8|0);
   HEAP32[$41>>2] = $39;
   $42 = $7;
   $43 = HEAP32[$42>>2]|0;
   $44 = $43<<2;
   $45 = $7;
   $46 = ((($45)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = Math_imul($44, $47)|0;
   $49 = (_stbi__malloc($48)|0);
   $50 = $7;
   $51 = ((($50)) + 12|0);
   HEAP32[$51>>2] = $49;
   $52 = $7;
   $53 = HEAP32[$52>>2]|0;
   $54 = $7;
   $55 = ((($54)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = Math_imul($53, $56)|0;
   $58 = (_stbi__malloc($57)|0);
   $59 = $7;
   $60 = ((($59)) + 16|0);
   HEAP32[$60>>2] = $58;
   $61 = $7;
   $62 = ((($61)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)==(0|0);
   if (!($64)) {
    $70 = $7;
    $71 = ((($70)) + 8|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $7;
    $74 = HEAP32[$73>>2]|0;
    $75 = $74<<2;
    $76 = $7;
    $77 = ((($76)) + 4|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = Math_imul($75, $78)|0;
    _memset(($72|0),0,($79|0))|0;
    $80 = $7;
    $81 = ((($80)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $7;
    $84 = HEAP32[$83>>2]|0;
    $85 = $84<<2;
    $86 = $7;
    $87 = ((($86)) + 4|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = Math_imul($85, $88)|0;
    _memset(($82|0),0,($89|0))|0;
    $90 = $7;
    $91 = ((($90)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $7;
    $94 = HEAP32[$93>>2]|0;
    $95 = $7;
    $96 = ((($95)) + 4|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = Math_imul($94, $97)|0;
    _memset(($92|0),0,($98|0))|0;
    $12 = 1;
    break;
   }
   $65 = (_stbi__err(5340)|0);
   $66 = ($65|0)!=(0);
   $67 = $66 ? 0 : 0;
   $68 = $67;
   $69 = $68;
   $5 = $69;
   $440 = $5;
   STACKTOP = sp;return ($440|0);
  } else {
   $99 = $7;
   $100 = ((($99)) + 36|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $101 & 28;
   $103 = $102 >> 2;
   $11 = $103;
   $104 = $7;
   $105 = HEAP32[$104>>2]|0;
   $106 = $7;
   $107 = ((($106)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = Math_imul($105, $108)|0;
   $14 = $109;
   $110 = $11;
   $111 = ($110|0)==(3);
   $112 = $10;
   $113 = ($112|0)==(0|0);
   $or$cond = $111 & $113;
   if ($or$cond) {
    $11 = 2;
   }
   $114 = $11;
   $115 = ($114|0)==(3);
   L15: do {
    if ($115) {
     $13 = 0;
     while(1) {
      $116 = $13;
      $117 = $14;
      $118 = ($116|0)<($117|0);
      if (!($118)) {
       break L15;
      }
      $119 = $7;
      $120 = ((($119)) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = $13;
      $123 = (($121) + ($122)|0);
      $124 = HEAP8[$123>>0]|0;
      $125 = ($124<<24>>24)!=(0);
      if ($125) {
       $126 = $7;
       $127 = ((($126)) + 8|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = $13;
       $130 = $129<<2;
       $131 = (($128) + ($130)|0);
       $132 = $10;
       $133 = $13;
       $134 = $133<<2;
       $135 = (($132) + ($134)|0);
       ;HEAP8[$131>>0]=HEAP8[$135>>0]|0;HEAP8[$131+1>>0]=HEAP8[$135+1>>0]|0;HEAP8[$131+2>>0]=HEAP8[$135+2>>0]|0;HEAP8[$131+3>>0]=HEAP8[$135+3>>0]|0;
      }
      $136 = $13;
      $137 = (($136) + 1)|0;
      $13 = $137;
     }
    } else {
     $138 = $11;
     $139 = ($138|0)==(2);
     if ($139) {
      $13 = 0;
      while(1) {
       $140 = $13;
       $141 = $14;
       $142 = ($140|0)<($141|0);
       if (!($142)) {
        break L15;
       }
       $143 = $7;
       $144 = ((($143)) + 16|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = $13;
       $147 = (($145) + ($146)|0);
       $148 = HEAP8[$147>>0]|0;
       $149 = ($148<<24>>24)!=(0);
       if ($149) {
        $150 = $7;
        $151 = ((($150)) + 8|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = $13;
        $154 = $153<<2;
        $155 = (($152) + ($154)|0);
        $156 = $7;
        $157 = ((($156)) + 12|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = $13;
        $160 = $159<<2;
        $161 = (($158) + ($160)|0);
        ;HEAP8[$155>>0]=HEAP8[$161>>0]|0;HEAP8[$155+1>>0]=HEAP8[$161+1>>0]|0;HEAP8[$155+2>>0]=HEAP8[$161+2>>0]|0;HEAP8[$155+3>>0]=HEAP8[$161+3>>0]|0;
       }
       $162 = $13;
       $163 = (($162) + 1)|0;
       $13 = $163;
      }
     }
    }
   } while(0);
   $164 = $7;
   $165 = ((($164)) + 12|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $7;
   $168 = ((($167)) + 8|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $7;
   $171 = HEAP32[$170>>2]|0;
   $172 = $171<<2;
   $173 = $7;
   $174 = ((($173)) + 4|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = Math_imul($172, $175)|0;
   _memcpy(($166|0),($169|0),($176|0))|0;
  }
 } while(0);
 $177 = $7;
 $178 = ((($177)) + 16|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = $7;
 $181 = HEAP32[$180>>2]|0;
 $182 = $7;
 $183 = ((($182)) + 4|0);
 $184 = HEAP32[$183>>2]|0;
 $185 = Math_imul($181, $184)|0;
 _memset(($179|0),0,($185|0))|0;
 L33: while(1) {
  $186 = $6;
  $187 = (_stbi__get8($186)|0);
  $188 = $187&255;
  $15 = $188;
  $189 = $15;
  switch ($189|0) {
  case 44:  {
   label = 24;
   break L33;
   break;
  }
  case 59:  {
   label = 59;
   break L33;
   break;
  }
  case 33:  {
   break;
  }
  default: {
   label = 60;
   break L33;
  }
  }
  $373 = $6;
  $374 = (_stbi__get8($373)|0);
  $375 = $374&255;
  $22 = $375;
  $376 = $22;
  $377 = ($376|0)==(249);
  do {
   if ($377) {
    $378 = $6;
    $379 = (_stbi__get8($378)|0);
    $380 = $379&255;
    $21 = $380;
    $381 = $21;
    $382 = ($381|0)==(4);
    $383 = $6;
    if (!($382)) {
     $427 = $21;
     _stbi__skip($383,$427);
     break;
    }
    $384 = (_stbi__get8($383)|0);
    $385 = $384&255;
    $386 = $7;
    $387 = ((($386)) + 36|0);
    HEAP32[$387>>2] = $385;
    $388 = $6;
    $389 = (_stbi__get16le($388)|0);
    $390 = ($389*10)|0;
    $391 = $7;
    $392 = ((($391)) + 34900|0);
    HEAP32[$392>>2] = $390;
    $393 = $7;
    $394 = ((($393)) + 32|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = ($395|0)>=(0);
    if ($396) {
     $397 = $7;
     $398 = ((($397)) + 40|0);
     $399 = $7;
     $400 = ((($399)) + 32|0);
     $401 = HEAP32[$400>>2]|0;
     $402 = (($398) + ($401<<2)|0);
     $403 = ((($402)) + 3|0);
     HEAP8[$403>>0] = -1;
    }
    $404 = $7;
    $405 = ((($404)) + 36|0);
    $406 = HEAP32[$405>>2]|0;
    $407 = $406 & 1;
    $408 = ($407|0)!=(0);
    $409 = $6;
    if (!($408)) {
     _stbi__skip($409,1);
     $425 = $7;
     $426 = ((($425)) + 32|0);
     HEAP32[$426>>2] = -1;
     label = 56;
     break;
    }
    $410 = (_stbi__get8($409)|0);
    $411 = $410&255;
    $412 = $7;
    $413 = ((($412)) + 32|0);
    HEAP32[$413>>2] = $411;
    $414 = $7;
    $415 = ((($414)) + 32|0);
    $416 = HEAP32[$415>>2]|0;
    $417 = ($416|0)>=(0);
    if ($417) {
     $418 = $7;
     $419 = ((($418)) + 40|0);
     $420 = $7;
     $421 = ((($420)) + 32|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = (($419) + ($422<<2)|0);
     $424 = ((($423)) + 3|0);
     HEAP8[$424>>0] = 0;
     label = 56;
    } else {
     label = 56;
    }
   } else {
    label = 56;
   }
  } while(0);
  L48: do {
   if ((label|0) == 56) {
    label = 0;
    while(1) {
     $428 = $6;
     $429 = (_stbi__get8($428)|0);
     $430 = $429&255;
     $21 = $430;
     $431 = ($430|0)!=(0);
     if (!($431)) {
      break L48;
     }
     $432 = $6;
     $433 = $21;
     _stbi__skip($432,$433);
    }
   }
  } while(0);
 }
 if ((label|0) == 24) {
  $190 = $6;
  $191 = (_stbi__get16le($190)|0);
  $16 = $191;
  $192 = $6;
  $193 = (_stbi__get16le($192)|0);
  $17 = $193;
  $194 = $6;
  $195 = (_stbi__get16le($194)|0);
  $18 = $195;
  $196 = $6;
  $197 = (_stbi__get16le($196)|0);
  $19 = $197;
  $198 = $16;
  $199 = $18;
  $200 = (($198) + ($199))|0;
  $201 = $7;
  $202 = HEAP32[$201>>2]|0;
  $203 = ($200|0)>($202|0);
  if (!($203)) {
   $204 = $17;
   $205 = $19;
   $206 = (($204) + ($205))|0;
   $207 = $7;
   $208 = ((($207)) + 4|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = ($206|0)>($209|0);
   if (!($210)) {
    $216 = $7;
    $217 = HEAP32[$216>>2]|0;
    $218 = $217<<2;
    $219 = $7;
    $220 = ((($219)) + 34896|0);
    HEAP32[$220>>2] = $218;
    $221 = $16;
    $222 = $221<<2;
    $223 = $7;
    $224 = ((($223)) + 34872|0);
    HEAP32[$224>>2] = $222;
    $225 = $17;
    $226 = $7;
    $227 = ((($226)) + 34896|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = Math_imul($225, $228)|0;
    $230 = $7;
    $231 = ((($230)) + 34876|0);
    HEAP32[$231>>2] = $229;
    $232 = $7;
    $233 = ((($232)) + 34872|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = $18;
    $236 = $235<<2;
    $237 = (($234) + ($236))|0;
    $238 = $7;
    $239 = ((($238)) + 34880|0);
    HEAP32[$239>>2] = $237;
    $240 = $7;
    $241 = ((($240)) + 34876|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = $19;
    $244 = $7;
    $245 = ((($244)) + 34896|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = Math_imul($243, $246)|0;
    $248 = (($242) + ($247))|0;
    $249 = $7;
    $250 = ((($249)) + 34884|0);
    HEAP32[$250>>2] = $248;
    $251 = $7;
    $252 = ((($251)) + 34872|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = $7;
    $255 = ((($254)) + 34888|0);
    HEAP32[$255>>2] = $253;
    $256 = $7;
    $257 = ((($256)) + 34876|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = $7;
    $260 = ((($259)) + 34892|0);
    HEAP32[$260>>2] = $258;
    $261 = $6;
    $262 = (_stbi__get8($261)|0);
    $263 = $262&255;
    $264 = $7;
    $265 = ((($264)) + 34868|0);
    HEAP32[$265>>2] = $263;
    $266 = $7;
    $267 = ((($266)) + 34868|0);
    $268 = HEAP32[$267>>2]|0;
    $269 = $268 & 64;
    $270 = ($269|0)!=(0);
    $271 = $7;
    $272 = ((($271)) + 34896|0);
    $273 = HEAP32[$272>>2]|0;
    if ($270) {
     $274 = $273<<3;
     $275 = $7;
     $276 = ((($275)) + 34864|0);
     HEAP32[$276>>2] = $274;
     $277 = $7;
     $278 = ((($277)) + 34860|0);
     HEAP32[$278>>2] = 3;
    } else {
     $279 = $7;
     $280 = ((($279)) + 34864|0);
     HEAP32[$280>>2] = $273;
     $281 = $7;
     $282 = ((($281)) + 34860|0);
     HEAP32[$282>>2] = 0;
    }
    $283 = $7;
    $284 = ((($283)) + 34868|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = $285 & 128;
    $287 = ($286|0)!=(0);
    do {
     if ($287) {
      $288 = $6;
      $289 = $7;
      $290 = ((($289)) + 1064|0);
      $291 = $7;
      $292 = ((($291)) + 34868|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = $293 & 7;
      $295 = 2 << $294;
      $296 = $7;
      $297 = ((($296)) + 36|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = $298 & 1;
      $300 = ($299|0)!=(0);
      if ($300) {
       $301 = $7;
       $302 = ((($301)) + 32|0);
       $303 = HEAP32[$302>>2]|0;
       $304 = $303;
      } else {
       $304 = -1;
      }
      _stbi__gif_parse_colortable($288,$290,$295,$304);
      $305 = $7;
      $306 = ((($305)) + 1064|0);
      $307 = $7;
      $308 = ((($307)) + 34856|0);
      HEAP32[$308>>2] = $306;
     } else {
      $309 = $7;
      $310 = ((($309)) + 20|0);
      $311 = HEAP32[$310>>2]|0;
      $312 = $311 & 128;
      $313 = ($312|0)!=(0);
      if ($313) {
       $314 = $7;
       $315 = ((($314)) + 40|0);
       $316 = $7;
       $317 = ((($316)) + 34856|0);
       HEAP32[$317>>2] = $315;
       break;
      }
      $318 = (_stbi__err(6445)|0);
      $319 = ($318|0)!=(0);
      $320 = $319 ? 0 : 0;
      $321 = $320;
      $322 = $321;
      $5 = $322;
      $440 = $5;
      STACKTOP = sp;return ($440|0);
     }
    } while(0);
    $323 = $6;
    $324 = $7;
    $325 = (_stbi__process_gif_raster($323,$324)|0);
    $20 = $325;
    $326 = $20;
    $327 = ($326|0)==(0|0);
    if ($327) {
     $5 = 0;
     $440 = $5;
     STACKTOP = sp;return ($440|0);
    }
    $328 = $7;
    $329 = HEAP32[$328>>2]|0;
    $330 = $7;
    $331 = ((($330)) + 4|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = Math_imul($329, $332)|0;
    $14 = $333;
    $334 = $12;
    $335 = ($334|0)!=(0);
    L80: do {
     if ($335) {
      $336 = $7;
      $337 = ((($336)) + 24|0);
      $338 = HEAP32[$337>>2]|0;
      $339 = ($338|0)>(0);
      if ($339) {
       $13 = 0;
       while(1) {
        $340 = $13;
        $341 = $14;
        $342 = ($340|0)<($341|0);
        if (!($342)) {
         break L80;
        }
        $343 = $7;
        $344 = ((($343)) + 16|0);
        $345 = HEAP32[$344>>2]|0;
        $346 = $13;
        $347 = (($345) + ($346)|0);
        $348 = HEAP8[$347>>0]|0;
        $349 = $348&255;
        $350 = ($349|0)==(0);
        if ($350) {
         $351 = $7;
         $352 = ((($351)) + 40|0);
         $353 = $7;
         $354 = ((($353)) + 24|0);
         $355 = HEAP32[$354>>2]|0;
         $356 = (($352) + ($355<<2)|0);
         $357 = ((($356)) + 3|0);
         HEAP8[$357>>0] = -1;
         $358 = $7;
         $359 = ((($358)) + 8|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = $13;
         $362 = $361<<2;
         $363 = (($360) + ($362)|0);
         $364 = $7;
         $365 = ((($364)) + 40|0);
         $366 = $7;
         $367 = ((($366)) + 24|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = (($365) + ($368<<2)|0);
         ;HEAP8[$363>>0]=HEAP8[$369>>0]|0;HEAP8[$363+1>>0]=HEAP8[$369+1>>0]|0;HEAP8[$363+2>>0]=HEAP8[$369+2>>0]|0;HEAP8[$363+3>>0]=HEAP8[$369+3>>0]|0;
        }
        $370 = $13;
        $371 = (($370) + 1)|0;
        $13 = $371;
       }
      }
     }
    } while(0);
    $372 = $20;
    $5 = $372;
    $440 = $5;
    STACKTOP = sp;return ($440|0);
   }
  }
  $211 = (_stbi__err(6424)|0);
  $212 = ($211|0)!=(0);
  $213 = $212 ? 0 : 0;
  $214 = $213;
  $215 = $214;
  $5 = $215;
  $440 = $5;
  STACKTOP = sp;return ($440|0);
 }
 else if ((label|0) == 59) {
  $434 = $6;
  $5 = $434;
  $440 = $5;
  STACKTOP = sp;return ($440|0);
 }
 else if ((label|0) == 60) {
  $435 = (_stbi__err(6465)|0);
  $436 = ($435|0)!=(0);
  $437 = $436 ? 0 : 0;
  $438 = $437;
  $439 = $438;
  $5 = $439;
  $440 = $5;
  STACKTOP = sp;return ($440|0);
 }
 return (0)|0;
}
function _stbi__gif_header($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = (_stbi__get8($10)|0);
 $12 = $11&255;
 $13 = ($12|0)!=(71);
 if (!($13)) {
  $14 = $5;
  $15 = (_stbi__get8($14)|0);
  $16 = $15&255;
  $17 = ($16|0)!=(73);
  if (!($17)) {
   $18 = $5;
   $19 = (_stbi__get8($18)|0);
   $20 = $19&255;
   $21 = ($20|0)!=(70);
   if (!($21)) {
    $22 = $5;
    $23 = (_stbi__get8($22)|0);
    $24 = $23&255;
    $25 = ($24|0)!=(56);
    if (!($25)) {
     $27 = $5;
     $28 = (_stbi__get8($27)|0);
     $9 = $28;
     $29 = $9;
     $30 = $29&255;
     $31 = ($30|0)!=(55);
     if ($31) {
      $32 = $9;
      $33 = $32&255;
      $34 = ($33|0)!=(57);
      if ($34) {
       $35 = (_stbi__err(6478)|0);
       $4 = $35;
       $83 = $4;
       STACKTOP = sp;return ($83|0);
      }
     }
     $36 = $5;
     $37 = (_stbi__get8($36)|0);
     $38 = $37&255;
     $39 = ($38|0)!=(97);
     if ($39) {
      $40 = (_stbi__err(6478)|0);
      $4 = $40;
      $83 = $4;
      STACKTOP = sp;return ($83|0);
     }
     $41 = $5;
     $42 = (_stbi__get16le($41)|0);
     $43 = $6;
     HEAP32[$43>>2] = $42;
     $44 = $5;
     $45 = (_stbi__get16le($44)|0);
     $46 = $6;
     $47 = ((($46)) + 4|0);
     HEAP32[$47>>2] = $45;
     $48 = $5;
     $49 = (_stbi__get8($48)|0);
     $50 = $49&255;
     $51 = $6;
     $52 = ((($51)) + 20|0);
     HEAP32[$52>>2] = $50;
     $53 = $5;
     $54 = (_stbi__get8($53)|0);
     $55 = $54&255;
     $56 = $6;
     $57 = ((($56)) + 24|0);
     HEAP32[$57>>2] = $55;
     $58 = $5;
     $59 = (_stbi__get8($58)|0);
     $60 = $59&255;
     $61 = $6;
     $62 = ((($61)) + 28|0);
     HEAP32[$62>>2] = $60;
     $63 = $6;
     $64 = ((($63)) + 32|0);
     HEAP32[$64>>2] = -1;
     $65 = $7;
     $66 = ($65|0)!=(0|0);
     if ($66) {
      $67 = $7;
      HEAP32[$67>>2] = 4;
     }
     $68 = $8;
     $69 = ($68|0)!=(0);
     if ($69) {
      $4 = 1;
      $83 = $4;
      STACKTOP = sp;return ($83|0);
     }
     $70 = $6;
     $71 = ((($70)) + 20|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $72 & 128;
     $74 = ($73|0)!=(0);
     if ($74) {
      $75 = $5;
      $76 = $6;
      $77 = ((($76)) + 40|0);
      $78 = $6;
      $79 = ((($78)) + 20|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = $80 & 7;
      $82 = 2 << $81;
      _stbi__gif_parse_colortable($75,$77,$82,-1);
     }
     $4 = 1;
     $83 = $4;
     STACKTOP = sp;return ($83|0);
    }
   }
  }
 }
 $26 = (_stbi__err(6478)|0);
 $4 = $26;
 $83 = $4;
 STACKTOP = sp;return ($83|0);
}
function _stbi__gif_parse_colortable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $6;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $4;
  $13 = (_stbi__get8($12)|0);
  $14 = $5;
  $15 = $8;
  $16 = (($14) + ($15<<2)|0);
  $17 = ((($16)) + 2|0);
  HEAP8[$17>>0] = $13;
  $18 = $4;
  $19 = (_stbi__get8($18)|0);
  $20 = $5;
  $21 = $8;
  $22 = (($20) + ($21<<2)|0);
  $23 = ((($22)) + 1|0);
  HEAP8[$23>>0] = $19;
  $24 = $4;
  $25 = (_stbi__get8($24)|0);
  $26 = $5;
  $27 = $8;
  $28 = (($26) + ($27<<2)|0);
  HEAP8[$28>>0] = $25;
  $29 = $7;
  $30 = $8;
  $31 = ($29|0)==($30|0);
  $32 = $31 ? 0 : 255;
  $33 = $32&255;
  $34 = $5;
  $35 = $8;
  $36 = (($34) + ($35<<2)|0);
  $37 = ((($36)) + 3|0);
  HEAP8[$37>>0] = $33;
  $38 = $8;
  $39 = (($38) + 1)|0;
  $8 = $39;
 }
 STACKTOP = sp;return;
}
function _stbi__process_gif_raster($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $18 = $3;
 $19 = (_stbi__get8($18)|0);
 $5 = $19;
 $20 = $5;
 $21 = $20&255;
 $22 = ($21|0)>(12);
 if ($22) {
  $2 = 0;
  $197 = $2;
  STACKTOP = sp;return ($197|0);
 }
 $23 = $5;
 $24 = $23&255;
 $25 = 1 << $24;
 $15 = $25;
 $8 = 1;
 $26 = $5;
 $27 = $26&255;
 $28 = (($27) + 1)|0;
 $9 = $28;
 $29 = $9;
 $30 = 1 << $29;
 $31 = (($30) - 1)|0;
 $10 = $31;
 $13 = 0;
 $14 = 0;
 $7 = 0;
 while(1) {
  $32 = $7;
  $33 = $15;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $4;
  $36 = ((($35)) + 2088|0);
  $37 = $7;
  $38 = (($36) + ($37<<2)|0);
  HEAP16[$38>>1] = -1;
  $39 = $7;
  $40 = $39&255;
  $41 = $4;
  $42 = ((($41)) + 2088|0);
  $43 = $7;
  $44 = (($42) + ($43<<2)|0);
  $45 = ((($44)) + 2|0);
  HEAP8[$45>>0] = $40;
  $46 = $7;
  $47 = $46&255;
  $48 = $4;
  $49 = ((($48)) + 2088|0);
  $50 = $7;
  $51 = (($49) + ($50<<2)|0);
  $52 = ((($51)) + 3|0);
  HEAP8[$52>>0] = $47;
  $53 = $7;
  $54 = (($53) + 1)|0;
  $7 = $54;
 }
 $55 = $15;
 $56 = (($55) + 2)|0;
 $11 = $56;
 $12 = -1;
 $6 = 0;
 L9: while(1) {
  $57 = $14;
  $58 = $9;
  $59 = ($57|0)<($58|0);
  do {
   if ($59) {
    $60 = $6;
    $61 = ($60|0)==(0);
    if ($61) {
     $62 = $3;
     $63 = (_stbi__get8($62)|0);
     $64 = $63&255;
     $6 = $64;
     $65 = $6;
     $66 = ($65|0)==(0);
     if ($66) {
      label = 10;
      break L9;
     }
    }
    $70 = $6;
    $71 = (($70) + -1)|0;
    $6 = $71;
    $72 = $3;
    $73 = (_stbi__get8($72)|0);
    $74 = $73&255;
    $75 = $14;
    $76 = $74 << $75;
    $77 = $13;
    $78 = $77 | $76;
    $13 = $78;
    $79 = $14;
    $80 = (($79) + 8)|0;
    $14 = $80;
   } else {
    $81 = $13;
    $82 = $10;
    $83 = $81 & $82;
    $17 = $83;
    $84 = $9;
    $85 = $13;
    $86 = $85 >> $84;
    $13 = $86;
    $87 = $9;
    $88 = $14;
    $89 = (($88) - ($87))|0;
    $14 = $89;
    $90 = $17;
    $91 = $15;
    $92 = ($90|0)==($91|0);
    if ($92) {
     $93 = $5;
     $94 = $93&255;
     $95 = (($94) + 1)|0;
     $9 = $95;
     $96 = $9;
     $97 = 1 << $96;
     $98 = (($97) - 1)|0;
     $10 = $98;
     $99 = $15;
     $100 = (($99) + 2)|0;
     $11 = $100;
     $12 = -1;
     $8 = 0;
     break;
    }
    $101 = $17;
    $102 = $15;
    $103 = (($102) + 1)|0;
    $104 = ($101|0)==($103|0);
    if ($104) {
     label = 15;
     break L9;
    }
    $116 = $17;
    $117 = $11;
    $118 = ($116|0)<=($117|0);
    if (!($118)) {
     label = 34;
     break L9;
    }
    $119 = $8;
    $120 = ($119|0)!=(0);
    if ($120) {
     label = 21;
     break L9;
    }
    $126 = $12;
    $127 = ($126|0)>=(0);
    if ($127) {
     $128 = $4;
     $129 = ((($128)) + 2088|0);
     $130 = $11;
     $131 = (($130) + 1)|0;
     $11 = $131;
     $132 = (($129) + ($130<<2)|0);
     $16 = $132;
     $133 = $11;
     $134 = ($133|0)>(8192);
     if ($134) {
      label = 24;
      break L9;
     }
     $140 = $12;
     $141 = $140&65535;
     $142 = $16;
     HEAP16[$142>>1] = $141;
     $143 = $4;
     $144 = ((($143)) + 2088|0);
     $145 = $12;
     $146 = (($144) + ($145<<2)|0);
     $147 = ((($146)) + 2|0);
     $148 = HEAP8[$147>>0]|0;
     $149 = $16;
     $150 = ((($149)) + 2|0);
     HEAP8[$150>>0] = $148;
     $151 = $17;
     $152 = $11;
     $153 = ($151|0)==($152|0);
     if ($153) {
      $154 = $16;
      $155 = ((($154)) + 2|0);
      $156 = HEAP8[$155>>0]|0;
      $157 = $156&255;
      $166 = $157;
     } else {
      $158 = $4;
      $159 = ((($158)) + 2088|0);
      $160 = $17;
      $161 = (($159) + ($160<<2)|0);
      $162 = ((($161)) + 2|0);
      $163 = HEAP8[$162>>0]|0;
      $164 = $163&255;
      $166 = $164;
     }
     $165 = $166&255;
     $167 = $16;
     $168 = ((($167)) + 3|0);
     HEAP8[$168>>0] = $165;
    } else {
     $169 = $17;
     $170 = $11;
     $171 = ($169|0)==($170|0);
     if ($171) {
      label = 30;
      break L9;
     }
    }
    $177 = $4;
    $178 = $17;
    $179 = $178&65535;
    _stbi__out_gif_code($177,$179);
    $180 = $11;
    $181 = $10;
    $182 = $180 & $181;
    $183 = ($182|0)==(0);
    $184 = $11;
    $185 = ($184|0)<=(4095);
    $or$cond = $183 & $185;
    if ($or$cond) {
     $186 = $9;
     $187 = (($186) + 1)|0;
     $9 = $187;
     $188 = $9;
     $189 = 1 << $188;
     $190 = (($189) - 1)|0;
     $10 = $190;
    }
    $191 = $17;
    $12 = $191;
   }
  } while(0);
 }
 if ((label|0) == 10) {
  $67 = $4;
  $68 = ((($67)) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $2 = $69;
  $197 = $2;
  STACKTOP = sp;return ($197|0);
 }
 else if ((label|0) == 15) {
  $105 = $3;
  $106 = $6;
  _stbi__skip($105,$106);
  while(1) {
   $107 = $3;
   $108 = (_stbi__get8($107)|0);
   $109 = $108&255;
   $6 = $109;
   $110 = ($109|0)>(0);
   if (!($110)) {
    break;
   }
   $111 = $3;
   $112 = $6;
   _stbi__skip($111,$112);
  }
  $113 = $4;
  $114 = ((($113)) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  $2 = $115;
  $197 = $2;
  STACKTOP = sp;return ($197|0);
 }
 else if ((label|0) == 21) {
  $121 = (_stbi__err(6486)|0);
  $122 = ($121|0)!=(0);
  $123 = $122 ? 0 : 0;
  $124 = $123;
  $125 = $124;
  $2 = $125;
  $197 = $2;
  STACKTOP = sp;return ($197|0);
 }
 else if ((label|0) == 24) {
  $135 = (_stbi__err(6500)|0);
  $136 = ($135|0)!=(0);
  $137 = $136 ? 0 : 0;
  $138 = $137;
  $139 = $138;
  $2 = $139;
  $197 = $2;
  STACKTOP = sp;return ($197|0);
 }
 else if ((label|0) == 30) {
  $172 = (_stbi__err(6515)|0);
  $173 = ($172|0)!=(0);
  $174 = $173 ? 0 : 0;
  $175 = $174;
  $176 = $175;
  $2 = $176;
  $197 = $2;
  STACKTOP = sp;return ($197|0);
 }
 else if ((label|0) == 34) {
  $192 = (_stbi__err(6515)|0);
  $193 = ($192|0)!=(0);
  $194 = $193 ? 0 : 0;
  $195 = $194;
  $196 = $195;
  $2 = $196;
  $197 = $2;
  STACKTOP = sp;return ($197|0);
 }
 return (0)|0;
}
function _stbi__out_gif_code($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ((($7)) + 2088|0);
 $9 = $3;
 $10 = $9&65535;
 $11 = (($8) + ($10<<2)|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = ($13|0)>=(0);
 if ($14) {
  $15 = $2;
  $16 = $2;
  $17 = ((($16)) + 2088|0);
  $18 = $3;
  $19 = $18&65535;
  $20 = (($17) + ($19<<2)|0);
  $21 = HEAP16[$20>>1]|0;
  _stbi__out_gif_code($15,$21);
 }
 $22 = $2;
 $23 = ((($22)) + 34892|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $2;
 $26 = ((($25)) + 34884|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($24|0)>=($27|0);
 if ($28) {
  STACKTOP = sp;return;
 }
 $29 = $2;
 $30 = ((($29)) + 34888|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $2;
 $33 = ((($32)) + 34892|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($31) + ($34))|0;
 $6 = $35;
 $36 = $2;
 $37 = ((($36)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $6;
 $40 = (($38) + ($39)|0);
 $4 = $40;
 $41 = $2;
 $42 = ((($41)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $6;
 $45 = (($44|0) / 4)&-1;
 $46 = (($43) + ($45)|0);
 HEAP8[$46>>0] = 1;
 $47 = $2;
 $48 = ((($47)) + 34856|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $2;
 $51 = ((($50)) + 2088|0);
 $52 = $3;
 $53 = $52&65535;
 $54 = (($51) + ($53<<2)|0);
 $55 = ((($54)) + 3|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = $57<<2;
 $59 = (($49) + ($58)|0);
 $5 = $59;
 $60 = $5;
 $61 = ((($60)) + 3|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&255;
 $64 = ($63|0)>(128);
 if ($64) {
  $65 = $5;
  $66 = ((($65)) + 2|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $4;
  HEAP8[$68>>0] = $67;
  $69 = $5;
  $70 = ((($69)) + 1|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $4;
  $73 = ((($72)) + 1|0);
  HEAP8[$73>>0] = $71;
  $74 = $5;
  $75 = HEAP8[$74>>0]|0;
  $76 = $4;
  $77 = ((($76)) + 2|0);
  HEAP8[$77>>0] = $75;
  $78 = $5;
  $79 = ((($78)) + 3|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $4;
  $82 = ((($81)) + 3|0);
  HEAP8[$82>>0] = $80;
 }
 $83 = $2;
 $84 = ((($83)) + 34888|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + 4)|0;
 HEAP32[$84>>2] = $86;
 $87 = $2;
 $88 = ((($87)) + 34888|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $2;
 $91 = ((($90)) + 34880|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($89|0)>=($92|0);
 if (!($93)) {
  STACKTOP = sp;return;
 }
 $94 = $2;
 $95 = ((($94)) + 34872|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $2;
 $98 = ((($97)) + 34888|0);
 HEAP32[$98>>2] = $96;
 $99 = $2;
 $100 = ((($99)) + 34864|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $2;
 $103 = ((($102)) + 34892|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + ($101))|0;
 HEAP32[$103>>2] = $105;
 while(1) {
  $106 = $2;
  $107 = ((($106)) + 34892|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $2;
  $110 = ((($109)) + 34884|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($108|0)>=($111|0);
  if (!($112)) {
   label = 11;
   break;
  }
  $113 = $2;
  $114 = ((($113)) + 34860|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($115|0)>(0);
  if (!($116)) {
   label = 11;
   break;
  }
  $117 = $2;
  $118 = ((($117)) + 34860|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = 1 << $119;
  $121 = $2;
  $122 = ((($121)) + 34896|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = Math_imul($120, $123)|0;
  $125 = $2;
  $126 = ((($125)) + 34864|0);
  HEAP32[$126>>2] = $124;
  $127 = $2;
  $128 = ((($127)) + 34876|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $2;
  $131 = ((($130)) + 34864|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $132 >> 1;
  $134 = (($129) + ($133))|0;
  $135 = $2;
  $136 = ((($135)) + 34892|0);
  HEAP32[$136>>2] = $134;
  $137 = $2;
  $138 = ((($137)) + 34860|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (($139) + -1)|0;
  HEAP32[$138>>2] = $140;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _stbi__psd_decode_rle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 L1: while(1) {
  $11 = $6;
  $12 = $7;
  $13 = (($11) - ($12))|0;
  $8 = $13;
  $14 = ($13|0)>(0);
  if (!($14)) {
   label = 17;
   break;
  }
  $15 = $4;
  $16 = (_stbi__get8($15)|0);
  $17 = $16&255;
  $9 = $17;
  $18 = $9;
  $19 = ($18|0)==(128);
  L4: do {
   if (!($19)) {
    $20 = $9;
    $21 = ($20|0)<(128);
    $22 = $9;
    if ($21) {
     $23 = (($22) + 1)|0;
     $9 = $23;
     $24 = $9;
     $25 = $8;
     $26 = ($24|0)>($25|0);
     if ($26) {
      label = 6;
      break L1;
     }
     $27 = $9;
     $28 = $7;
     $29 = (($28) + ($27))|0;
     $7 = $29;
     while(1) {
      $30 = $9;
      $31 = ($30|0)!=(0);
      if (!($31)) {
       break L4;
      }
      $32 = $4;
      $33 = (_stbi__get8($32)|0);
      $34 = $5;
      HEAP8[$34>>0] = $33;
      $35 = $5;
      $36 = ((($35)) + 4|0);
      $5 = $36;
      $37 = $9;
      $38 = (($37) + -1)|0;
      $9 = $38;
     }
    }
    $39 = ($22|0)>(128);
    if ($39) {
     $40 = $9;
     $41 = (257 - ($40))|0;
     $9 = $41;
     $42 = $9;
     $43 = $8;
     $44 = ($42|0)>($43|0);
     if ($44) {
      label = 12;
      break L1;
     }
     $45 = $4;
     $46 = (_stbi__get8($45)|0);
     $10 = $46;
     $47 = $9;
     $48 = $7;
     $49 = (($48) + ($47))|0;
     $7 = $49;
     while(1) {
      $50 = $9;
      $51 = ($50|0)!=(0);
      if (!($51)) {
       break L4;
      }
      $52 = $10;
      $53 = $5;
      HEAP8[$53>>0] = $52;
      $54 = $5;
      $55 = ((($54)) + 4|0);
      $5 = $55;
      $56 = $9;
      $57 = (($56) + -1)|0;
      $9 = $57;
     }
    }
   }
  } while(0);
 }
 if ((label|0) == 6) {
  $3 = 0;
  $58 = $3;
  STACKTOP = sp;return ($58|0);
 }
 else if ((label|0) == 12) {
  $3 = 0;
  $58 = $3;
  STACKTOP = sp;return ($58|0);
 }
 else if ((label|0) == 17) {
  $3 = 1;
  $58 = $3;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function _stbi__pic_test_core($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_stbi__pic_is4($4,6645)|0);
 $6 = ($5|0)!=(0);
 do {
  if ($6) {
   $3 = 0;
   while(1) {
    $7 = $3;
    $8 = ($7|0)<(84);
    $9 = $2;
    if (!($8)) {
     break;
    }
    (_stbi__get8($9)|0);
    $10 = $3;
    $11 = (($10) + 1)|0;
    $3 = $11;
   }
   $12 = (_stbi__pic_is4($9,6650)|0);
   $13 = ($12|0)!=(0);
   if ($13) {
    $1 = 1;
    break;
   } else {
    $1 = 0;
    break;
   }
  } else {
   $1 = 0;
  }
 } while(0);
 $14 = $1;
 STACKTOP = sp;return ($14|0);
}
function _stbi__pic_is4($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = ($6|0)<(4);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $3;
  $9 = (_stbi__get8($8)|0);
  $10 = $9&255;
  $11 = $4;
  $12 = $5;
  $13 = (($11) + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($10|0)!=($15|0);
  if ($16) {
   label = 4;
   break;
  }
  $17 = $5;
  $18 = (($17) + 1)|0;
  $5 = $18;
 }
 if ((label|0) == 4) {
  $2 = 0;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 else if ((label|0) == 6) {
  $2 = 1;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _stbi__pic_load_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $15 = sp;
 $24 = sp + 116|0;
 $28 = sp + 112|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 0;
 $12 = 0;
 while(1) {
  $29 = $12;
  $30 = ($29|0)==(10);
  if ($30) {
   label = 3;
   break;
  }
  $36 = $12;
  $37 = (($36) + 1)|0;
  $12 = $37;
  $38 = (($15) + (($36*3)|0)|0);
  $16 = $38;
  $39 = $6;
  $40 = (_stbi__get8($39)|0);
  $41 = $40&255;
  $14 = $41;
  $42 = $6;
  $43 = (_stbi__get8($42)|0);
  $44 = $16;
  HEAP8[$44>>0] = $43;
  $45 = $6;
  $46 = (_stbi__get8($45)|0);
  $47 = $16;
  $48 = ((($47)) + 1|0);
  HEAP8[$48>>0] = $46;
  $49 = $6;
  $50 = (_stbi__get8($49)|0);
  $51 = $16;
  $52 = ((($51)) + 2|0);
  HEAP8[$52>>0] = $50;
  $53 = $16;
  $54 = ((($53)) + 2|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = $11;
  $58 = $57 | $56;
  $11 = $58;
  $59 = $6;
  $60 = (_stbi__at_eof($59)|0);
  $61 = ($60|0)!=(0);
  if ($61) {
   label = 5;
   break;
  }
  $67 = $16;
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = ($69|0)!=(8);
  if ($70) {
   label = 7;
   break;
  }
  $76 = $14;
  $77 = ($76|0)!=(0);
  if (!($77)) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 3) {
  $31 = (_stbi__err(6664)|0);
  $32 = ($31|0)!=(0);
  $33 = $32 ? 0 : 0;
  $34 = $33;
  $35 = $34;
  $5 = $35;
  $245 = $5;
  STACKTOP = sp;return ($245|0);
 }
 else if ((label|0) == 5) {
  $62 = (_stbi__err(6655)|0);
  $63 = ($62|0)!=(0);
  $64 = $63 ? 0 : 0;
  $65 = $64;
  $66 = $65;
  $5 = $66;
  $245 = $5;
  STACKTOP = sp;return ($245|0);
 }
 else if ((label|0) == 7) {
  $71 = (_stbi__err(6664)|0);
  $72 = ($71|0)!=(0);
  $73 = $72 ? 0 : 0;
  $74 = $73;
  $75 = $74;
  $5 = $75;
  $245 = $5;
  STACKTOP = sp;return ($245|0);
 }
 else if ((label|0) == 9) {
  $78 = $11;
  $79 = $78 & 16;
  $80 = ($79|0)!=(0);
  $81 = $80 ? 4 : 3;
  $82 = $9;
  HEAP32[$82>>2] = $81;
  $13 = 0;
  L10: while(1) {
   $83 = $13;
   $84 = $8;
   $85 = ($83|0)<($84|0);
   if (!($85)) {
    label = 57;
    break;
   }
   $17 = 0;
   while(1) {
    $86 = $17;
    $87 = $12;
    $88 = ($86|0)<($87|0);
    if (!($88)) {
     break;
    }
    $89 = $17;
    $90 = (($15) + (($89*3)|0)|0);
    $18 = $90;
    $91 = $10;
    $92 = $13;
    $93 = $7;
    $94 = Math_imul($92, $93)|0;
    $95 = $94<<2;
    $96 = (($91) + ($95)|0);
    $19 = $96;
    $97 = $18;
    $98 = ((($97)) + 1|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    L16: do {
     switch ($100|0) {
     case 0:  {
      $20 = 0;
      while(1) {
       $106 = $20;
       $107 = $7;
       $108 = ($106|0)<($107|0);
       if (!($108)) {
        break L16;
       }
       $109 = $6;
       $110 = $18;
       $111 = ((($110)) + 2|0);
       $112 = HEAP8[$111>>0]|0;
       $113 = $112&255;
       $114 = $19;
       $115 = (_stbi__readval($109,$113,$114)|0);
       $116 = ($115|0)!=(0|0);
       if (!($116)) {
        label = 18;
        break L10;
       }
       $117 = $20;
       $118 = (($117) + 1)|0;
       $20 = $118;
       $119 = $19;
       $120 = ((($119)) + 4|0);
       $19 = $120;
      }
      break;
     }
     case 1:  {
      $121 = $7;
      $21 = $121;
      while(1) {
       $122 = $21;
       $123 = ($122|0)>(0);
       if (!($123)) {
        break L16;
       }
       $124 = $6;
       $125 = (_stbi__get8($124)|0);
       $23 = $125;
       $126 = $6;
       $127 = (_stbi__at_eof($126)|0);
       $128 = ($127|0)!=(0);
       if ($128) {
        label = 23;
        break L10;
       }
       $134 = $23;
       $135 = $134&255;
       $136 = $21;
       $137 = ($135|0)>($136|0);
       if ($137) {
        $138 = $21;
        $139 = $138&255;
        $23 = $139;
       }
       $140 = $6;
       $141 = $18;
       $142 = ((($141)) + 2|0);
       $143 = HEAP8[$142>>0]|0;
       $144 = $143&255;
       $145 = (_stbi__readval($140,$144,$24)|0);
       $146 = ($145|0)!=(0|0);
       if (!($146)) {
        label = 27;
        break L10;
       }
       $22 = 0;
       while(1) {
        $147 = $22;
        $148 = $23;
        $149 = $148&255;
        $150 = ($147|0)<($149|0);
        if (!($150)) {
         break;
        }
        $151 = $18;
        $152 = ((($151)) + 2|0);
        $153 = HEAP8[$152>>0]|0;
        $154 = $153&255;
        $155 = $19;
        _stbi__copyval($154,$155,$24);
        $156 = $22;
        $157 = (($156) + 1)|0;
        $22 = $157;
        $158 = $19;
        $159 = ((($158)) + 4|0);
        $19 = $159;
       }
       $160 = $23;
       $161 = $160&255;
       $162 = $21;
       $163 = (($162) - ($161))|0;
       $21 = $163;
      }
      break;
     }
     case 2:  {
      $164 = $7;
      $25 = $164;
      while(1) {
       $165 = $25;
       $166 = ($165|0)>(0);
       if (!($166)) {
        break L16;
       }
       $167 = $6;
       $168 = (_stbi__get8($167)|0);
       $169 = $168&255;
       $26 = $169;
       $170 = $6;
       $171 = (_stbi__at_eof($170)|0);
       $172 = ($171|0)!=(0);
       if ($172) {
        label = 35;
        break L10;
       }
       $178 = $26;
       $179 = ($178|0)>=(128);
       $180 = $26;
       L40: do {
        if ($179) {
         $181 = ($180|0)==(128);
         if ($181) {
          $182 = $6;
          $183 = (_stbi__get16be($182)|0);
          $26 = $183;
         } else {
          $184 = $26;
          $185 = (($184) - 127)|0;
          $26 = $185;
         }
         $186 = $26;
         $187 = $25;
         $188 = ($186|0)>($187|0);
         if ($188) {
          label = 41;
          break L10;
         }
         $194 = $6;
         $195 = $18;
         $196 = ((($195)) + 2|0);
         $197 = HEAP8[$196>>0]|0;
         $198 = $197&255;
         $199 = (_stbi__readval($194,$198,$28)|0);
         $200 = ($199|0)!=(0|0);
         if (!($200)) {
          label = 43;
          break L10;
         }
         $27 = 0;
         while(1) {
          $201 = $27;
          $202 = $26;
          $203 = ($201|0)<($202|0);
          if (!($203)) {
           break L40;
          }
          $204 = $18;
          $205 = ((($204)) + 2|0);
          $206 = HEAP8[$205>>0]|0;
          $207 = $206&255;
          $208 = $19;
          _stbi__copyval($207,$208,$28);
          $209 = $27;
          $210 = (($209) + 1)|0;
          $27 = $210;
          $211 = $19;
          $212 = ((($211)) + 4|0);
          $19 = $212;
         }
        } else {
         $213 = (($180) + 1)|0;
         $26 = $213;
         $214 = $26;
         $215 = $25;
         $216 = ($214|0)>($215|0);
         if ($216) {
          label = 48;
          break L10;
         }
         $27 = 0;
         while(1) {
          $222 = $27;
          $223 = $26;
          $224 = ($222|0)<($223|0);
          if (!($224)) {
           break L40;
          }
          $225 = $6;
          $226 = $18;
          $227 = ((($226)) + 2|0);
          $228 = HEAP8[$227>>0]|0;
          $229 = $228&255;
          $230 = $19;
          $231 = (_stbi__readval($225,$229,$230)|0);
          $232 = ($231|0)!=(0|0);
          if (!($232)) {
           label = 52;
           break L10;
          }
          $233 = $27;
          $234 = (($233) + 1)|0;
          $27 = $234;
          $235 = $19;
          $236 = ((($235)) + 4|0);
          $19 = $236;
         }
        }
       } while(0);
       $237 = $26;
       $238 = $25;
       $239 = (($238) - ($237))|0;
       $25 = $239;
      }
      break;
     }
     default: {
      label = 14;
      break L10;
     }
     }
    } while(0);
    $240 = $17;
    $241 = (($240) + 1)|0;
    $17 = $241;
   }
   $242 = $13;
   $243 = (($242) + 1)|0;
   $13 = $243;
  }
  switch (label|0) {
   case 14: {
    $101 = (_stbi__err(6664)|0);
    $102 = ($101|0)!=(0);
    $103 = $102 ? 0 : 0;
    $104 = $103;
    $105 = $104;
    $5 = $105;
    $245 = $5;
    STACKTOP = sp;return ($245|0);
    break;
   }
   case 18: {
    $5 = 0;
    $245 = $5;
    STACKTOP = sp;return ($245|0);
    break;
   }
   case 23: {
    $129 = (_stbi__err(6655)|0);
    $130 = ($129|0)!=(0);
    $131 = $130 ? 0 : 0;
    $132 = $131;
    $133 = $132;
    $5 = $133;
    $245 = $5;
    STACKTOP = sp;return ($245|0);
    break;
   }
   case 27: {
    $5 = 0;
    $245 = $5;
    STACKTOP = sp;return ($245|0);
    break;
   }
   case 35: {
    $173 = (_stbi__err(6655)|0);
    $174 = ($173|0)!=(0);
    $175 = $174 ? 0 : 0;
    $176 = $175;
    $177 = $176;
    $5 = $177;
    $245 = $5;
    STACKTOP = sp;return ($245|0);
    break;
   }
   case 41: {
    $189 = (_stbi__err(6655)|0);
    $190 = ($189|0)!=(0);
    $191 = $190 ? 0 : 0;
    $192 = $191;
    $193 = $192;
    $5 = $193;
    $245 = $5;
    STACKTOP = sp;return ($245|0);
    break;
   }
   case 43: {
    $5 = 0;
    $245 = $5;
    STACKTOP = sp;return ($245|0);
    break;
   }
   case 48: {
    $217 = (_stbi__err(6655)|0);
    $218 = ($217|0)!=(0);
    $219 = $218 ? 0 : 0;
    $220 = $219;
    $221 = $220;
    $5 = $221;
    $245 = $5;
    STACKTOP = sp;return ($245|0);
    break;
   }
   case 52: {
    $5 = 0;
    $245 = $5;
    STACKTOP = sp;return ($245|0);
    break;
   }
   case 57: {
    $244 = $10;
    $5 = $244;
    $245 = $5;
    STACKTOP = sp;return ($245|0);
    break;
   }
  }
 }
 return (0)|0;
}
function _stbi__readval($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 128;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = ($9|0)<(4);
  if (!($10)) {
   label = 8;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = $11 & $12;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $4;
   $16 = (_stbi__at_eof($15)|0);
   $17 = ($16|0)!=(0);
   if ($17) {
    label = 5;
    break;
   }
   $23 = $4;
   $24 = (_stbi__get8($23)|0);
   $25 = $6;
   $26 = $8;
   $27 = (($25) + ($26)|0);
   HEAP8[$27>>0] = $24;
  }
  $28 = $8;
  $29 = (($28) + 1)|0;
  $8 = $29;
  $30 = $7;
  $31 = $30 >> 1;
  $7 = $31;
 }
 if ((label|0) == 5) {
  $18 = (_stbi__err(6655)|0);
  $19 = ($18|0)!=(0);
  $20 = $19 ? 0 : 0;
  $21 = $20;
  $22 = $21;
  $3 = $22;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 }
 else if ((label|0) == 8) {
  $32 = $6;
  $3 = $32;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _stbi__copyval($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 128;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = ($8|0)<(4);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = $6;
  $12 = $10 & $11;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $5;
   $15 = $7;
   $16 = (($14) + ($15)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $4;
   $19 = $7;
   $20 = (($18) + ($19)|0);
   HEAP8[$20>>0] = $17;
  }
  $21 = $7;
  $22 = (($21) + 1)|0;
  $7 = $22;
  $23 = $6;
  $24 = $23 >> 1;
  $6 = $24;
 }
 STACKTOP = sp;return;
}
function _stbi__pnm_info($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $10 = sp;
 $11 = sp + 30|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $6;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  $6 = $10;
 }
 $16 = $7;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $7 = $10;
 }
 $18 = $8;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $8 = $10;
 }
 $20 = $5;
 _stbi__rewind($20);
 $21 = $5;
 $22 = (_stbi__get8($21)|0);
 $12 = $22;
 $23 = $5;
 $24 = (_stbi__get8($23)|0);
 $13 = $24;
 $25 = $12;
 $26 = $25 << 24 >> 24;
 $27 = ($26|0)!=(80);
 do {
  if (!($27)) {
   $28 = $13;
   $29 = $28 << 24 >> 24;
   $30 = ($29|0)!=(53);
   if ($30) {
    $31 = $13;
    $32 = $31 << 24 >> 24;
    $33 = ($32|0)!=(54);
    if ($33) {
     break;
    }
   }
   $35 = $13;
   $36 = $35 << 24 >> 24;
   $37 = ($36|0)==(54);
   $38 = $37 ? 3 : 1;
   $39 = $8;
   HEAP32[$39>>2] = $38;
   $40 = $5;
   $41 = (_stbi__get8($40)|0);
   HEAP8[$11>>0] = $41;
   $42 = $5;
   _stbi__pnm_skip_whitespace($42,$11);
   $43 = $5;
   $44 = (_stbi__pnm_getinteger($43,$11)|0);
   $45 = $6;
   HEAP32[$45>>2] = $44;
   $46 = $5;
   _stbi__pnm_skip_whitespace($46,$11);
   $47 = $5;
   $48 = (_stbi__pnm_getinteger($47,$11)|0);
   $49 = $7;
   HEAP32[$49>>2] = $48;
   $50 = $5;
   _stbi__pnm_skip_whitespace($50,$11);
   $51 = $5;
   $52 = (_stbi__pnm_getinteger($51,$11)|0);
   $9 = $52;
   $53 = $9;
   $54 = ($53|0)>(255);
   if ($54) {
    $55 = (_stbi__err(6675)|0);
    $4 = $55;
    $56 = $4;
    STACKTOP = sp;return ($56|0);
   } else {
    $4 = 1;
    $56 = $4;
    STACKTOP = sp;return ($56|0);
   }
  }
 } while(0);
 $34 = $5;
 _stbi__rewind($34);
 $4 = 0;
 $56 = $4;
 STACKTOP = sp;return ($56|0);
}
function _stbi__pnm_skip_whitespace($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  while(1) {
   $4 = $2;
   $5 = (_stbi__at_eof($4)|0);
   $6 = ($5|0)!=(0);
   if ($6) {
    $34 = 0;
   } else {
    $7 = $3;
    $8 = HEAP8[$7>>0]|0;
    $9 = (_stbi__pnm_isspace($8)|0);
    $10 = ($9|0)!=(0);
    $34 = $10;
   }
   $11 = $2;
   if (!($34)) {
    break;
   }
   $12 = (_stbi__get8($11)|0);
   $13 = $3;
   HEAP8[$13>>0] = $12;
  }
  $14 = (_stbi__at_eof($11)|0);
  $15 = ($14|0)!=(0);
  if ($15) {
   label = 15;
   break;
  }
  $16 = $3;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(35);
  if ($19) {
   label = 15;
   break;
  }
  while(1) {
   $20 = $2;
   $21 = (_stbi__at_eof($20)|0);
   $22 = ($21|0)!=(0);
   if ($22) {
    break;
   }
   $23 = $3;
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = ($25|0)!=(10);
   if (!($26)) {
    break;
   }
   $27 = $3;
   $28 = HEAP8[$27>>0]|0;
   $29 = $28 << 24 >> 24;
   $30 = ($29|0)!=(13);
   if (!($30)) {
    break;
   }
   $31 = $2;
   $32 = (_stbi__get8($31)|0);
   $33 = $3;
   HEAP8[$33>>0] = $32;
  }
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return;
 }
}
function _stbi__pnm_getinteger($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $2;
  $6 = (_stbi__at_eof($5)|0);
  $7 = ($6|0)!=(0);
  if ($7) {
   $22 = 0;
  } else {
   $8 = $3;
   $9 = HEAP8[$8>>0]|0;
   $10 = (_stbi__pnm_isdigit($9)|0);
   $11 = ($10|0)!=(0);
   $22 = $11;
  }
  $12 = $4;
  if (!($22)) {
   break;
  }
  $13 = ($12*10)|0;
  $14 = $3;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = (($16) - 48)|0;
  $18 = (($13) + ($17))|0;
  $4 = $18;
  $19 = $2;
  $20 = (_stbi__get8($19)|0);
  $21 = $3;
  HEAP8[$21>>0] = $20;
 }
 STACKTOP = sp;return ($12|0);
}
function _stbi__pnm_isspace($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==(32);
 if ($4) {
  $21 = 1;
 } else {
  $5 = $1;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)==(9);
  if ($7) {
   $21 = 1;
  } else {
   $8 = $1;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==(10);
   if ($10) {
    $21 = 1;
   } else {
    $11 = $1;
    $12 = $11 << 24 >> 24;
    $13 = ($12|0)==(11);
    if ($13) {
     $21 = 1;
    } else {
     $14 = $1;
     $15 = $14 << 24 >> 24;
     $16 = ($15|0)==(12);
     if ($16) {
      $21 = 1;
     } else {
      $17 = $1;
      $18 = $17 << 24 >> 24;
      $19 = ($18|0)==(13);
      $21 = $19;
     }
    }
   }
  }
 }
 $20 = $21&1;
 STACKTOP = sp;return ($20|0);
}
function _stbi__pnm_isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)>=(48);
 if ($4) {
  $5 = $1;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)<=(57);
  $9 = $7;
 } else {
  $9 = 0;
 }
 $8 = $9&1;
 STACKTOP = sp;return ($8|0);
}
function _stbi__hdr_gettoken($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 $6 = $2;
 $7 = (_stbi__get8($6)|0);
 $5 = $7;
 while(1) {
  $8 = $2;
  $9 = (_stbi__at_eof($8)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   break;
  }
  $11 = $5;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(10);
  if (!($13)) {
   break;
  }
  $14 = $5;
  $15 = $3;
  $16 = $4;
  $17 = (($16) + 1)|0;
  $4 = $17;
  $18 = (($15) + ($16)|0);
  HEAP8[$18>>0] = $14;
  $19 = $4;
  $20 = ($19|0)==(1023);
  if ($20) {
   label = 5;
   break;
  }
  $28 = $2;
  $29 = (_stbi__get8($28)|0);
  $5 = $29;
 }
 L6: do {
  if ((label|0) == 5) {
   while(1) {
    $21 = $2;
    $22 = (_stbi__at_eof($21)|0);
    $23 = ($22|0)!=(0);
    if ($23) {
     break L6;
    }
    $24 = $2;
    $25 = (_stbi__get8($24)|0);
    $26 = $25&255;
    $27 = ($26|0)!=(10);
    if (!($27)) {
     break L6;
    }
   }
  }
 } while(0);
 $30 = $3;
 $31 = $4;
 $32 = (($30) + ($31)|0);
 HEAP8[$32>>0] = 0;
 $33 = $3;
 STACKTOP = sp;return ($33|0);
}
function _stbi__mad4sizes_valid($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = (_stbi__mul2sizes_valid($10,$11)|0);
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $39 = 0;
  $38 = $39&1;
  STACKTOP = sp;return ($38|0);
 }
 $14 = $5;
 $15 = $6;
 $16 = Math_imul($14, $15)|0;
 $17 = $7;
 $18 = (_stbi__mul2sizes_valid($16,$17)|0);
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $39 = 0;
  $38 = $39&1;
  STACKTOP = sp;return ($38|0);
 }
 $20 = $5;
 $21 = $6;
 $22 = Math_imul($20, $21)|0;
 $23 = $7;
 $24 = Math_imul($22, $23)|0;
 $25 = $8;
 $26 = (_stbi__mul2sizes_valid($24,$25)|0);
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $39 = 0;
  $38 = $39&1;
  STACKTOP = sp;return ($38|0);
 }
 $28 = $5;
 $29 = $6;
 $30 = Math_imul($28, $29)|0;
 $31 = $7;
 $32 = Math_imul($30, $31)|0;
 $33 = $8;
 $34 = Math_imul($32, $33)|0;
 $35 = $9;
 $36 = (_stbi__addsizes_valid($34,$35)|0);
 $37 = ($36|0)!=(0);
 $39 = $37;
 $38 = $39&1;
 STACKTOP = sp;return ($38|0);
}
function _stbi__malloc_mad4($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = $9;
 $15 = $10;
 $16 = (_stbi__mad4sizes_valid($11,$12,$13,$14,$15)|0);
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $6;
  $19 = $7;
  $20 = Math_imul($18, $19)|0;
  $21 = $8;
  $22 = Math_imul($20, $21)|0;
  $23 = $9;
  $24 = Math_imul($22, $23)|0;
  $25 = $10;
  $26 = (($24) + ($25))|0;
  $27 = (_stbi__malloc($26)|0);
  $5 = $27;
  $28 = $5;
  STACKTOP = sp;return ($28|0);
 } else {
  $5 = 0;
  $28 = $5;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _stbi__hdr_convert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = ((($7)) + 3|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $69 = $5;
  switch ($69|0) {
  case 4:  {
   $70 = $3;
   $71 = ((($70)) + 12|0);
   HEAPF32[$71>>2] = 1.0;
   label = 11;
   break;
  }
  case 3:  {
   label = 11;
   break;
  }
  case 2:  {
   $77 = $3;
   $78 = ((($77)) + 4|0);
   HEAPF32[$78>>2] = 1.0;
   label = 13;
   break;
  }
  case 1:  {
   label = 13;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  if ((label|0) == 11) {
   $72 = $3;
   $73 = ((($72)) + 8|0);
   HEAPF32[$73>>2] = 0.0;
   $74 = $3;
   $75 = ((($74)) + 4|0);
   HEAPF32[$75>>2] = 0.0;
   $76 = $3;
   HEAPF32[$76>>2] = 0.0;
   STACKTOP = sp;return;
  }
  else if ((label|0) == 13) {
   $79 = $3;
   HEAPF32[$79>>2] = 0.0;
   STACKTOP = sp;return;
  }
 }
 $12 = $4;
 $13 = ((($12)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (($15) - 136)|0;
 $17 = (+_ldexp(1.0,$16));
 $18 = $17;
 $6 = $18;
 $19 = $5;
 $20 = ($19|0)<=(2);
 $21 = $4;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 if ($20) {
  $24 = $4;
  $25 = ((($24)) + 1|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = (($23) + ($27))|0;
  $29 = $4;
  $30 = ((($29)) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = (($28) + ($32))|0;
  $34 = (+($33|0));
  $35 = $6;
  $36 = $34 * $35;
  $37 = $36 / 3.0;
  $38 = $3;
  HEAPF32[$38>>2] = $37;
 } else {
  $39 = (+($23|0));
  $40 = $6;
  $41 = $39 * $40;
  $42 = $3;
  HEAPF32[$42>>2] = $41;
  $43 = $4;
  $44 = ((($43)) + 1|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = (+($46|0));
  $48 = $6;
  $49 = $47 * $48;
  $50 = $3;
  $51 = ((($50)) + 4|0);
  HEAPF32[$51>>2] = $49;
  $52 = $4;
  $53 = ((($52)) + 2|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = (+($55|0));
  $57 = $6;
  $58 = $56 * $57;
  $59 = $3;
  $60 = ((($59)) + 8|0);
  HEAPF32[$60>>2] = $58;
 }
 $61 = $5;
 $62 = ($61|0)==(2);
 if ($62) {
  $63 = $3;
  $64 = ((($63)) + 4|0);
  HEAPF32[$64>>2] = 1.0;
 }
 $65 = $5;
 $66 = ($65|0)==(4);
 if (!($66)) {
  STACKTOP = sp;return;
 }
 $67 = $3;
 $68 = ((($67)) + 12|0);
 HEAPF32[$68>>2] = 1.0;
 STACKTOP = sp;return;
}
function _stbi__tga_get_comp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $6;
  HEAP32[$9>>2] = 0;
 }
 $10 = $4;
 switch ($10|0) {
 case 8:  {
  $3 = 1;
  break;
 }
 case 16:  {
  $11 = $5;
  $12 = ($11|0)!=(0);
  if ($12) {
   $3 = 2;
  } else {
   label = 7;
  }
  break;
 }
 case 15:  {
  label = 7;
  break;
 }
 case 32: case 24:  {
  $16 = $4;
  $17 = (($16|0) / 8)&-1;
  $3 = $17;
  break;
 }
 default: {
  $3 = 0;
 }
 }
 if ((label|0) == 7) {
  $13 = $6;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $6;
   HEAP32[$15>>2] = 1;
  }
  $3 = 3;
 }
 $18 = $3;
 STACKTOP = sp;return ($18|0);
}
function _stbi__tga_read_rgb16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = (_stbi__get16le($9)|0);
 $11 = $10&65535;
 $4 = $11;
 $5 = 31;
 $12 = $4;
 $13 = $12&65535;
 $14 = $13 >> 10;
 $15 = $5;
 $16 = $15&65535;
 $17 = $14 & $16;
 $6 = $17;
 $18 = $4;
 $19 = $18&65535;
 $20 = $19 >> 5;
 $21 = $5;
 $22 = $21&65535;
 $23 = $20 & $22;
 $7 = $23;
 $24 = $4;
 $25 = $24&65535;
 $26 = $5;
 $27 = $26&65535;
 $28 = $25 & $27;
 $8 = $28;
 $29 = $6;
 $30 = ($29*255)|0;
 $31 = (($30|0) / 31)&-1;
 $32 = $31&255;
 $33 = $3;
 HEAP8[$33>>0] = $32;
 $34 = $7;
 $35 = ($34*255)|0;
 $36 = (($35|0) / 31)&-1;
 $37 = $36&255;
 $38 = $3;
 $39 = ((($38)) + 1|0);
 HEAP8[$39>>0] = $37;
 $40 = $8;
 $41 = ($40*255)|0;
 $42 = (($41|0) / 31)&-1;
 $43 = $42&255;
 $44 = $3;
 $45 = ((($44)) + 2|0);
 HEAP8[$45>>0] = $43;
 STACKTOP = sp;return;
}
function _stbi__parse_zlib($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $3;
  $10 = (_stbi__parse_zlib_header($9)|0);
  $11 = ($10|0)!=(0);
  if ($11) {
   label = 4;
  } else {
   $2 = 0;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $12 = $3;
   $13 = ((($12)) + 8|0);
   HEAP32[$13>>2] = 0;
   $14 = $3;
   $15 = ((($14)) + 12|0);
   HEAP32[$15>>2] = 0;
   while(1) {
    $16 = $3;
    $17 = (_stbi__zreceive($16,1)|0);
    $5 = $17;
    $18 = $3;
    $19 = (_stbi__zreceive($18,2)|0);
    $6 = $19;
    $20 = $6;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $3;
     $23 = (_stbi__parse_uncompressed_block($22)|0);
     $24 = ($23|0)!=(0);
     if (!($24)) {
      label = 7;
      break;
     }
    } else {
     $25 = $6;
     $26 = ($25|0)==(3);
     if ($26) {
      label = 9;
      break;
     }
     $27 = $6;
     $28 = ($27|0)==(1);
     $29 = $3;
     if ($28) {
      $30 = ((($29)) + 32|0);
      $31 = (_stbi__zbuild_huffman($30,528,288)|0);
      $32 = ($31|0)!=(0);
      if (!($32)) {
       label = 12;
       break;
      }
      $33 = $3;
      $34 = ((($33)) + 2052|0);
      $35 = (_stbi__zbuild_huffman($34,816,32)|0);
      $36 = ($35|0)!=(0);
      if (!($36)) {
       label = 14;
       break;
      }
     } else {
      $37 = (_stbi__compute_huffman_codes($29)|0);
      $38 = ($37|0)!=(0);
      if (!($38)) {
       label = 16;
       break;
      }
     }
     $39 = $3;
     $40 = (_stbi__parse_huffman_block($39)|0);
     $41 = ($40|0)!=(0);
     if (!($41)) {
      label = 18;
      break;
     }
    }
    $42 = $5;
    $43 = ($42|0)!=(0);
    $44 = $43 ^ 1;
    if (!($44)) {
     label = 20;
     break;
    }
   }
   if ((label|0) == 7) {
    $2 = 0;
    break;
   }
   else if ((label|0) == 9) {
    $2 = 0;
    break;
   }
   else if ((label|0) == 12) {
    $2 = 0;
    break;
   }
   else if ((label|0) == 14) {
    $2 = 0;
    break;
   }
   else if ((label|0) == 16) {
    $2 = 0;
    break;
   }
   else if ((label|0) == 18) {
    $2 = 0;
    break;
   }
   else if ((label|0) == 20) {
    $2 = 1;
    break;
   }
  }
 } while(0);
 $45 = $2;
 STACKTOP = sp;return ($45|0);
}
function _stbi__parse_zlib_header($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = $2;
 $7 = (_stbi__zget8($6)|0);
 $8 = $7&255;
 $3 = $8;
 $9 = $3;
 $10 = $9 & 15;
 $4 = $10;
 $11 = $2;
 $12 = (_stbi__zget8($11)|0);
 $13 = $12&255;
 $5 = $13;
 $14 = $3;
 $15 = $14<<8;
 $16 = $5;
 $17 = (($15) + ($16))|0;
 $18 = (($17|0) % 31)&-1;
 $19 = ($18|0)!=(0);
 do {
  if ($19) {
   $20 = (_stbi__err(6871)|0);
   $1 = $20;
  } else {
   $21 = $5;
   $22 = $21 & 32;
   $23 = ($22|0)!=(0);
   if ($23) {
    $24 = (_stbi__err(6887)|0);
    $1 = $24;
    break;
   }
   $25 = $4;
   $26 = ($25|0)!=(8);
   if ($26) {
    $27 = (_stbi__err(6621)|0);
    $1 = $27;
    break;
   } else {
    $1 = 1;
    break;
   }
  }
 } while(0);
 $28 = $1;
 STACKTOP = sp;return ($28|0);
}
function _stbi__zreceive($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = ($7|0)<($8|0);
 if ($9) {
  $10 = $2;
  _stbi__fill_bits($10);
 }
 $11 = $2;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = 1 << $14;
 $16 = (($15) - 1)|0;
 $17 = $13 & $16;
 $4 = $17;
 $18 = $3;
 $19 = $2;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >>> $18;
 HEAP32[$20>>2] = $22;
 $23 = $3;
 $24 = $2;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) - ($23))|0;
 HEAP32[$25>>2] = $27;
 $28 = $4;
 STACKTOP = sp;return ($28|0);
}
function _stbi__parse_uncompressed_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $2 = $0;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 7;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $2;
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 7;
  (_stbi__zreceive($12,$16)|0);
 }
 $6 = 0;
 while(1) {
  $17 = $2;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)>(0);
  $21 = $2;
  if (!($20)) {
   break;
  }
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 255;
  $25 = $24&255;
  $26 = $6;
  $27 = (($26) + 1)|0;
  $6 = $27;
  $28 = (($3) + ($26)|0);
  HEAP8[$28>>0] = $25;
  $29 = $2;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 >>> 8;
  HEAP32[$30>>2] = $32;
  $33 = $2;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) - 8)|0;
  HEAP32[$34>>2] = $36;
 }
 $37 = ((($21)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0);
 if (!($39)) {
  ___assert_fail((6955|0),(4971|0),4082,(6972|0));
  // unreachable;
 }
 while(1) {
  $40 = $6;
  $41 = ($40|0)<(4);
  if (!($41)) {
   break;
  }
  $42 = $2;
  $43 = (_stbi__zget8($42)|0);
  $44 = $6;
  $45 = (($44) + 1)|0;
  $6 = $45;
  $46 = (($3) + ($44)|0);
  HEAP8[$46>>0] = $43;
 }
 $47 = ((($3)) + 1|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = $49<<8;
 $51 = HEAP8[$3>>0]|0;
 $52 = $51&255;
 $53 = (($50) + ($52))|0;
 $4 = $53;
 $54 = ((($3)) + 3|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $56<<8;
 $58 = ((($3)) + 2|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = (($57) + ($60))|0;
 $5 = $61;
 $62 = $5;
 $63 = $4;
 $64 = $63 ^ 65535;
 $65 = ($62|0)!=($64|0);
 if ($65) {
  $66 = (_stbi__err(7003)|0);
  $1 = $66;
  $107 = $1;
  STACKTOP = sp;return ($107|0);
 }
 $67 = $2;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 $70 = (($68) + ($69)|0);
 $71 = $2;
 $72 = ((($71)) + 4|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($70>>>0)>($73>>>0);
 if ($74) {
  $75 = (_stbi__err(7016)|0);
  $1 = $75;
  $107 = $1;
  STACKTOP = sp;return ($107|0);
 }
 $76 = $2;
 $77 = ((($76)) + 16|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $4;
 $80 = (($78) + ($79)|0);
 $81 = $2;
 $82 = ((($81)) + 24|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($80>>>0)>($83>>>0);
 if ($84) {
  $85 = $2;
  $86 = $2;
  $87 = ((($86)) + 16|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $4;
  $90 = (_stbi__zexpand($85,$88,$89)|0);
  $91 = ($90|0)!=(0);
  if (!($91)) {
   $1 = 0;
   $107 = $1;
   STACKTOP = sp;return ($107|0);
  }
 }
 $92 = $2;
 $93 = ((($92)) + 16|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $2;
 $96 = HEAP32[$95>>2]|0;
 $97 = $4;
 _memcpy(($94|0),($96|0),($97|0))|0;
 $98 = $4;
 $99 = $2;
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + ($98)|0);
 HEAP32[$99>>2] = $101;
 $102 = $4;
 $103 = $2;
 $104 = ((($103)) + 16|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (($105) + ($102)|0);
 HEAP32[$104>>2] = $106;
 $1 = 1;
 $107 = $1;
 STACKTOP = sp;return ($107|0);
}
function _stbi__zbuild_huffman($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $10 = sp + 80|0;
 $11 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 dest=$11; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $16 = $4;
 _memset(($16|0),0,1024)|0;
 $7 = 0;
 while(1) {
  $17 = $7;
  $18 = $6;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $5;
  $21 = $7;
  $22 = (($20) + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($11) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$25>>2] = $27;
  $28 = $7;
  $29 = (($28) + 1)|0;
  $7 = $29;
 }
 HEAP32[$11>>2] = 0;
 $7 = 1;
 while(1) {
  $30 = $7;
  $31 = ($30|0)<(16);
  if (!($31)) {
   break;
  }
  $32 = $7;
  $33 = (($11) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $7;
  $36 = 1 << $35;
  $37 = ($34|0)>($36|0);
  if ($37) {
   label = 7;
   break;
  }
  $39 = $7;
  $40 = (($39) + 1)|0;
  $7 = $40;
 }
 if ((label|0) == 7) {
  $38 = (_stbi__err(7053)|0);
  $3 = $38;
  $160 = $3;
  STACKTOP = sp;return ($160|0);
 }
 $9 = 0;
 $7 = 1;
 while(1) {
  $41 = $7;
  $42 = ($41|0)<(16);
  if (!($42)) {
   break;
  }
  $43 = $9;
  $44 = $7;
  $45 = (($10) + ($44<<2)|0);
  HEAP32[$45>>2] = $43;
  $46 = $9;
  $47 = $46&65535;
  $48 = $4;
  $49 = ((($48)) + 1024|0);
  $50 = $7;
  $51 = (($49) + ($50<<1)|0);
  HEAP16[$51>>1] = $47;
  $52 = $8;
  $53 = $52&65535;
  $54 = $4;
  $55 = ((($54)) + 1124|0);
  $56 = $7;
  $57 = (($55) + ($56<<1)|0);
  HEAP16[$57>>1] = $53;
  $58 = $9;
  $59 = $7;
  $60 = (($11) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($58) + ($61))|0;
  $9 = $62;
  $63 = $7;
  $64 = (($11) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = $9;
   $68 = (($67) - 1)|0;
   $69 = $7;
   $70 = 1 << $69;
   $71 = ($68|0)>=($70|0);
   if ($71) {
    label = 13;
    break;
   }
  }
  $73 = $9;
  $74 = $7;
  $75 = (16 - ($74))|0;
  $76 = $73 << $75;
  $77 = $4;
  $78 = ((($77)) + 1056|0);
  $79 = $7;
  $80 = (($78) + ($79<<2)|0);
  HEAP32[$80>>2] = $76;
  $81 = $9;
  $82 = $81 << 1;
  $9 = $82;
  $83 = $7;
  $84 = (($11) + ($83<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $8;
  $87 = (($86) + ($85))|0;
  $8 = $87;
  $88 = $7;
  $89 = (($88) + 1)|0;
  $7 = $89;
 }
 if ((label|0) == 13) {
  $72 = (_stbi__err(7063)|0);
  $3 = $72;
  $160 = $3;
  STACKTOP = sp;return ($160|0);
 }
 $90 = $4;
 $91 = ((($90)) + 1056|0);
 $92 = ((($91)) + 64|0);
 HEAP32[$92>>2] = 65536;
 $7 = 0;
 while(1) {
  $93 = $7;
  $94 = $6;
  $95 = ($93|0)<($94|0);
  if (!($95)) {
   break;
  }
  $96 = $5;
  $97 = $7;
  $98 = (($96) + ($97)|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $12 = $100;
  $101 = $12;
  $102 = ($101|0)!=(0);
  if ($102) {
   $103 = $12;
   $104 = (($10) + ($103<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $4;
   $107 = ((($106)) + 1024|0);
   $108 = $12;
   $109 = (($107) + ($108<<1)|0);
   $110 = HEAP16[$109>>1]|0;
   $111 = $110&65535;
   $112 = (($105) - ($111))|0;
   $113 = $4;
   $114 = ((($113)) + 1124|0);
   $115 = $12;
   $116 = (($114) + ($115<<1)|0);
   $117 = HEAP16[$116>>1]|0;
   $118 = $117&65535;
   $119 = (($112) + ($118))|0;
   $13 = $119;
   $120 = $12;
   $121 = $120 << 9;
   $122 = $7;
   $123 = $121 | $122;
   $124 = $123&65535;
   $14 = $124;
   $125 = $12;
   $126 = $125&255;
   $127 = $4;
   $128 = ((($127)) + 1156|0);
   $129 = $13;
   $130 = (($128) + ($129)|0);
   HEAP8[$130>>0] = $126;
   $131 = $7;
   $132 = $131&65535;
   $133 = $4;
   $134 = ((($133)) + 1444|0);
   $135 = $13;
   $136 = (($134) + ($135<<1)|0);
   HEAP16[$136>>1] = $132;
   $137 = $12;
   $138 = ($137|0)<=(9);
   L28: do {
    if ($138) {
     $139 = $12;
     $140 = (($10) + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $12;
     $143 = (_stbi__bit_reverse($141,$142)|0);
     $15 = $143;
     while(1) {
      $144 = $15;
      $145 = ($144|0)<(512);
      if (!($145)) {
       break L28;
      }
      $146 = $14;
      $147 = $4;
      $148 = $15;
      $149 = (($147) + ($148<<1)|0);
      HEAP16[$149>>1] = $146;
      $150 = $12;
      $151 = 1 << $150;
      $152 = $15;
      $153 = (($152) + ($151))|0;
      $15 = $153;
     }
    }
   } while(0);
   $154 = $12;
   $155 = (($10) + ($154<<2)|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (($156) + 1)|0;
   HEAP32[$155>>2] = $157;
  }
  $158 = $7;
  $159 = (($158) + 1)|0;
  $7 = $159;
 }
 $3 = 1;
 $160 = $3;
 STACKTOP = sp;return ($160|0);
}
function _stbi__compute_huffman_codes($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2560|0);
 $3 = sp + 520|0;
 $4 = sp + 32|0;
 $5 = sp;
 $2 = $0;
 $15 = $2;
 $16 = (_stbi__zreceive($15,5)|0);
 $17 = (($16) + 257)|0;
 $8 = $17;
 $18 = $2;
 $19 = (_stbi__zreceive($18,5)|0);
 $20 = (($19) + 1)|0;
 $9 = $20;
 $21 = $2;
 $22 = (_stbi__zreceive($21,4)|0);
 $23 = (($22) + 4)|0;
 $10 = $23;
 $24 = $8;
 $25 = $9;
 $26 = (($24) + ($25))|0;
 $11 = $26;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP16[$5+16>>1]=0|0;HEAP8[$5+18>>0]=0|0;
 $6 = 0;
 while(1) {
  $27 = $6;
  $28 = $10;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $2;
  $31 = (_stbi__zreceive($30,3)|0);
  $12 = $31;
  $32 = $12;
  $33 = $32&255;
  $34 = $6;
  $35 = (848 + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = (($5) + ($37)|0);
  HEAP8[$38>>0] = $33;
  $39 = $6;
  $40 = (($39) + 1)|0;
  $6 = $40;
 }
 $41 = (_stbi__zbuild_huffman($3,$5,19)|0);
 $42 = ($41|0)!=(0);
 if (!($42)) {
  $1 = 0;
  $113 = $1;
  STACKTOP = sp;return ($113|0);
 }
 $7 = 0;
 L9: while(1) {
  $43 = $7;
  $44 = $11;
  $45 = ($43|0)<($44|0);
  if (!($45)) {
   label = 25;
   break;
  }
  $46 = $2;
  $47 = (_stbi__zhuffman_decode($46,$3)|0);
  $13 = $47;
  $48 = $13;
  $49 = ($48|0)<(0);
  $50 = $13;
  $51 = ($50|0)>=(19);
  $or$cond = $49 | $51;
  if ($or$cond) {
   label = 9;
   break;
  }
  $53 = $13;
  $54 = ($53|0)<(16);
  if ($54) {
   $55 = $13;
   $56 = $55&255;
   $57 = $7;
   $58 = (($57) + 1)|0;
   $7 = $58;
   $59 = (($4) + ($57)|0);
   HEAP8[$59>>0] = $56;
  } else {
   $14 = 0;
   $60 = $13;
   $61 = ($60|0)==(16);
   do {
    if ($61) {
     $62 = $2;
     $63 = (_stbi__zreceive($62,2)|0);
     $64 = (($63) + 3)|0;
     $13 = $64;
     $65 = $7;
     $66 = ($65|0)==(0);
     if ($66) {
      label = 14;
      break L9;
     }
     $68 = $7;
     $69 = (($68) - 1)|0;
     $70 = (($4) + ($69)|0);
     $71 = HEAP8[$70>>0]|0;
     $14 = $71;
    } else {
     $72 = $13;
     $73 = ($72|0)==(17);
     if ($73) {
      $74 = $2;
      $75 = (_stbi__zreceive($74,3)|0);
      $76 = (($75) + 3)|0;
      $13 = $76;
      break;
     }
     $77 = $13;
     $78 = ($77|0)==(18);
     if (!($78)) {
      label = 19;
      break L9;
     }
     $79 = $2;
     $80 = (_stbi__zreceive($79,7)|0);
     $81 = (($80) + 11)|0;
     $13 = $81;
    }
   } while(0);
   $82 = $11;
   $83 = $7;
   $84 = (($82) - ($83))|0;
   $85 = $13;
   $86 = ($84|0)<($85|0);
   if ($86) {
    label = 22;
    break;
   }
   $88 = $7;
   $89 = (($4) + ($88)|0);
   $90 = $14;
   $91 = $90&255;
   $92 = $91&255;
   $93 = $13;
   _memset(($89|0),($92|0),($93|0))|0;
   $94 = $13;
   $95 = $7;
   $96 = (($95) + ($94))|0;
   $7 = $96;
  }
 }
 if ((label|0) == 9) {
  $52 = (_stbi__err(7063)|0);
  $1 = $52;
  $113 = $1;
  STACKTOP = sp;return ($113|0);
 }
 else if ((label|0) == 14) {
  $67 = (_stbi__err(7063)|0);
  $1 = $67;
  $113 = $1;
  STACKTOP = sp;return ($113|0);
 }
 else if ((label|0) == 19) {
  ___assert_fail((7108|0),(4971|0),4055,(7116|0));
  // unreachable;
 }
 else if ((label|0) == 22) {
  $87 = (_stbi__err(7063)|0);
  $1 = $87;
  $113 = $1;
  STACKTOP = sp;return ($113|0);
 }
 else if ((label|0) == 25) {
  $97 = $7;
  $98 = $11;
  $99 = ($97|0)!=($98|0);
  if ($99) {
   $100 = (_stbi__err(7063)|0);
   $1 = $100;
   $113 = $1;
   STACKTOP = sp;return ($113|0);
  }
  $101 = $2;
  $102 = ((($101)) + 32|0);
  $103 = $8;
  $104 = (_stbi__zbuild_huffman($102,$4,$103)|0);
  $105 = ($104|0)!=(0);
  if (!($105)) {
   $1 = 0;
   $113 = $1;
   STACKTOP = sp;return ($113|0);
  }
  $106 = $2;
  $107 = ((($106)) + 2052|0);
  $108 = $8;
  $109 = (($4) + ($108)|0);
  $110 = $9;
  $111 = (_stbi__zbuild_huffman($107,$109,$110)|0);
  $112 = ($111|0)!=(0);
  if ($112) {
   $1 = 1;
   $113 = $1;
   STACKTOP = sp;return ($113|0);
  } else {
   $1 = 0;
   $113 = $1;
   STACKTOP = sp;return ($113|0);
  }
 }
 return (0)|0;
}
function _stbi__parse_huffman_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $9 = $2;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $3 = $11;
 L1: while(1) {
  $12 = $2;
  $13 = $2;
  $14 = ((($13)) + 32|0);
  $15 = (_stbi__zhuffman_decode($12,$14)|0);
  $4 = $15;
  $16 = $4;
  $17 = ($16|0)<(256);
  $18 = $4;
  do {
   if ($17) {
    $19 = ($18|0)<(0);
    if ($19) {
     label = 4;
     break L1;
    }
    $21 = $3;
    $22 = $2;
    $23 = ((($22)) + 24|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($21>>>0)>=($24>>>0);
    if ($25) {
     $26 = $2;
     $27 = $3;
     $28 = (_stbi__zexpand($26,$27,1)|0);
     $29 = ($28|0)!=(0);
     if (!($29)) {
      label = 7;
      break L1;
     }
     $30 = $2;
     $31 = ((($30)) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $3 = $32;
    }
    $33 = $4;
    $34 = $33&255;
    $35 = $3;
    $36 = ((($35)) + 1|0);
    $3 = $36;
    HEAP8[$35>>0] = $34;
   } else {
    $37 = ($18|0)==(256);
    if ($37) {
     label = 11;
     break L1;
    }
    $41 = $4;
    $42 = (($41) - 257)|0;
    $4 = $42;
    $43 = $4;
    $44 = (880 + ($43<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    $6 = $45;
    $46 = $4;
    $47 = (1008 + ($46<<2)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)!=(0);
    if ($49) {
     $50 = $2;
     $51 = $4;
     $52 = (1008 + ($51<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = (_stbi__zreceive($50,$53)|0);
     $55 = $6;
     $56 = (($55) + ($54))|0;
     $6 = $56;
    }
    $57 = $2;
    $58 = $2;
    $59 = ((($58)) + 2052|0);
    $60 = (_stbi__zhuffman_decode($57,$59)|0);
    $4 = $60;
    $61 = $4;
    $62 = ($61|0)<(0);
    if ($62) {
     label = 15;
     break L1;
    }
    $64 = $4;
    $65 = (1136 + ($64<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $7 = $66;
    $67 = $4;
    $68 = (1264 + ($67<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)!=(0);
    if ($70) {
     $71 = $2;
     $72 = $4;
     $73 = (1264 + ($72<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (_stbi__zreceive($71,$74)|0);
     $76 = $7;
     $77 = (($76) + ($75))|0;
     $7 = $77;
    }
    $78 = $3;
    $79 = $2;
    $80 = ((($79)) + 20|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $78;
    $83 = $81;
    $84 = (($82) - ($83))|0;
    $85 = $7;
    $86 = ($84|0)<($85|0);
    if ($86) {
     label = 19;
     break L1;
    }
    $88 = $3;
    $89 = $6;
    $90 = (($88) + ($89)|0);
    $91 = $2;
    $92 = ((($91)) + 24|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($90>>>0)>($93>>>0);
    if ($94) {
     $95 = $2;
     $96 = $3;
     $97 = $6;
     $98 = (_stbi__zexpand($95,$96,$97)|0);
     $99 = ($98|0)!=(0);
     if (!($99)) {
      label = 22;
      break L1;
     }
     $100 = $2;
     $101 = ((($100)) + 16|0);
     $102 = HEAP32[$101>>2]|0;
     $3 = $102;
    }
    $103 = $3;
    $104 = $7;
    $105 = (0 - ($104))|0;
    $106 = (($103) + ($105)|0);
    $5 = $106;
    $107 = $7;
    $108 = ($107|0)==(1);
    if ($108) {
     $109 = $5;
     $110 = HEAP8[$109>>0]|0;
     $8 = $110;
     $111 = $6;
     $112 = ($111|0)!=(0);
     if (!($112)) {
      break;
     }
     while(1) {
      $113 = $8;
      $114 = $3;
      $115 = ((($114)) + 1|0);
      $3 = $115;
      HEAP8[$114>>0] = $113;
      $116 = $6;
      $117 = (($116) + -1)|0;
      $6 = $117;
      $118 = ($117|0)!=(0);
      if (!($118)) {
       break;
      }
     }
    } else {
     $119 = $6;
     $120 = ($119|0)!=(0);
     if (!($120)) {
      break;
     }
     while(1) {
      $121 = $5;
      $122 = ((($121)) + 1|0);
      $5 = $122;
      $123 = HEAP8[$121>>0]|0;
      $124 = $3;
      $125 = ((($124)) + 1|0);
      $3 = $125;
      HEAP8[$124>>0] = $123;
      $126 = $6;
      $127 = (($126) + -1)|0;
      $6 = $127;
      $128 = ($127|0)!=(0);
      if (!($128)) {
       break;
      }
     }
    }
   }
  } while(0);
 }
 if ((label|0) == 4) {
  $20 = (_stbi__err(5457)|0);
  $1 = $20;
  $129 = $1;
  STACKTOP = sp;return ($129|0);
 }
 else if ((label|0) == 7) {
  $1 = 0;
  $129 = $1;
  STACKTOP = sp;return ($129|0);
 }
 else if ((label|0) == 11) {
  $38 = $3;
  $39 = $2;
  $40 = ((($39)) + 16|0);
  HEAP32[$40>>2] = $38;
  $1 = 1;
  $129 = $1;
  STACKTOP = sp;return ($129|0);
 }
 else if ((label|0) == 15) {
  $63 = (_stbi__err(5457)|0);
  $1 = $63;
  $129 = $1;
  STACKTOP = sp;return ($129|0);
 }
 else if ((label|0) == 19) {
  $87 = (_stbi__err(7191)|0);
  $1 = $87;
  $129 = $1;
  STACKTOP = sp;return ($129|0);
 }
 else if ((label|0) == 22) {
  $1 = 0;
  $129 = $1;
  STACKTOP = sp;return ($129|0);
 }
 return (0)|0;
}
function _stbi__zget8($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)>=($7>>>0);
 if ($8) {
  $1 = 0;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 } else {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 1|0);
  HEAP32[$9>>2] = $11;
  $12 = HEAP8[$10>>0]|0;
  $1 = $12;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _stbi__fill_bits($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $2 = $1;
  $3 = ((($2)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $1;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = 1 << $7;
  $9 = ($4>>>0)<($8>>>0);
  if (!($9)) {
   label = 3;
   break;
  }
  $10 = $1;
  $11 = (_stbi__zget8($10)|0);
  $12 = $11&255;
  $13 = $1;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $12 << $15;
  $17 = $1;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 | $16;
  HEAP32[$18>>2] = $20;
  $21 = $1;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 8)|0;
  HEAP32[$22>>2] = $24;
  $25 = $1;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)<=(24);
  if (!($28)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 3) {
  ___assert_fail((6902|0),(4971|0),3897,(6939|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function _stbi__zexpand($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 $12 = $4;
 $13 = ((($12)) + 16|0);
 HEAP32[$13>>2] = $11;
 $14 = $4;
 $15 = ((($14)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $18 = (_stbi__err(7033)|0);
  $3 = $18;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 }
 $19 = $4;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $4;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $21;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $8 = $27;
 $28 = $4;
 $29 = ((($28)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $4;
 $32 = ((($31)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $30;
 $35 = $33;
 $36 = (($34) - ($35))|0;
 $10 = $36;
 $9 = $36;
 while(1) {
  $37 = $8;
  $38 = $6;
  $39 = (($37) + ($38))|0;
  $40 = $9;
  $41 = ($39|0)>($40|0);
  if (!($41)) {
   break;
  }
  $42 = $9;
  $43 = $42<<1;
  $9 = $43;
 }
 $44 = $4;
 $45 = ((($44)) + 20|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $9;
 $48 = (_realloc($46,$47)|0);
 $7 = $48;
 $49 = $7;
 $50 = ($49|0)==(0|0);
 if ($50) {
  $51 = (_stbi__err(5340)|0);
  $3 = $51;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 } else {
  $52 = $7;
  $53 = $4;
  $54 = ((($53)) + 20|0);
  HEAP32[$54>>2] = $52;
  $55 = $7;
  $56 = $8;
  $57 = (($55) + ($56)|0);
  $58 = $4;
  $59 = ((($58)) + 16|0);
  HEAP32[$59>>2] = $57;
  $60 = $7;
  $61 = $9;
  $62 = (($60) + ($61)|0);
  $63 = $4;
  $64 = ((($63)) + 24|0);
  HEAP32[$64>>2] = $62;
  $3 = 1;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function _stbi__bit_reverse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)<=(16);
 if ($5) {
  $6 = $2;
  $7 = (_stbi__bitreverse16($6)|0);
  $8 = $3;
  $9 = (16 - ($8))|0;
  $10 = $7 >> $9;
  STACKTOP = sp;return ($10|0);
 } else {
  ___assert_fail((7079|0),(4971|0),3815,(7090|0));
  // unreachable;
 }
 return (0)|0;
}
function _stbi__bitreverse16($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 & 43690;
 $4 = $3 >> 1;
 $5 = $1;
 $6 = $5 & 21845;
 $7 = $6 << 1;
 $8 = $4 | $7;
 $1 = $8;
 $9 = $1;
 $10 = $9 & 52428;
 $11 = $10 >> 2;
 $12 = $1;
 $13 = $12 & 13107;
 $14 = $13 << 2;
 $15 = $11 | $14;
 $1 = $15;
 $16 = $1;
 $17 = $16 & 61680;
 $18 = $17 >> 4;
 $19 = $1;
 $20 = $19 & 3855;
 $21 = $20 << 4;
 $22 = $18 | $21;
 $1 = $22;
 $23 = $1;
 $24 = $23 & 65280;
 $25 = $24 >> 8;
 $26 = $1;
 $27 = $26 & 255;
 $28 = $27 << 8;
 $29 = $25 | $28;
 $1 = $29;
 $30 = $1;
 STACKTOP = sp;return ($30|0);
}
function _stbi__zhuffman_decode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<(16);
 if ($10) {
  $11 = $3;
  _stbi__fill_bits($11);
 }
 $12 = $4;
 $13 = $3;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 511;
 $17 = (($12) + ($16<<1)|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $5 = $19;
 $20 = $5;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $5;
  $23 = $22 >> 9;
  $6 = $23;
  $24 = $6;
  $25 = $3;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 >>> $24;
  HEAP32[$26>>2] = $28;
  $29 = $6;
  $30 = $3;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) - ($29))|0;
  HEAP32[$31>>2] = $33;
  $34 = $5;
  $35 = $34 & 511;
  $2 = $35;
  $39 = $2;
  STACKTOP = sp;return ($39|0);
 } else {
  $36 = $3;
  $37 = $4;
  $38 = (_stbi__zhuffman_decode_slowpath($36,$37)|0);
  $2 = $38;
  $39 = $2;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _stbi__zhuffman_decode_slowpath($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_stbi__bit_reverse($10,16)|0);
 $7 = $11;
 $6 = 10;
 while(1) {
  $12 = $7;
  $13 = $4;
  $14 = ((($13)) + 1056|0);
  $15 = $6;
  $16 = (($14) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($12|0)<($17|0);
  $19 = $6;
  if ($18) {
   break;
  }
  $20 = (($19) + 1)|0;
  $6 = $20;
 }
 $21 = ($19|0)==(16);
 if ($21) {
  $2 = -1;
  $64 = $2;
  STACKTOP = sp;return ($64|0);
 }
 $22 = $7;
 $23 = $6;
 $24 = (16 - ($23))|0;
 $25 = $22 >> $24;
 $26 = $4;
 $27 = ((($26)) + 1024|0);
 $28 = $6;
 $29 = (($27) + ($28<<1)|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30&65535;
 $32 = (($25) - ($31))|0;
 $33 = $4;
 $34 = ((($33)) + 1124|0);
 $35 = $6;
 $36 = (($34) + ($35<<1)|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = (($32) + ($38))|0;
 $5 = $39;
 $40 = $4;
 $41 = ((($40)) + 1156|0);
 $42 = $5;
 $43 = (($41) + ($42)|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = $6;
 $47 = ($45|0)==($46|0);
 if (!($47)) {
  ___assert_fail((7144|0),(4971|0),3925,(7160|0));
  // unreachable;
 }
 $48 = $6;
 $49 = $3;
 $50 = ((($49)) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51 >>> $48;
 HEAP32[$50>>2] = $52;
 $53 = $6;
 $54 = $3;
 $55 = ((($54)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) - ($53))|0;
 HEAP32[$55>>2] = $57;
 $58 = $4;
 $59 = ((($58)) + 1444|0);
 $60 = $5;
 $61 = (($59) + ($60<<1)|0);
 $62 = HEAP16[$61>>1]|0;
 $63 = $62&65535;
 $2 = $63;
 $64 = $2;
 STACKTOP = sp;return ($64|0);
}
function _stbi__hdr_test_core($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $4;
  $7 = $5;
  $8 = (($6) + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)!=(0);
  $11 = $3;
  if (!($10)) {
   label = 6;
   break;
  }
  $12 = (_stbi__get8($11)|0);
  $13 = $12&255;
  $14 = $4;
  $15 = $5;
  $16 = (($14) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($13|0)!=($18|0);
  if ($19) {
   label = 4;
   break;
  }
  $20 = $5;
  $21 = (($20) + 1)|0;
  $5 = $21;
 }
 if ((label|0) == 4) {
  $2 = 0;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 6) {
  _stbi__rewind($11);
  $2 = 1;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0169$i = 0, $$0170$i = 0, $$0171$i = 0, $$0192 = 0, $$0194 = 0, $$02014$i$i = 0, $$0202$lcssa$i$i = 0, $$02023$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$024372$i = 0, $$0259$i$i = 0, $$02604$i$i = 0, $$0261$lcssa$i$i = 0, $$02613$i$i = 0;
 var $$0267$i$i = 0, $$0268$i$i = 0, $$0318$i = 0, $$032012$i = 0, $$0321$lcssa$i = 0, $$032111$i = 0, $$0323$i = 0, $$0329$i = 0, $$0335$i = 0, $$0336$i = 0, $$0338$i = 0, $$0339$i = 0, $$0344$i = 0, $$1174$i = 0, $$1174$i$be = 0, $$1174$i$ph = 0, $$1176$i = 0, $$1176$i$be = 0, $$1176$i$ph = 0, $$124471$i = 0;
 var $$1263$i$i = 0, $$1263$i$i$be = 0, $$1263$i$i$ph = 0, $$1265$i$i = 0, $$1265$i$i$be = 0, $$1265$i$i$ph = 0, $$1319$i = 0, $$1324$i = 0, $$1340$i = 0, $$1346$i = 0, $$1346$i$be = 0, $$1346$i$ph = 0, $$1350$i = 0, $$1350$i$be = 0, $$1350$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2331$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i198 = 0, $$3$i198211 = 0, $$3326$i = 0, $$3348$i = 0, $$4$lcssa$i = 0, $$415$i = 0, $$415$i$ph = 0, $$4236$i = 0, $$4327$lcssa$i = 0, $$432714$i = 0, $$432714$i$ph = 0, $$4333$i = 0, $$533413$i = 0, $$533413$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i16$i = 0, $$pre$i195 = 0, $$pre$i204 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$i205Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink320 = 0, $$sink321 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i199 = 0, $or$cond1$i = 0, $or$cond1$i197 = 0, $or$cond11$i = 0, $or$cond2$i = 0;
 var $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $spec$select$i = 0, $spec$select$i201 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select4$i = 0, $spec$select49$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[2092]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (8408 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[2092] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(8376)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (8408 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[2092] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(8388)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (8408 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[2092] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(8376)>>2] = $76;
     HEAP32[(8388)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(8372)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (8672 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $$0169$i = $124;$$0170$i = $124;$$0171$i = $128;
     while(1) {
      $129 = ((($$0169$i)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)==(0|0);
      if ($131) {
       $132 = ((($$0169$i)) + 20|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==(0|0);
       if ($134) {
        break;
       } else {
        $136 = $133;
       }
      } else {
       $136 = $130;
      }
      $135 = ((($136)) + 4|0);
      $137 = HEAP32[$135>>2]|0;
      $138 = $137 & -8;
      $139 = (($138) - ($6))|0;
      $140 = ($139>>>0)<($$0171$i>>>0);
      $spec$select$i = $140 ? $139 : $$0171$i;
      $spec$select1$i = $140 ? $136 : $$0170$i;
      $$0169$i = $136;$$0170$i = $spec$select1$i;$$0171$i = $spec$select$i;
     }
     $141 = (($$0170$i) + ($6)|0);
     $142 = ($141>>>0)>($$0170$i>>>0);
     if ($142) {
      $143 = ((($$0170$i)) + 24|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$0170$i)) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==($$0170$i|0);
      do {
       if ($147) {
        $152 = ((($$0170$i)) + 20|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         $155 = ((($$0170$i)) + 16|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = ($156|0)==(0|0);
         if ($157) {
          $$3$i = 0;
          break;
         } else {
          $$1174$i$ph = $156;$$1176$i$ph = $155;
         }
        } else {
         $$1174$i$ph = $153;$$1176$i$ph = $152;
        }
        $$1174$i = $$1174$i$ph;$$1176$i = $$1176$i$ph;
        while(1) {
         $158 = ((($$1174$i)) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)==(0|0);
         if ($160) {
          $161 = ((($$1174$i)) + 16|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0|0);
          if ($163) {
           break;
          } else {
           $$1174$i$be = $162;$$1176$i$be = $161;
          }
         } else {
          $$1174$i$be = $159;$$1176$i$be = $158;
         }
         $$1174$i = $$1174$i$be;$$1176$i = $$1176$i$be;
        }
        HEAP32[$$1176$i>>2] = 0;
        $$3$i = $$1174$i;
       } else {
        $148 = ((($$0170$i)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = ((($149)) + 12|0);
        HEAP32[$150>>2] = $146;
        $151 = ((($146)) + 8|0);
        HEAP32[$151>>2] = $149;
        $$3$i = $146;
       }
      } while(0);
      $164 = ($144|0)==(0|0);
      do {
       if (!($164)) {
        $165 = ((($$0170$i)) + 28|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (8672 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ($$0170$i|0)==($168|0);
        if ($169) {
         HEAP32[$167>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $170 = 1 << $166;
          $171 = $170 ^ -1;
          $172 = $98 & $171;
          HEAP32[(8372)>>2] = $172;
          break;
         }
        } else {
         $173 = ((($144)) + 16|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==($$0170$i|0);
         $176 = ((($144)) + 20|0);
         $$sink = $175 ? $173 : $176;
         HEAP32[$$sink>>2] = $$3$i;
         $177 = ($$3$i|0)==(0|0);
         if ($177) {
          break;
         }
        }
        $178 = ((($$3$i)) + 24|0);
        HEAP32[$178>>2] = $144;
        $179 = ((($$0170$i)) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $182 = ((($$3$i)) + 16|0);
         HEAP32[$182>>2] = $180;
         $183 = ((($180)) + 24|0);
         HEAP32[$183>>2] = $$3$i;
        }
        $184 = ((($$0170$i)) + 20|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if (!($186)) {
         $187 = ((($$3$i)) + 20|0);
         HEAP32[$187>>2] = $185;
         $188 = ((($185)) + 24|0);
         HEAP32[$188>>2] = $$3$i;
        }
       }
      } while(0);
      $189 = ($$0171$i>>>0)<(16);
      if ($189) {
       $190 = (($$0171$i) + ($6))|0;
       $191 = $190 | 3;
       $192 = ((($$0170$i)) + 4|0);
       HEAP32[$192>>2] = $191;
       $193 = (($$0170$i) + ($190)|0);
       $194 = ((($193)) + 4|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $195 | 1;
       HEAP32[$194>>2] = $196;
      } else {
       $197 = $6 | 3;
       $198 = ((($$0170$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = $$0171$i | 1;
       $200 = ((($141)) + 4|0);
       HEAP32[$200>>2] = $199;
       $201 = (($141) + ($$0171$i)|0);
       HEAP32[$201>>2] = $$0171$i;
       $202 = ($33|0)==(0);
       if (!($202)) {
        $203 = HEAP32[(8388)>>2]|0;
        $204 = $33 >>> 3;
        $205 = $204 << 1;
        $206 = (8408 + ($205<<2)|0);
        $207 = 1 << $204;
        $208 = $207 & $8;
        $209 = ($208|0)==(0);
        if ($209) {
         $210 = $207 | $8;
         HEAP32[2092] = $210;
         $$pre$i = ((($206)) + 8|0);
         $$0$i = $206;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $211 = ((($206)) + 8|0);
         $212 = HEAP32[$211>>2]|0;
         $$0$i = $212;$$pre$phi$iZ2D = $211;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $203;
        $213 = ((($$0$i)) + 12|0);
        HEAP32[$213>>2] = $203;
        $214 = ((($203)) + 8|0);
        HEAP32[$214>>2] = $$0$i;
        $215 = ((($203)) + 12|0);
        HEAP32[$215>>2] = $206;
       }
       HEAP32[(8376)>>2] = $$0171$i;
       HEAP32[(8388)>>2] = $141;
      }
      $216 = ((($$0170$i)) + 8|0);
      $$0 = $216;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $217 = ($0>>>0)>(4294967231);
   if ($217) {
    $$0192 = -1;
   } else {
    $218 = (($0) + 11)|0;
    $219 = $218 & -8;
    $220 = HEAP32[(8372)>>2]|0;
    $221 = ($220|0)==(0);
    if ($221) {
     $$0192 = $219;
    } else {
     $222 = (0 - ($219))|0;
     $223 = $218 >>> 8;
     $224 = ($223|0)==(0);
     if ($224) {
      $$0335$i = 0;
     } else {
      $225 = ($219>>>0)>(16777215);
      if ($225) {
       $$0335$i = 31;
      } else {
       $226 = (($223) + 1048320)|0;
       $227 = $226 >>> 16;
       $228 = $227 & 8;
       $229 = $223 << $228;
       $230 = (($229) + 520192)|0;
       $231 = $230 >>> 16;
       $232 = $231 & 4;
       $233 = $232 | $228;
       $234 = $229 << $232;
       $235 = (($234) + 245760)|0;
       $236 = $235 >>> 16;
       $237 = $236 & 2;
       $238 = $233 | $237;
       $239 = (14 - ($238))|0;
       $240 = $234 << $237;
       $241 = $240 >>> 15;
       $242 = (($239) + ($241))|0;
       $243 = $242 << 1;
       $244 = (($242) + 7)|0;
       $245 = $219 >>> $244;
       $246 = $245 & 1;
       $247 = $246 | $243;
       $$0335$i = $247;
      }
     }
     $248 = (8672 + ($$0335$i<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0|0);
     L79: do {
      if ($250) {
       $$2331$i = 0;$$3$i198 = 0;$$3326$i = $222;
       label = 61;
      } else {
       $251 = ($$0335$i|0)==(31);
       $252 = $$0335$i >>> 1;
       $253 = (25 - ($252))|0;
       $254 = $251 ? 0 : $253;
       $255 = $219 << $254;
       $$0318$i = 0;$$0323$i = $222;$$0329$i = $249;$$0336$i = $255;$$0339$i = 0;
       while(1) {
        $256 = ((($$0329$i)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 & -8;
        $259 = (($258) - ($219))|0;
        $260 = ($259>>>0)<($$0323$i>>>0);
        if ($260) {
         $261 = ($259|0)==(0);
         if ($261) {
          $$415$i$ph = $$0329$i;$$432714$i$ph = 0;$$533413$i$ph = $$0329$i;
          label = 65;
          break L79;
         } else {
          $$1319$i = $$0329$i;$$1324$i = $259;
         }
        } else {
         $$1319$i = $$0318$i;$$1324$i = $$0323$i;
        }
        $262 = ((($$0329$i)) + 20|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $$0336$i >>> 31;
        $265 = (((($$0329$i)) + 16|0) + ($264<<2)|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($263|0)==(0|0);
        $268 = ($263|0)==($266|0);
        $or$cond1$i197 = $267 | $268;
        $$1340$i = $or$cond1$i197 ? $$0339$i : $263;
        $269 = ($266|0)==(0|0);
        $spec$select4$i = $$0336$i << 1;
        if ($269) {
         $$2331$i = $$1340$i;$$3$i198 = $$1319$i;$$3326$i = $$1324$i;
         label = 61;
         break;
        } else {
         $$0318$i = $$1319$i;$$0323$i = $$1324$i;$$0329$i = $266;$$0336$i = $spec$select4$i;$$0339$i = $$1340$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $270 = ($$2331$i|0)==(0|0);
      $271 = ($$3$i198|0)==(0|0);
      $or$cond$i199 = $270 & $271;
      if ($or$cond$i199) {
       $272 = 2 << $$0335$i;
       $273 = (0 - ($272))|0;
       $274 = $272 | $273;
       $275 = $274 & $220;
       $276 = ($275|0)==(0);
       if ($276) {
        $$0192 = $219;
        break;
       }
       $277 = (0 - ($275))|0;
       $278 = $275 & $277;
       $279 = (($278) + -1)|0;
       $280 = $279 >>> 12;
       $281 = $280 & 16;
       $282 = $279 >>> $281;
       $283 = $282 >>> 5;
       $284 = $283 & 8;
       $285 = $284 | $281;
       $286 = $282 >>> $284;
       $287 = $286 >>> 2;
       $288 = $287 & 4;
       $289 = $285 | $288;
       $290 = $286 >>> $288;
       $291 = $290 >>> 1;
       $292 = $291 & 2;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 1;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = (($297) + ($298))|0;
       $300 = (8672 + ($299<<2)|0);
       $301 = HEAP32[$300>>2]|0;
       $$3$i198211 = 0;$$4333$i = $301;
      } else {
       $$3$i198211 = $$3$i198;$$4333$i = $$2331$i;
      }
      $302 = ($$4333$i|0)==(0|0);
      if ($302) {
       $$4$lcssa$i = $$3$i198211;$$4327$lcssa$i = $$3326$i;
      } else {
       $$415$i$ph = $$3$i198211;$$432714$i$ph = $$3326$i;$$533413$i$ph = $$4333$i;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $$415$i = $$415$i$ph;$$432714$i = $$432714$i$ph;$$533413$i = $$533413$i$ph;
      while(1) {
       $303 = ((($$533413$i)) + 4|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & -8;
       $306 = (($305) - ($219))|0;
       $307 = ($306>>>0)<($$432714$i>>>0);
       $spec$select$i201 = $307 ? $306 : $$432714$i;
       $spec$select2$i = $307 ? $$533413$i : $$415$i;
       $308 = ((($$533413$i)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = ($309|0)==(0|0);
       if ($310) {
        $311 = ((($$533413$i)) + 20|0);
        $312 = HEAP32[$311>>2]|0;
        $313 = $312;
       } else {
        $313 = $309;
       }
       $314 = ($313|0)==(0|0);
       if ($314) {
        $$4$lcssa$i = $spec$select2$i;$$4327$lcssa$i = $spec$select$i201;
        break;
       } else {
        $$415$i = $spec$select2$i;$$432714$i = $spec$select$i201;$$533413$i = $313;
       }
      }
     }
     $315 = ($$4$lcssa$i|0)==(0|0);
     if ($315) {
      $$0192 = $219;
     } else {
      $316 = HEAP32[(8376)>>2]|0;
      $317 = (($316) - ($219))|0;
      $318 = ($$4327$lcssa$i>>>0)<($317>>>0);
      if ($318) {
       $319 = (($$4$lcssa$i) + ($219)|0);
       $320 = ($319>>>0)>($$4$lcssa$i>>>0);
       if ($320) {
        $321 = ((($$4$lcssa$i)) + 24|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ((($$4$lcssa$i)) + 12|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ($324|0)==($$4$lcssa$i|0);
        do {
         if ($325) {
          $330 = ((($$4$lcssa$i)) + 20|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = ($331|0)==(0|0);
          if ($332) {
           $333 = ((($$4$lcssa$i)) + 16|0);
           $334 = HEAP32[$333>>2]|0;
           $335 = ($334|0)==(0|0);
           if ($335) {
            $$3348$i = 0;
            break;
           } else {
            $$1346$i$ph = $334;$$1350$i$ph = $333;
           }
          } else {
           $$1346$i$ph = $331;$$1350$i$ph = $330;
          }
          $$1346$i = $$1346$i$ph;$$1350$i = $$1350$i$ph;
          while(1) {
           $336 = ((($$1346$i)) + 20|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = ($337|0)==(0|0);
           if ($338) {
            $339 = ((($$1346$i)) + 16|0);
            $340 = HEAP32[$339>>2]|0;
            $341 = ($340|0)==(0|0);
            if ($341) {
             break;
            } else {
             $$1346$i$be = $340;$$1350$i$be = $339;
            }
           } else {
            $$1346$i$be = $337;$$1350$i$be = $336;
           }
           $$1346$i = $$1346$i$be;$$1350$i = $$1350$i$be;
          }
          HEAP32[$$1350$i>>2] = 0;
          $$3348$i = $$1346$i;
         } else {
          $326 = ((($$4$lcssa$i)) + 8|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = ((($327)) + 12|0);
          HEAP32[$328>>2] = $324;
          $329 = ((($324)) + 8|0);
          HEAP32[$329>>2] = $327;
          $$3348$i = $324;
         }
        } while(0);
        $342 = ($322|0)==(0|0);
        do {
         if ($342) {
          $425 = $220;
         } else {
          $343 = ((($$4$lcssa$i)) + 28|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = (8672 + ($344<<2)|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($$4$lcssa$i|0)==($346|0);
          if ($347) {
           HEAP32[$345>>2] = $$3348$i;
           $cond$i203 = ($$3348$i|0)==(0|0);
           if ($cond$i203) {
            $348 = 1 << $344;
            $349 = $348 ^ -1;
            $350 = $220 & $349;
            HEAP32[(8372)>>2] = $350;
            $425 = $350;
            break;
           }
          } else {
           $351 = ((($322)) + 16|0);
           $352 = HEAP32[$351>>2]|0;
           $353 = ($352|0)==($$4$lcssa$i|0);
           $354 = ((($322)) + 20|0);
           $$sink320 = $353 ? $351 : $354;
           HEAP32[$$sink320>>2] = $$3348$i;
           $355 = ($$3348$i|0)==(0|0);
           if ($355) {
            $425 = $220;
            break;
           }
          }
          $356 = ((($$3348$i)) + 24|0);
          HEAP32[$356>>2] = $322;
          $357 = ((($$4$lcssa$i)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)==(0|0);
          if (!($359)) {
           $360 = ((($$3348$i)) + 16|0);
           HEAP32[$360>>2] = $358;
           $361 = ((($358)) + 24|0);
           HEAP32[$361>>2] = $$3348$i;
          }
          $362 = ((($$4$lcssa$i)) + 20|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = ($363|0)==(0|0);
          if ($364) {
           $425 = $220;
          } else {
           $365 = ((($$3348$i)) + 20|0);
           HEAP32[$365>>2] = $363;
           $366 = ((($363)) + 24|0);
           HEAP32[$366>>2] = $$3348$i;
           $425 = $220;
          }
         }
        } while(0);
        $367 = ($$4327$lcssa$i>>>0)<(16);
        L128: do {
         if ($367) {
          $368 = (($$4327$lcssa$i) + ($219))|0;
          $369 = $368 | 3;
          $370 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$370>>2] = $369;
          $371 = (($$4$lcssa$i) + ($368)|0);
          $372 = ((($371)) + 4|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = $373 | 1;
          HEAP32[$372>>2] = $374;
         } else {
          $375 = $219 | 3;
          $376 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$376>>2] = $375;
          $377 = $$4327$lcssa$i | 1;
          $378 = ((($319)) + 4|0);
          HEAP32[$378>>2] = $377;
          $379 = (($319) + ($$4327$lcssa$i)|0);
          HEAP32[$379>>2] = $$4327$lcssa$i;
          $380 = $$4327$lcssa$i >>> 3;
          $381 = ($$4327$lcssa$i>>>0)<(256);
          if ($381) {
           $382 = $380 << 1;
           $383 = (8408 + ($382<<2)|0);
           $384 = HEAP32[2092]|0;
           $385 = 1 << $380;
           $386 = $384 & $385;
           $387 = ($386|0)==(0);
           if ($387) {
            $388 = $384 | $385;
            HEAP32[2092] = $388;
            $$pre$i204 = ((($383)) + 8|0);
            $$0344$i = $383;$$pre$phi$i205Z2D = $$pre$i204;
           } else {
            $389 = ((($383)) + 8|0);
            $390 = HEAP32[$389>>2]|0;
            $$0344$i = $390;$$pre$phi$i205Z2D = $389;
           }
           HEAP32[$$pre$phi$i205Z2D>>2] = $319;
           $391 = ((($$0344$i)) + 12|0);
           HEAP32[$391>>2] = $319;
           $392 = ((($319)) + 8|0);
           HEAP32[$392>>2] = $$0344$i;
           $393 = ((($319)) + 12|0);
           HEAP32[$393>>2] = $383;
           break;
          }
          $394 = $$4327$lcssa$i >>> 8;
          $395 = ($394|0)==(0);
          if ($395) {
           $$0338$i = 0;
          } else {
           $396 = ($$4327$lcssa$i>>>0)>(16777215);
           if ($396) {
            $$0338$i = 31;
           } else {
            $397 = (($394) + 1048320)|0;
            $398 = $397 >>> 16;
            $399 = $398 & 8;
            $400 = $394 << $399;
            $401 = (($400) + 520192)|0;
            $402 = $401 >>> 16;
            $403 = $402 & 4;
            $404 = $403 | $399;
            $405 = $400 << $403;
            $406 = (($405) + 245760)|0;
            $407 = $406 >>> 16;
            $408 = $407 & 2;
            $409 = $404 | $408;
            $410 = (14 - ($409))|0;
            $411 = $405 << $408;
            $412 = $411 >>> 15;
            $413 = (($410) + ($412))|0;
            $414 = $413 << 1;
            $415 = (($413) + 7)|0;
            $416 = $$4327$lcssa$i >>> $415;
            $417 = $416 & 1;
            $418 = $417 | $414;
            $$0338$i = $418;
           }
          }
          $419 = (8672 + ($$0338$i<<2)|0);
          $420 = ((($319)) + 28|0);
          HEAP32[$420>>2] = $$0338$i;
          $421 = ((($319)) + 16|0);
          $422 = ((($421)) + 4|0);
          HEAP32[$422>>2] = 0;
          HEAP32[$421>>2] = 0;
          $423 = 1 << $$0338$i;
          $424 = $425 & $423;
          $426 = ($424|0)==(0);
          if ($426) {
           $427 = $425 | $423;
           HEAP32[(8372)>>2] = $427;
           HEAP32[$419>>2] = $319;
           $428 = ((($319)) + 24|0);
           HEAP32[$428>>2] = $419;
           $429 = ((($319)) + 12|0);
           HEAP32[$429>>2] = $319;
           $430 = ((($319)) + 8|0);
           HEAP32[$430>>2] = $319;
           break;
          }
          $431 = HEAP32[$419>>2]|0;
          $432 = ((($431)) + 4|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = $433 & -8;
          $435 = ($434|0)==($$4327$lcssa$i|0);
          L145: do {
           if ($435) {
            $$0321$lcssa$i = $431;
           } else {
            $436 = ($$0338$i|0)==(31);
            $437 = $$0338$i >>> 1;
            $438 = (25 - ($437))|0;
            $439 = $436 ? 0 : $438;
            $440 = $$4327$lcssa$i << $439;
            $$032012$i = $440;$$032111$i = $431;
            while(1) {
             $447 = $$032012$i >>> 31;
             $448 = (((($$032111$i)) + 16|0) + ($447<<2)|0);
             $443 = HEAP32[$448>>2]|0;
             $449 = ($443|0)==(0|0);
             if ($449) {
              break;
             }
             $441 = $$032012$i << 1;
             $442 = ((($443)) + 4|0);
             $444 = HEAP32[$442>>2]|0;
             $445 = $444 & -8;
             $446 = ($445|0)==($$4327$lcssa$i|0);
             if ($446) {
              $$0321$lcssa$i = $443;
              break L145;
             } else {
              $$032012$i = $441;$$032111$i = $443;
             }
            }
            HEAP32[$448>>2] = $319;
            $450 = ((($319)) + 24|0);
            HEAP32[$450>>2] = $$032111$i;
            $451 = ((($319)) + 12|0);
            HEAP32[$451>>2] = $319;
            $452 = ((($319)) + 8|0);
            HEAP32[$452>>2] = $319;
            break L128;
           }
          } while(0);
          $453 = ((($$0321$lcssa$i)) + 8|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = ((($454)) + 12|0);
          HEAP32[$455>>2] = $319;
          HEAP32[$453>>2] = $319;
          $456 = ((($319)) + 8|0);
          HEAP32[$456>>2] = $454;
          $457 = ((($319)) + 12|0);
          HEAP32[$457>>2] = $$0321$lcssa$i;
          $458 = ((($319)) + 24|0);
          HEAP32[$458>>2] = 0;
         }
        } while(0);
        $459 = ((($$4$lcssa$i)) + 8|0);
        $$0 = $459;
        STACKTOP = sp;return ($$0|0);
       } else {
        $$0192 = $219;
       }
      } else {
       $$0192 = $219;
      }
     }
    }
   }
  }
 } while(0);
 $460 = HEAP32[(8376)>>2]|0;
 $461 = ($460>>>0)<($$0192>>>0);
 if (!($461)) {
  $462 = (($460) - ($$0192))|0;
  $463 = HEAP32[(8388)>>2]|0;
  $464 = ($462>>>0)>(15);
  if ($464) {
   $465 = (($463) + ($$0192)|0);
   HEAP32[(8388)>>2] = $465;
   HEAP32[(8376)>>2] = $462;
   $466 = $462 | 1;
   $467 = ((($465)) + 4|0);
   HEAP32[$467>>2] = $466;
   $468 = (($463) + ($460)|0);
   HEAP32[$468>>2] = $462;
   $469 = $$0192 | 3;
   $470 = ((($463)) + 4|0);
   HEAP32[$470>>2] = $469;
  } else {
   HEAP32[(8376)>>2] = 0;
   HEAP32[(8388)>>2] = 0;
   $471 = $460 | 3;
   $472 = ((($463)) + 4|0);
   HEAP32[$472>>2] = $471;
   $473 = (($463) + ($460)|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | 1;
   HEAP32[$474>>2] = $476;
  }
  $477 = ((($463)) + 8|0);
  $$0 = $477;
  STACKTOP = sp;return ($$0|0);
 }
 $478 = HEAP32[(8380)>>2]|0;
 $479 = ($478>>>0)>($$0192>>>0);
 if ($479) {
  $480 = (($478) - ($$0192))|0;
  HEAP32[(8380)>>2] = $480;
  $481 = HEAP32[(8392)>>2]|0;
  $482 = (($481) + ($$0192)|0);
  HEAP32[(8392)>>2] = $482;
  $483 = $480 | 1;
  $484 = ((($482)) + 4|0);
  HEAP32[$484>>2] = $483;
  $485 = $$0192 | 3;
  $486 = ((($481)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = ((($481)) + 8|0);
  $$0 = $487;
  STACKTOP = sp;return ($$0|0);
 }
 $488 = HEAP32[2210]|0;
 $489 = ($488|0)==(0);
 if ($489) {
  HEAP32[(8848)>>2] = 4096;
  HEAP32[(8844)>>2] = 4096;
  HEAP32[(8852)>>2] = -1;
  HEAP32[(8856)>>2] = -1;
  HEAP32[(8860)>>2] = 0;
  HEAP32[(8812)>>2] = 0;
  $490 = $1;
  $491 = $490 & -16;
  $492 = $491 ^ 1431655768;
  HEAP32[2210] = $492;
  $496 = 4096;
 } else {
  $$pre$i195 = HEAP32[(8848)>>2]|0;
  $496 = $$pre$i195;
 }
 $493 = (($$0192) + 48)|0;
 $494 = (($$0192) + 47)|0;
 $495 = (($496) + ($494))|0;
 $497 = (0 - ($496))|0;
 $498 = $495 & $497;
 $499 = ($498>>>0)>($$0192>>>0);
 if (!($499)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $500 = HEAP32[(8808)>>2]|0;
 $501 = ($500|0)==(0);
 if (!($501)) {
  $502 = HEAP32[(8800)>>2]|0;
  $503 = (($502) + ($498))|0;
  $504 = ($503>>>0)<=($502>>>0);
  $505 = ($503>>>0)>($500>>>0);
  $or$cond1$i = $504 | $505;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $506 = HEAP32[(8812)>>2]|0;
 $507 = $506 & 4;
 $508 = ($507|0)==(0);
 L178: do {
  if ($508) {
   $509 = HEAP32[(8392)>>2]|0;
   $510 = ($509|0)==(0|0);
   L180: do {
    if ($510) {
     label = 128;
    } else {
     $$0$i20$i = (8816);
     while(1) {
      $511 = HEAP32[$$0$i20$i>>2]|0;
      $512 = ($511>>>0)>($509>>>0);
      if (!($512)) {
       $513 = ((($$0$i20$i)) + 4|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($511) + ($514)|0);
       $516 = ($515>>>0)>($509>>>0);
       if ($516) {
        break;
       }
      }
      $517 = ((($$0$i20$i)) + 8|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0|0);
      if ($519) {
       label = 128;
       break L180;
      } else {
       $$0$i20$i = $518;
      }
     }
     $542 = (($495) - ($478))|0;
     $543 = $542 & $497;
     $544 = ($543>>>0)<(2147483647);
     if ($544) {
      $545 = ((($$0$i20$i)) + 4|0);
      $546 = (_sbrk(($543|0))|0);
      $547 = HEAP32[$$0$i20$i>>2]|0;
      $548 = HEAP32[$545>>2]|0;
      $549 = (($547) + ($548)|0);
      $550 = ($546|0)==($549|0);
      if ($550) {
       $551 = ($546|0)==((-1)|0);
       if ($551) {
        $$2234243136$i = $543;
       } else {
        $$723947$i = $543;$$748$i = $546;
        label = 145;
        break L178;
       }
      } else {
       $$2247$ph$i = $546;$$2253$ph$i = $543;
       label = 136;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $520 = (_sbrk(0)|0);
     $521 = ($520|0)==((-1)|0);
     if ($521) {
      $$2234243136$i = 0;
     } else {
      $522 = $520;
      $523 = HEAP32[(8844)>>2]|0;
      $524 = (($523) + -1)|0;
      $525 = $524 & $522;
      $526 = ($525|0)==(0);
      $527 = (($524) + ($522))|0;
      $528 = (0 - ($523))|0;
      $529 = $527 & $528;
      $530 = (($529) - ($522))|0;
      $531 = $526 ? 0 : $530;
      $spec$select49$i = (($531) + ($498))|0;
      $532 = HEAP32[(8800)>>2]|0;
      $533 = (($spec$select49$i) + ($532))|0;
      $534 = ($spec$select49$i>>>0)>($$0192>>>0);
      $535 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i = $534 & $535;
      if ($or$cond$i) {
       $536 = HEAP32[(8808)>>2]|0;
       $537 = ($536|0)==(0);
       if (!($537)) {
        $538 = ($533>>>0)<=($532>>>0);
        $539 = ($533>>>0)>($536>>>0);
        $or$cond2$i = $538 | $539;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $540 = (_sbrk(($spec$select49$i|0))|0);
       $541 = ($540|0)==($520|0);
       if ($541) {
        $$723947$i = $spec$select49$i;$$748$i = $520;
        label = 145;
        break L178;
       } else {
        $$2247$ph$i = $540;$$2253$ph$i = $spec$select49$i;
        label = 136;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $552 = (0 - ($$2253$ph$i))|0;
     $553 = ($$2247$ph$i|0)!=((-1)|0);
     $554 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $554 & $553;
     $555 = ($493>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $555 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $565 = ($$2247$ph$i|0)==((-1)|0);
      if ($565) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 145;
       break L178;
      }
     }
     $556 = HEAP32[(8848)>>2]|0;
     $557 = (($494) - ($$2253$ph$i))|0;
     $558 = (($557) + ($556))|0;
     $559 = (0 - ($556))|0;
     $560 = $558 & $559;
     $561 = ($560>>>0)<(2147483647);
     if (!($561)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
     $562 = (_sbrk(($560|0))|0);
     $563 = ($562|0)==((-1)|0);
     if ($563) {
      (_sbrk(($552|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $564 = (($560) + ($$2253$ph$i))|0;
      $$723947$i = $564;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $566 = HEAP32[(8812)>>2]|0;
   $567 = $566 | 4;
   HEAP32[(8812)>>2] = $567;
   $$4236$i = $$2234243136$i;
   label = 143;
  } else {
   $$4236$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $568 = ($498>>>0)<(2147483647);
  if ($568) {
   $569 = (_sbrk(($498|0))|0);
   $570 = (_sbrk(0)|0);
   $571 = ($569|0)!=((-1)|0);
   $572 = ($570|0)!=((-1)|0);
   $or$cond5$i = $571 & $572;
   $573 = ($569>>>0)<($570>>>0);
   $or$cond8$i = $573 & $or$cond5$i;
   $574 = $570;
   $575 = $569;
   $576 = (($574) - ($575))|0;
   $577 = (($$0192) + 40)|0;
   $578 = ($576>>>0)>($577>>>0);
   $spec$select9$i = $578 ? $576 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $579 = ($569|0)==((-1)|0);
   $not$$i = $578 ^ 1;
   $580 = $579 | $not$$i;
   $or$cond50$i = $580 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $569;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $581 = HEAP32[(8800)>>2]|0;
  $582 = (($581) + ($$723947$i))|0;
  HEAP32[(8800)>>2] = $582;
  $583 = HEAP32[(8804)>>2]|0;
  $584 = ($582>>>0)>($583>>>0);
  if ($584) {
   HEAP32[(8804)>>2] = $582;
  }
  $585 = HEAP32[(8392)>>2]|0;
  $586 = ($585|0)==(0|0);
  L215: do {
   if ($586) {
    $587 = HEAP32[(8384)>>2]|0;
    $588 = ($587|0)==(0|0);
    $589 = ($$748$i>>>0)<($587>>>0);
    $or$cond11$i = $588 | $589;
    if ($or$cond11$i) {
     HEAP32[(8384)>>2] = $$748$i;
    }
    HEAP32[(8816)>>2] = $$748$i;
    HEAP32[(8820)>>2] = $$723947$i;
    HEAP32[(8828)>>2] = 0;
    $590 = HEAP32[2210]|0;
    HEAP32[(8404)>>2] = $590;
    HEAP32[(8400)>>2] = -1;
    HEAP32[(8420)>>2] = (8408);
    HEAP32[(8416)>>2] = (8408);
    HEAP32[(8428)>>2] = (8416);
    HEAP32[(8424)>>2] = (8416);
    HEAP32[(8436)>>2] = (8424);
    HEAP32[(8432)>>2] = (8424);
    HEAP32[(8444)>>2] = (8432);
    HEAP32[(8440)>>2] = (8432);
    HEAP32[(8452)>>2] = (8440);
    HEAP32[(8448)>>2] = (8440);
    HEAP32[(8460)>>2] = (8448);
    HEAP32[(8456)>>2] = (8448);
    HEAP32[(8468)>>2] = (8456);
    HEAP32[(8464)>>2] = (8456);
    HEAP32[(8476)>>2] = (8464);
    HEAP32[(8472)>>2] = (8464);
    HEAP32[(8484)>>2] = (8472);
    HEAP32[(8480)>>2] = (8472);
    HEAP32[(8492)>>2] = (8480);
    HEAP32[(8488)>>2] = (8480);
    HEAP32[(8500)>>2] = (8488);
    HEAP32[(8496)>>2] = (8488);
    HEAP32[(8508)>>2] = (8496);
    HEAP32[(8504)>>2] = (8496);
    HEAP32[(8516)>>2] = (8504);
    HEAP32[(8512)>>2] = (8504);
    HEAP32[(8524)>>2] = (8512);
    HEAP32[(8520)>>2] = (8512);
    HEAP32[(8532)>>2] = (8520);
    HEAP32[(8528)>>2] = (8520);
    HEAP32[(8540)>>2] = (8528);
    HEAP32[(8536)>>2] = (8528);
    HEAP32[(8548)>>2] = (8536);
    HEAP32[(8544)>>2] = (8536);
    HEAP32[(8556)>>2] = (8544);
    HEAP32[(8552)>>2] = (8544);
    HEAP32[(8564)>>2] = (8552);
    HEAP32[(8560)>>2] = (8552);
    HEAP32[(8572)>>2] = (8560);
    HEAP32[(8568)>>2] = (8560);
    HEAP32[(8580)>>2] = (8568);
    HEAP32[(8576)>>2] = (8568);
    HEAP32[(8588)>>2] = (8576);
    HEAP32[(8584)>>2] = (8576);
    HEAP32[(8596)>>2] = (8584);
    HEAP32[(8592)>>2] = (8584);
    HEAP32[(8604)>>2] = (8592);
    HEAP32[(8600)>>2] = (8592);
    HEAP32[(8612)>>2] = (8600);
    HEAP32[(8608)>>2] = (8600);
    HEAP32[(8620)>>2] = (8608);
    HEAP32[(8616)>>2] = (8608);
    HEAP32[(8628)>>2] = (8616);
    HEAP32[(8624)>>2] = (8616);
    HEAP32[(8636)>>2] = (8624);
    HEAP32[(8632)>>2] = (8624);
    HEAP32[(8644)>>2] = (8632);
    HEAP32[(8640)>>2] = (8632);
    HEAP32[(8652)>>2] = (8640);
    HEAP32[(8648)>>2] = (8640);
    HEAP32[(8660)>>2] = (8648);
    HEAP32[(8656)>>2] = (8648);
    HEAP32[(8668)>>2] = (8656);
    HEAP32[(8664)>>2] = (8656);
    $591 = (($$723947$i) + -40)|0;
    $592 = ((($$748$i)) + 8|0);
    $593 = $592;
    $594 = $593 & 7;
    $595 = ($594|0)==(0);
    $596 = (0 - ($593))|0;
    $597 = $596 & 7;
    $598 = $595 ? 0 : $597;
    $599 = (($$748$i) + ($598)|0);
    $600 = (($591) - ($598))|0;
    HEAP32[(8392)>>2] = $599;
    HEAP32[(8380)>>2] = $600;
    $601 = $600 | 1;
    $602 = ((($599)) + 4|0);
    HEAP32[$602>>2] = $601;
    $603 = (($$748$i) + ($591)|0);
    $604 = ((($603)) + 4|0);
    HEAP32[$604>>2] = 40;
    $605 = HEAP32[(8856)>>2]|0;
    HEAP32[(8396)>>2] = $605;
   } else {
    $$024372$i = (8816);
    while(1) {
     $606 = HEAP32[$$024372$i>>2]|0;
     $607 = ((($$024372$i)) + 4|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = (($606) + ($608)|0);
     $610 = ($$748$i|0)==($609|0);
     if ($610) {
      label = 154;
      break;
     }
     $611 = ((($$024372$i)) + 8|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($612|0)==(0|0);
     if ($613) {
      break;
     } else {
      $$024372$i = $612;
     }
    }
    if ((label|0) == 154) {
     $614 = ((($$024372$i)) + 4|0);
     $615 = ((($$024372$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($606>>>0)<=($585>>>0);
      $620 = ($$748$i>>>0)>($585>>>0);
      $or$cond51$i = $620 & $619;
      if ($or$cond51$i) {
       $621 = (($608) + ($$723947$i))|0;
       HEAP32[$614>>2] = $621;
       $622 = HEAP32[(8380)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($585)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($585) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(8392)>>2] = $631;
       HEAP32[(8380)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($585) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(8856)>>2]|0;
       HEAP32[(8396)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(8384)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(8384)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (8816);
    while(1) {
     $641 = HEAP32[$$124471$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 162;
      break;
     }
     $643 = ((($$124471$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124471$i = $644;
     }
    }
    if ((label|0) == 162) {
     $646 = ((($$124471$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $650 = ((($$124471$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($585|0)==($668|0);
      L238: do {
       if ($676) {
        $677 = HEAP32[(8380)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(8380)>>2] = $678;
        HEAP32[(8392)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(8388)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(8376)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(8376)>>2] = $684;
         HEAP32[(8388)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L246: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[2092]|0;
            $703 = $702 & $701;
            HEAP32[2092] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1263$i$i$ph = $719;$$1265$i$i$ph = $715;
              }
             } else {
              $$1263$i$i$ph = $717;$$1265$i$i$ph = $716;
             }
             $$1263$i$i = $$1263$i$i$ph;$$1265$i$i = $$1265$i$i$ph;
             while(1) {
              $721 = ((($$1263$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if ($723) {
               $724 = ((($$1263$i$i)) + 16|0);
               $725 = HEAP32[$724>>2]|0;
               $726 = ($725|0)==(0|0);
               if ($726) {
                break;
               } else {
                $$1263$i$i$be = $725;$$1265$i$i$be = $724;
               }
              } else {
               $$1263$i$i$be = $722;$$1265$i$i$be = $721;
              }
              $$1263$i$i = $$1263$i$i$be;$$1265$i$i = $$1265$i$i$be;
             }
             HEAP32[$$1265$i$i>>2] = 0;
             $$3$i$i = $$1263$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (8672 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(8372)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(8372)>>2] = $736;
             break L246;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)==($668|0);
             $740 = ((($707)) + 20|0);
             $$sink321 = $739 ? $737 : $740;
             HEAP32[$$sink321>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L246;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0259$i$i = $754;
        } else {
         $$0$i$i = $668;$$0259$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0259$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0259$i$i)|0);
        HEAP32[$760>>2] = $$0259$i$i;
        $761 = $$0259$i$i >>> 3;
        $762 = ($$0259$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (8408 + ($763<<2)|0);
         $765 = HEAP32[2092]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[2092] = $769;
          $$pre$i16$i = ((($764)) + 8|0);
          $$0267$i$i = $764;$$pre$phi$i17$iZ2D = $$pre$i16$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0267$i$i = $771;$$pre$phi$i17$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $672;
         $772 = ((($$0267$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0267$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0259$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0268$i$i = 0;
         } else {
          $777 = ($$0259$i$i>>>0)>(16777215);
          if ($777) {
           $$0268$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0259$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0268$i$i = $799;
         }
        } while(0);
        $800 = (8672 + ($$0268$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0268$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(8372)>>2]|0;
        $805 = 1 << $$0268$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(8372)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ((($812)) + 4|0);
        $814 = HEAP32[$813>>2]|0;
        $815 = $814 & -8;
        $816 = ($815|0)==($$0259$i$i|0);
        L291: do {
         if ($816) {
          $$0261$lcssa$i$i = $812;
         } else {
          $817 = ($$0268$i$i|0)==(31);
          $818 = $$0268$i$i >>> 1;
          $819 = (25 - ($818))|0;
          $820 = $817 ? 0 : $819;
          $821 = $$0259$i$i << $820;
          $$02604$i$i = $821;$$02613$i$i = $812;
          while(1) {
           $828 = $$02604$i$i >>> 31;
           $829 = (((($$02613$i$i)) + 16|0) + ($828<<2)|0);
           $824 = HEAP32[$829>>2]|0;
           $830 = ($824|0)==(0|0);
           if ($830) {
            break;
           }
           $822 = $$02604$i$i << 1;
           $823 = ((($824)) + 4|0);
           $825 = HEAP32[$823>>2]|0;
           $826 = $825 & -8;
           $827 = ($826|0)==($$0259$i$i|0);
           if ($827) {
            $$0261$lcssa$i$i = $824;
            break L291;
           } else {
            $$02604$i$i = $822;$$02613$i$i = $824;
           }
          }
          HEAP32[$829>>2] = $672;
          $831 = ((($672)) + 24|0);
          HEAP32[$831>>2] = $$02613$i$i;
          $832 = ((($672)) + 12|0);
          HEAP32[$832>>2] = $672;
          $833 = ((($672)) + 8|0);
          HEAP32[$833>>2] = $672;
          break L238;
         }
        } while(0);
        $834 = ((($$0261$lcssa$i$i)) + 8|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = ((($835)) + 12|0);
        HEAP32[$836>>2] = $672;
        HEAP32[$834>>2] = $672;
        $837 = ((($672)) + 8|0);
        HEAP32[$837>>2] = $835;
        $838 = ((($672)) + 12|0);
        HEAP32[$838>>2] = $$0261$lcssa$i$i;
        $839 = ((($672)) + 24|0);
        HEAP32[$839>>2] = 0;
       }
      } while(0);
      $968 = ((($660)) + 8|0);
      $$0 = $968;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (8816);
    while(1) {
     $840 = HEAP32[$$0$i$i$i>>2]|0;
     $841 = ($840>>>0)>($585>>>0);
     if (!($841)) {
      $842 = ((($$0$i$i$i)) + 4|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = (($840) + ($843)|0);
      $845 = ($844>>>0)>($585>>>0);
      if ($845) {
       break;
      }
     }
     $846 = ((($$0$i$i$i)) + 8|0);
     $847 = HEAP32[$846>>2]|0;
     $$0$i$i$i = $847;
    }
    $848 = ((($844)) + -47|0);
    $849 = ((($848)) + 8|0);
    $850 = $849;
    $851 = $850 & 7;
    $852 = ($851|0)==(0);
    $853 = (0 - ($850))|0;
    $854 = $853 & 7;
    $855 = $852 ? 0 : $854;
    $856 = (($848) + ($855)|0);
    $857 = ((($585)) + 16|0);
    $858 = ($856>>>0)<($857>>>0);
    $859 = $858 ? $585 : $856;
    $860 = ((($859)) + 8|0);
    $861 = ((($859)) + 24|0);
    $862 = (($$723947$i) + -40)|0;
    $863 = ((($$748$i)) + 8|0);
    $864 = $863;
    $865 = $864 & 7;
    $866 = ($865|0)==(0);
    $867 = (0 - ($864))|0;
    $868 = $867 & 7;
    $869 = $866 ? 0 : $868;
    $870 = (($$748$i) + ($869)|0);
    $871 = (($862) - ($869))|0;
    HEAP32[(8392)>>2] = $870;
    HEAP32[(8380)>>2] = $871;
    $872 = $871 | 1;
    $873 = ((($870)) + 4|0);
    HEAP32[$873>>2] = $872;
    $874 = (($$748$i) + ($862)|0);
    $875 = ((($874)) + 4|0);
    HEAP32[$875>>2] = 40;
    $876 = HEAP32[(8856)>>2]|0;
    HEAP32[(8396)>>2] = $876;
    $877 = ((($859)) + 4|0);
    HEAP32[$877>>2] = 27;
    ;HEAP32[$860>>2]=HEAP32[(8816)>>2]|0;HEAP32[$860+4>>2]=HEAP32[(8816)+4>>2]|0;HEAP32[$860+8>>2]=HEAP32[(8816)+8>>2]|0;HEAP32[$860+12>>2]=HEAP32[(8816)+12>>2]|0;
    HEAP32[(8816)>>2] = $$748$i;
    HEAP32[(8820)>>2] = $$723947$i;
    HEAP32[(8828)>>2] = 0;
    HEAP32[(8824)>>2] = $860;
    $879 = $861;
    while(1) {
     $878 = ((($879)) + 4|0);
     HEAP32[$878>>2] = 7;
     $880 = ((($879)) + 8|0);
     $881 = ($880>>>0)<($844>>>0);
     if ($881) {
      $879 = $878;
     } else {
      break;
     }
    }
    $882 = ($859|0)==($585|0);
    if (!($882)) {
     $883 = $859;
     $884 = $585;
     $885 = (($883) - ($884))|0;
     $886 = HEAP32[$877>>2]|0;
     $887 = $886 & -2;
     HEAP32[$877>>2] = $887;
     $888 = $885 | 1;
     $889 = ((($585)) + 4|0);
     HEAP32[$889>>2] = $888;
     HEAP32[$859>>2] = $885;
     $890 = $885 >>> 3;
     $891 = ($885>>>0)<(256);
     if ($891) {
      $892 = $890 << 1;
      $893 = (8408 + ($892<<2)|0);
      $894 = HEAP32[2092]|0;
      $895 = 1 << $890;
      $896 = $894 & $895;
      $897 = ($896|0)==(0);
      if ($897) {
       $898 = $894 | $895;
       HEAP32[2092] = $898;
       $$pre$i$i = ((($893)) + 8|0);
       $$0206$i$i = $893;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $899 = ((($893)) + 8|0);
       $900 = HEAP32[$899>>2]|0;
       $$0206$i$i = $900;$$pre$phi$i$iZ2D = $899;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $585;
      $901 = ((($$0206$i$i)) + 12|0);
      HEAP32[$901>>2] = $585;
      $902 = ((($585)) + 8|0);
      HEAP32[$902>>2] = $$0206$i$i;
      $903 = ((($585)) + 12|0);
      HEAP32[$903>>2] = $893;
      break;
     }
     $904 = $885 >>> 8;
     $905 = ($904|0)==(0);
     if ($905) {
      $$0207$i$i = 0;
     } else {
      $906 = ($885>>>0)>(16777215);
      if ($906) {
       $$0207$i$i = 31;
      } else {
       $907 = (($904) + 1048320)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 8;
       $910 = $904 << $909;
       $911 = (($910) + 520192)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 4;
       $914 = $913 | $909;
       $915 = $910 << $913;
       $916 = (($915) + 245760)|0;
       $917 = $916 >>> 16;
       $918 = $917 & 2;
       $919 = $914 | $918;
       $920 = (14 - ($919))|0;
       $921 = $915 << $918;
       $922 = $921 >>> 15;
       $923 = (($920) + ($922))|0;
       $924 = $923 << 1;
       $925 = (($923) + 7)|0;
       $926 = $885 >>> $925;
       $927 = $926 & 1;
       $928 = $927 | $924;
       $$0207$i$i = $928;
      }
     }
     $929 = (8672 + ($$0207$i$i<<2)|0);
     $930 = ((($585)) + 28|0);
     HEAP32[$930>>2] = $$0207$i$i;
     $931 = ((($585)) + 20|0);
     HEAP32[$931>>2] = 0;
     HEAP32[$857>>2] = 0;
     $932 = HEAP32[(8372)>>2]|0;
     $933 = 1 << $$0207$i$i;
     $934 = $932 & $933;
     $935 = ($934|0)==(0);
     if ($935) {
      $936 = $932 | $933;
      HEAP32[(8372)>>2] = $936;
      HEAP32[$929>>2] = $585;
      $937 = ((($585)) + 24|0);
      HEAP32[$937>>2] = $929;
      $938 = ((($585)) + 12|0);
      HEAP32[$938>>2] = $585;
      $939 = ((($585)) + 8|0);
      HEAP32[$939>>2] = $585;
      break;
     }
     $940 = HEAP32[$929>>2]|0;
     $941 = ((($940)) + 4|0);
     $942 = HEAP32[$941>>2]|0;
     $943 = $942 & -8;
     $944 = ($943|0)==($885|0);
     L325: do {
      if ($944) {
       $$0202$lcssa$i$i = $940;
      } else {
       $945 = ($$0207$i$i|0)==(31);
       $946 = $$0207$i$i >>> 1;
       $947 = (25 - ($946))|0;
       $948 = $945 ? 0 : $947;
       $949 = $885 << $948;
       $$02014$i$i = $949;$$02023$i$i = $940;
       while(1) {
        $956 = $$02014$i$i >>> 31;
        $957 = (((($$02023$i$i)) + 16|0) + ($956<<2)|0);
        $952 = HEAP32[$957>>2]|0;
        $958 = ($952|0)==(0|0);
        if ($958) {
         break;
        }
        $950 = $$02014$i$i << 1;
        $951 = ((($952)) + 4|0);
        $953 = HEAP32[$951>>2]|0;
        $954 = $953 & -8;
        $955 = ($954|0)==($885|0);
        if ($955) {
         $$0202$lcssa$i$i = $952;
         break L325;
        } else {
         $$02014$i$i = $950;$$02023$i$i = $952;
        }
       }
       HEAP32[$957>>2] = $585;
       $959 = ((($585)) + 24|0);
       HEAP32[$959>>2] = $$02023$i$i;
       $960 = ((($585)) + 12|0);
       HEAP32[$960>>2] = $585;
       $961 = ((($585)) + 8|0);
       HEAP32[$961>>2] = $585;
       break L215;
      }
     } while(0);
     $962 = ((($$0202$lcssa$i$i)) + 8|0);
     $963 = HEAP32[$962>>2]|0;
     $964 = ((($963)) + 12|0);
     HEAP32[$964>>2] = $585;
     HEAP32[$962>>2] = $585;
     $965 = ((($585)) + 8|0);
     HEAP32[$965>>2] = $963;
     $966 = ((($585)) + 12|0);
     HEAP32[$966>>2] = $$0202$lcssa$i$i;
     $967 = ((($585)) + 24|0);
     HEAP32[$967>>2] = 0;
    }
   }
  } while(0);
  $969 = HEAP32[(8380)>>2]|0;
  $970 = ($969>>>0)>($$0192>>>0);
  if ($970) {
   $971 = (($969) - ($$0192))|0;
   HEAP32[(8380)>>2] = $971;
   $972 = HEAP32[(8392)>>2]|0;
   $973 = (($972) + ($$0192)|0);
   HEAP32[(8392)>>2] = $973;
   $974 = $971 | 1;
   $975 = ((($973)) + 4|0);
   HEAP32[$975>>2] = $974;
   $976 = $$0192 | 3;
   $977 = ((($972)) + 4|0);
   HEAP32[$977>>2] = $976;
   $978 = ((($972)) + 8|0);
   $$0 = $978;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $979 = (___errno_location()|0);
 HEAP32[$979>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0194$i = 0, $$0194$in$i = 0, $$0346381 = 0, $$0347$lcssa = 0, $$0347380 = 0, $$0359 = 0, $$0366 = 0, $$1 = 0, $$1345 = 0, $$1350 = 0, $$1350$be = 0, $$1350$ph = 0, $$1353 = 0, $$1353$be = 0, $$1353$ph = 0, $$1361 = 0, $$1361$be = 0, $$1361$ph = 0, $$1365 = 0, $$1365$be = 0;
 var $$1365$ph = 0, $$2 = 0, $$3 = 0, $$3363 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink395 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond371 = 0, $cond372 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(8384)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(8388)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    }
    $83 = (($14) + ($15)|0);
    $84 = ((($14)) + 4|0);
    $85 = $15 | 1;
    $86 = $80 & -2;
    HEAP32[(8376)>>2] = $15;
    HEAP32[$79>>2] = $86;
    HEAP32[$84>>2] = $85;
    HEAP32[$83>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[2092]|0;
     $29 = $28 & $27;
     HEAP32[2092] = $29;
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1350$ph = $45;$$1353$ph = $41;
      }
     } else {
      $$1350$ph = $43;$$1353$ph = $42;
     }
     $$1350 = $$1350$ph;$$1353 = $$1353$ph;
     while(1) {
      $47 = ((($$1350)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $50 = ((($$1350)) + 16|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if ($52) {
        break;
       } else {
        $$1350$be = $51;$$1353$be = $50;
       }
      } else {
       $$1350$be = $48;$$1353$be = $47;
      }
      $$1350 = $$1350$be;$$1353 = $$1353$be;
     }
     HEAP32[$$1353>>2] = 0;
     $$3 = $$1350;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1345 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (8672 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond371 = ($$3|0)==(0|0);
     if ($cond371) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(8372)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(8372)>>2] = $62;
      $$1 = $14;$$1345 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==($14|0);
     $66 = ((($33)) + 20|0);
     $$sink = $65 ? $63 : $66;
     HEAP32[$$sink>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1345 = $15;$87 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1345 = $15;$87 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1345 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1345 = $6;$87 = $2;
  }
 } while(0);
 $88 = ($87>>>0)<($7>>>0);
 if (!($88)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(8392)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(8380)>>2]|0;
   $98 = (($97) + ($$1345))|0;
   HEAP32[(8380)>>2] = $98;
   HEAP32[(8392)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(8388)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(8388)>>2] = 0;
   HEAP32[(8376)>>2] = 0;
   return;
  }
  $103 = HEAP32[(8388)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(8376)>>2]|0;
   $106 = (($105) + ($$1345))|0;
   HEAP32[(8376)>>2] = $106;
   HEAP32[(8388)>>2] = $87;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($87) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1345))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[2092]|0;
     $122 = $121 & $120;
     HEAP32[2092] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3363 = 0;
        break;
       } else {
        $$1361$ph = $138;$$1365$ph = $134;
       }
      } else {
       $$1361$ph = $136;$$1365$ph = $135;
      }
      $$1361 = $$1361$ph;$$1365 = $$1365$ph;
      while(1) {
       $140 = ((($$1361)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $143 = ((($$1361)) + 16|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)==(0|0);
        if ($145) {
         break;
        } else {
         $$1361$be = $144;$$1365$be = $143;
        }
       } else {
        $$1361$be = $141;$$1365$be = $140;
       }
       $$1361 = $$1361$be;$$1365 = $$1365$be;
      }
      HEAP32[$$1365>>2] = 0;
      $$3363 = $$1361;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3363 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (8672 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3363;
      $cond372 = ($$3363|0)==(0|0);
      if ($cond372) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(8372)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(8372)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)==($7|0);
      $159 = ((($126)) + 20|0);
      $$sink395 = $158 ? $156 : $159;
      HEAP32[$$sink395>>2] = $$3363;
      $160 = ($$3363|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3363)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3363)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3363;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3363)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3363;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($87) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(8388)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(8376)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1345 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($87) + ($$1345)|0);
  HEAP32[$180>>2] = $$1345;
  $$2 = $$1345;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (8408 + ($183<<2)|0);
  $185 = HEAP32[2092]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[2092] = $189;
   $$pre = ((($184)) + 8|0);
   $$0366 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0366 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0366)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0366;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0359 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0359 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0359 = $219;
  }
 }
 $220 = (8672 + ($$0359<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0359;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(8372)>>2]|0;
 $225 = 1 << $$0359;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 L112: do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(8372)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ((($232)) + 4|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 & -8;
   $236 = ($235|0)==($$2|0);
   L115: do {
    if ($236) {
     $$0347$lcssa = $232;
    } else {
     $237 = ($$0359|0)==(31);
     $238 = $$0359 >>> 1;
     $239 = (25 - ($238))|0;
     $240 = $237 ? 0 : $239;
     $241 = $$2 << $240;
     $$0346381 = $241;$$0347380 = $232;
     while(1) {
      $248 = $$0346381 >>> 31;
      $249 = (((($$0347380)) + 16|0) + ($248<<2)|0);
      $244 = HEAP32[$249>>2]|0;
      $250 = ($244|0)==(0|0);
      if ($250) {
       break;
      }
      $242 = $$0346381 << 1;
      $243 = ((($244)) + 4|0);
      $245 = HEAP32[$243>>2]|0;
      $246 = $245 & -8;
      $247 = ($246|0)==($$2|0);
      if ($247) {
       $$0347$lcssa = $244;
       break L115;
      } else {
       $$0346381 = $242;$$0347380 = $244;
      }
     }
     HEAP32[$249>>2] = $$1;
     $251 = ((($$1)) + 24|0);
     HEAP32[$251>>2] = $$0347380;
     $252 = ((($$1)) + 12|0);
     HEAP32[$252>>2] = $$1;
     $253 = ((($$1)) + 8|0);
     HEAP32[$253>>2] = $$1;
     break L112;
    }
   } while(0);
   $254 = ((($$0347$lcssa)) + 8|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 12|0);
   HEAP32[$256>>2] = $$1;
   HEAP32[$254>>2] = $$1;
   $257 = ((($$1)) + 8|0);
   HEAP32[$257>>2] = $255;
   $258 = ((($$1)) + 12|0);
   HEAP32[$258>>2] = $$0347$lcssa;
   $259 = ((($$1)) + 24|0);
   HEAP32[$259>>2] = 0;
  }
 } while(0);
 $260 = HEAP32[(8400)>>2]|0;
 $261 = (($260) + -1)|0;
 HEAP32[(8400)>>2] = $261;
 $262 = ($261|0)==(0);
 if (!($262)) {
  return;
 }
 $$0194$in$i = (8824);
 while(1) {
  $$0194$i = HEAP32[$$0194$in$i>>2]|0;
  $263 = ($$0194$i|0)==(0|0);
  $264 = ((($$0194$i)) + 8|0);
  if ($263) {
   break;
  } else {
   $$0194$in$i = $264;
  }
 }
 HEAP32[(8400)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1245 = 0, $$1245$be = 0, $$1245$ph = 0, $$1248 = 0, $$1248$be = 0, $$1248$ph = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(8848)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(8392)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(8380)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(8392)>>2] = $33;
  HEAP32[(8380)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(8388)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(8376)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(8376)>>2] = $storemerge1;
  HEAP32[(8388)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[2092]|0;
    $81 = $80 & $79;
    HEAP32[2092] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1245$ph = $97;$$1248$ph = $93;
      }
     } else {
      $$1245$ph = $95;$$1248$ph = $94;
     }
     $$1245 = $$1245$ph;$$1248 = $$1248$ph;
     while(1) {
      $99 = ((($$1245)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if ($101) {
       $102 = ((($$1245)) + 16|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($103|0)==(0|0);
       if ($104) {
        break;
       } else {
        $$1245$be = $103;$$1248$be = $102;
       }
      } else {
       $$1245$be = $100;$$1248$be = $99;
      }
      $$1245 = $$1245$be;$$1248 = $$1248$be;
     }
     HEAP32[$$1248>>2] = 0;
     $$3 = $$1245;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (8672 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(8372)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(8372)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==($5|0);
     $118 = ((($85)) + 20|0);
     $$sink = $117 ? $115 : $118;
     HEAP32[$$sink>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $132 | $68;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03649 = 0, $$0365$lcssa = 0, $$03658 = 0, $$0376 = 0, $$0383 = 0, $$1 = 0, $$1363 = 0, $$1371 = 0, $$1371$be = 0, $$1371$ph = 0, $$1374 = 0, $$1374$be = 0, $$1374$ph = 0, $$1378 = 0, $$1378$be = 0, $$1378$ph = 0, $$1382 = 0, $$1382$be = 0, $$1382$ph = 0, $$2 = 0;
 var $$3 = 0, $$3380 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink24 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(8388)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1363 = $12;
     break;
    }
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $76 & -2;
    HEAP32[(8376)>>2] = $12;
    HEAP32[$75>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[2092]|0;
     $25 = $24 & $23;
     HEAP32[2092] = $25;
     $$1 = $11;$$1363 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1363 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1371$ph = $41;$$1374$ph = $37;
      }
     } else {
      $$1371$ph = $39;$$1374$ph = $38;
     }
     $$1371 = $$1371$ph;$$1374 = $$1374$ph;
     while(1) {
      $43 = ((($$1371)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if ($45) {
       $46 = ((($$1371)) + 16|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0|0);
       if ($48) {
        break;
       } else {
        $$1371$be = $47;$$1374$be = $46;
       }
      } else {
       $$1371$be = $44;$$1374$be = $43;
      }
      $$1371 = $$1371$be;$$1374 = $$1374$be;
     }
     HEAP32[$$1374>>2] = 0;
     $$3 = $$1371;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1363 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (8672 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(8372)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(8372)>>2] = $58;
      $$1 = $11;$$1363 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==($11|0);
     $62 = ((($29)) + 20|0);
     $$sink = $61 ? $59 : $62;
     HEAP32[$$sink>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1363 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1363 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1363 = $12;
    }
   }
  } else {
   $$1 = $0;$$1363 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(8392)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(8380)>>2]|0;
   $89 = (($88) + ($$1363))|0;
   HEAP32[(8380)>>2] = $89;
   HEAP32[(8392)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(8388)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(8388)>>2] = 0;
   HEAP32[(8376)>>2] = 0;
   return;
  }
  $94 = HEAP32[(8388)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(8376)>>2]|0;
   $97 = (($96) + ($$1363))|0;
   HEAP32[(8376)>>2] = $97;
   HEAP32[(8388)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1363))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[2092]|0;
     $113 = $112 & $111;
     HEAP32[2092] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3380 = 0;
        break;
       } else {
        $$1378$ph = $129;$$1382$ph = $125;
       }
      } else {
       $$1378$ph = $127;$$1382$ph = $126;
      }
      $$1378 = $$1378$ph;$$1382 = $$1382$ph;
      while(1) {
       $131 = ((($$1378)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if ($133) {
        $134 = ((($$1378)) + 16|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if ($136) {
         break;
        } else {
         $$1378$be = $135;$$1382$be = $134;
        }
       } else {
        $$1378$be = $132;$$1382$be = $131;
       }
       $$1378 = $$1378$be;$$1382 = $$1382$be;
      }
      HEAP32[$$1382>>2] = 0;
      $$3380 = $$1378;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3380 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (8672 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3380;
      $cond4 = ($$3380|0)==(0|0);
      if ($cond4) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(8372)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(8372)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)==($2|0);
      $150 = ((($117)) + 20|0);
      $$sink24 = $149 ? $147 : $150;
      HEAP32[$$sink24>>2] = $$3380;
      $151 = ($$3380|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3380)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3380)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3380;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3380)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3380;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(8388)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(8376)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1363 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1363)|0);
  HEAP32[$171>>2] = $$1363;
  $$2 = $$1363;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (8408 + ($174<<2)|0);
  $176 = HEAP32[2092]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[2092] = $180;
   $$pre = ((($175)) + 8|0);
   $$0383 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0383 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0383)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0383;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0376 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0376 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0376 = $210;
  }
 }
 $211 = (8672 + ($$0376<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0376;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(8372)>>2]|0;
 $216 = 1 << $$0376;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(8372)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ((($223)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $225 & -8;
 $227 = ($226|0)==($$2|0);
 L104: do {
  if ($227) {
   $$0365$lcssa = $223;
  } else {
   $228 = ($$0376|0)==(31);
   $229 = $$0376 >>> 1;
   $230 = (25 - ($229))|0;
   $231 = $228 ? 0 : $230;
   $232 = $$2 << $231;
   $$03649 = $232;$$03658 = $223;
   while(1) {
    $239 = $$03649 >>> 31;
    $240 = (((($$03658)) + 16|0) + ($239<<2)|0);
    $235 = HEAP32[$240>>2]|0;
    $241 = ($235|0)==(0|0);
    if ($241) {
     break;
    }
    $233 = $$03649 << 1;
    $234 = ((($235)) + 4|0);
    $236 = HEAP32[$234>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     $$0365$lcssa = $235;
     break L104;
    } else {
     $$03649 = $233;$$03658 = $235;
    }
   }
   HEAP32[$240>>2] = $$1;
   $242 = ((($$1)) + 24|0);
   HEAP32[$242>>2] = $$03658;
   $243 = ((($$1)) + 12|0);
   HEAP32[$243>>2] = $$1;
   $244 = ((($$1)) + 8|0);
   HEAP32[$244>>2] = $$1;
   return;
  }
 } while(0);
 $245 = ((($$0365$lcssa)) + 8|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ((($246)) + 12|0);
 HEAP32[$247>>2] = $$1;
 HEAP32[$245>>2] = $$1;
 $248 = ((($$1)) + 8|0);
 HEAP32[$248>>2] = $246;
 $249 = ((($$1)) + 12|0);
 HEAP32[$249>>2] = $$0365$lcssa;
 $250 = ((($$1)) + 24|0);
 HEAP32[$250>>2] = 0;
 return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_723($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8928|0);
}
function _dummy_723($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 15;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strtox_753($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 setTempRet0(($13) | 0);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154215 = 0, $$0157 = 0, $$0159 = 0, $$1155184 = 0, $$1158 = 0, $$1160 = 0, $$1160170 = 0, $$1165 = 0, $$1165168 = 0, $$1165169 = 0, $$2156202 = 0, $$3162208 = 0, $$4163$lcssa = 0, $$6$lcssa = 0, $$7190 = 0, $$8 = 0, $$pre$phi237Z2D = 0, $$pre$phi239Z2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond179 = 0, $or$cond5 = 0, $or$cond7 = 0, $spec$select166 = 0, $spec$select167 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $6 = (___errno_location()|0);
   HEAP32[$6>>2] = 22;
   $291 = 0;$292 = 0;
  } else {
   $7 = ((($0)) + 4|0);
   $8 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$7>>2]|0;
    $10 = HEAP32[$8>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$7>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$7>>2]|0;
     $22 = HEAP32[$8>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$7>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$7>>2]|0;
     $33 = HEAP32[$8>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$7>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160170 = $40;$$1165168 = 8;
       label = 47;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$7>>2]|0;
     $43 = HEAP32[$8>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$7>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((1393) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$8>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$7>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$7>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $291 = 0;$292 = 0;
       break L1;
      }
      if ($54) {
       $291 = 0;$292 = 0;
       break L1;
      }
      $58 = HEAP32[$7>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$7>>2] = $59;
      $291 = 0;$292 = 0;
      break L1;
     } else {
      $$1160170 = $50;$$1165168 = 16;
      label = 47;
     }
    } else {
     $spec$select166 = $28 ? 10 : $1;
     $60 = ((1393) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($spec$select166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $spec$select166;
      label = 32;
     } else {
      $64 = HEAP32[$8>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$7>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$7>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $291 = 0;$292 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154215 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154215*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$7>>2]|0;
        $76 = HEAP32[$8>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$7>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $83 = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $83 = $81;
        }
        $82 = (($83) + -48)|0;
        $84 = ($82>>>0)<(10);
        $85 = ($73>>>0)<(429496729);
        $86 = $84 & $85;
        if ($86) {
         $$0154215 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $87 = ($82>>>0)<(10);
       if ($87) {
        $$3162208 = $83;$88 = $73;$89 = 0;$92 = $82;
        while(1) {
         $90 = (___muldi3(($88|0),($89|0),10,0)|0);
         $91 = (getTempRet0() | 0);
         $93 = ($92|0)<(0);
         $94 = $93 << 31 >> 31;
         $95 = $92 ^ -1;
         $96 = $94 ^ -1;
         $97 = ($91>>>0)>($96>>>0);
         $98 = ($90>>>0)>($95>>>0);
         $99 = ($91|0)==($96|0);
         $100 = $99 & $98;
         $101 = $97 | $100;
         if ($101) {
          $$1165169 = 10;$$8 = $$3162208;$293 = $88;$294 = $89;
          label = 76;
          break L43;
         }
         $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
         $103 = (getTempRet0() | 0);
         $104 = HEAP32[$7>>2]|0;
         $105 = HEAP32[$8>>2]|0;
         $106 = ($104>>>0)<($105>>>0);
         if ($106) {
          $107 = ((($104)) + 1|0);
          HEAP32[$7>>2] = $107;
          $108 = HEAP8[$104>>0]|0;
          $109 = $108&255;
          $112 = $109;
         } else {
          $110 = (___shgetc($0)|0);
          $112 = $110;
         }
         $111 = (($112) + -48)|0;
         $113 = ($111>>>0)<(10);
         $114 = ($103>>>0)<(429496729);
         $115 = ($102>>>0)<(2576980378);
         $116 = ($103|0)==(429496729);
         $117 = $116 & $115;
         $118 = $114 | $117;
         $or$cond7 = $113 & $118;
         if ($or$cond7) {
          $$3162208 = $112;$88 = $102;$89 = $103;$92 = $111;
         } else {
          break;
         }
        }
        $119 = ($111>>>0)>(9);
        if ($119) {
         $$1158 = $$0157;$264 = $103;$266 = $102;
        } else {
         $$1165169 = 10;$$8 = $112;$293 = $102;$294 = $103;
         label = 76;
        }
       } else {
        $$1158 = $$0157;$264 = 0;$266 = $73;
       }
      } else {
       $$1158 = $$0157;$264 = 0;$266 = 0;
      }
     } else {
      $$1160170 = $$1160;$$1165168 = $$1165;
      label = 47;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 47) {
     $120 = (($$1165168) + -1)|0;
     $121 = $120 & $$1165168;
     $122 = ($121|0)==(0);
     if ($122) {
      $123 = ($$1165168*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (7220 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((1393) + ($$1160170)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($$1165168>>>0)>($131>>>0);
      if ($132) {
       $$1155184 = 0;$135 = $131;
       while(1) {
        $133 = $$1155184 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$7>>2]|0;
        $137 = HEAP32[$8>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$7>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $144 = $141;
        } else {
         $142 = (___shgetc($0)|0);
         $144 = $142;
        }
        $143 = ((1393) + ($144)|0);
        $145 = HEAP8[$143>>0]|0;
        $146 = $145&255;
        $147 = ($$1165168>>>0)>($146>>>0);
        $148 = ($134>>>0)<(134217728);
        $149 = $148 & $147;
        if ($149) {
         $$1155184 = $134;$135 = $146;
        } else {
         break;
        }
       }
       $$4163$lcssa = $144;$$pre$phi237Z2D = $146;$154 = 0;$156 = $134;$295 = $145;
      } else {
       $$4163$lcssa = $$1160170;$$pre$phi237Z2D = $131;$154 = 0;$156 = 0;$295 = $130;
      }
      $150 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $151 = (getTempRet0() | 0);
      $152 = ($$1165168>>>0)<=($$pre$phi237Z2D>>>0);
      $153 = ($151>>>0)<($154>>>0);
      $155 = ($150>>>0)<($156>>>0);
      $157 = ($151|0)==($154|0);
      $158 = $157 & $155;
      $159 = $153 | $158;
      $or$cond179 = $152 | $159;
      if ($or$cond179) {
       $$1165169 = $$1165168;$$8 = $$4163$lcssa;$293 = $156;$294 = $154;
       label = 76;
       break;
      }
      $160 = $156;$161 = $154;$165 = $295;
      while(1) {
       $162 = (_bitshift64Shl(($160|0),($161|0),($128|0))|0);
       $163 = (getTempRet0() | 0);
       $164 = $165&255;
       $166 = $162 | $164;
       $167 = HEAP32[$7>>2]|0;
       $168 = HEAP32[$8>>2]|0;
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $170 = ((($167)) + 1|0);
        HEAP32[$7>>2] = $170;
        $171 = HEAP8[$167>>0]|0;
        $172 = $171&255;
        $175 = $172;
       } else {
        $173 = (___shgetc($0)|0);
        $175 = $173;
       }
       $174 = ((1393) + ($175)|0);
       $176 = HEAP8[$174>>0]|0;
       $177 = $176&255;
       $178 = ($$1165168>>>0)<=($177>>>0);
       $179 = ($163>>>0)>($151>>>0);
       $180 = ($166>>>0)>($150>>>0);
       $181 = ($163|0)==($151|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$1165169 = $$1165168;$$8 = $175;$293 = $166;$294 = $163;
        label = 76;
        break L63;
       } else {
        $160 = $166;$161 = $163;$165 = $176;
       }
      }
     }
     $184 = ((1393) + ($$1160170)|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = ($$1165168>>>0)>($186>>>0);
     if ($187) {
      $$2156202 = 0;$190 = $186;
      while(1) {
       $188 = Math_imul($$2156202, $$1165168)|0;
       $189 = (($190) + ($188))|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = HEAP32[$8>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = ((($191)) + 1|0);
        HEAP32[$7>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $199 = $196;
       } else {
        $197 = (___shgetc($0)|0);
        $199 = $197;
       }
       $198 = ((1393) + ($199)|0);
       $200 = HEAP8[$198>>0]|0;
       $201 = $200&255;
       $202 = ($$1165168>>>0)>($201>>>0);
       $203 = ($189>>>0)<(119304647);
       $204 = $203 & $202;
       if ($204) {
        $$2156202 = $189;$190 = $201;
       } else {
        break;
       }
      }
      $$6$lcssa = $199;$$pre$phi239Z2D = $201;$296 = $200;$297 = $189;$298 = 0;
     } else {
      $$6$lcssa = $$1160170;$$pre$phi239Z2D = $186;$296 = $185;$297 = 0;$298 = 0;
     }
     $205 = ($$1165168>>>0)>($$pre$phi239Z2D>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = (getTempRet0() | 0);
      $$7190 = $$6$lcssa;$208 = $298;$210 = $297;$218 = $296;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $210;$294 = $208;
        label = 76;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = (getTempRet0() | 0);
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $210;$294 = $208;
        label = 76;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = (getTempRet0() | 0);
       $227 = HEAP32[$7>>2]|0;
       $228 = HEAP32[$8>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$7>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $235 = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $235 = $233;
       }
       $234 = ((1393) + ($235)|0);
       $236 = HEAP8[$234>>0]|0;
       $237 = $236&255;
       $238 = ($$1165168>>>0)>($237>>>0);
       if ($238) {
        $$7190 = $235;$208 = $226;$210 = $225;$218 = $236;
       } else {
        $$1165169 = $$1165168;$$8 = $235;$293 = $225;$294 = $226;
        label = 76;
        break;
       }
      }
     } else {
      $$1165169 = $$1165168;$$8 = $$6$lcssa;$293 = $297;$294 = $298;
      label = 76;
     }
    }
   } while(0);
   if ((label|0) == 76) {
    $239 = ((1393) + ($$8)|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = ($$1165169>>>0)>($241>>>0);
    if ($242) {
     while(1) {
      $243 = HEAP32[$7>>2]|0;
      $244 = HEAP32[$8>>2]|0;
      $245 = ($243>>>0)<($244>>>0);
      if ($245) {
       $246 = ((($243)) + 1|0);
       HEAP32[$7>>2] = $246;
       $247 = HEAP8[$243>>0]|0;
       $248 = $247&255;
       $251 = $248;
      } else {
       $249 = (___shgetc($0)|0);
       $251 = $249;
      }
      $250 = ((1393) + ($251)|0);
      $252 = HEAP8[$250>>0]|0;
      $253 = $252&255;
      $254 = ($$1165169>>>0)>($253>>>0);
      if (!($254)) {
       break;
      }
     }
     $255 = (___errno_location()|0);
     HEAP32[$255>>2] = 34;
     $256 = $3 & 1;
     $257 = ($256|0)==(0);
     $258 = (0)==(0);
     $259 = $257 & $258;
     $spec$select167 = $259 ? $$0157 : 0;
     $$1158 = $spec$select167;$264 = $4;$266 = $3;
    } else {
     $$1158 = $$0157;$264 = $294;$266 = $293;
    }
   }
   $260 = HEAP32[$8>>2]|0;
   $261 = ($260|0)==(0|0);
   if (!($261)) {
    $262 = HEAP32[$7>>2]|0;
    $263 = ((($262)) + -1|0);
    HEAP32[$7>>2] = $263;
   }
   $265 = ($264>>>0)<($4>>>0);
   $267 = ($266>>>0)<($3>>>0);
   $268 = ($264|0)==($4|0);
   $269 = $268 & $267;
   $270 = $265 | $269;
   if (!($270)) {
    $271 = $3 & 1;
    $272 = ($271|0)!=(0);
    $273 = (0)!=(0);
    $274 = $272 | $273;
    $275 = ($$1158|0)!=(0);
    $or$cond12 = $274 | $275;
    if (!($or$cond12)) {
     $276 = (___errno_location()|0);
     HEAP32[$276>>2] = 34;
     $277 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $278 = (getTempRet0() | 0);
     $291 = $278;$292 = $277;
     break;
    }
    $279 = ($264>>>0)>($4>>>0);
    $280 = ($266>>>0)>($3>>>0);
    $281 = ($264|0)==($4|0);
    $282 = $281 & $280;
    $283 = $279 | $282;
    if ($283) {
     $284 = (___errno_location()|0);
     HEAP32[$284>>2] = 34;
     $291 = $4;$292 = $3;
     break;
    }
   }
   $285 = ($$1158|0)<(0);
   $286 = $285 << 31 >> 31;
   $287 = $266 ^ $$1158;
   $288 = $264 ^ $286;
   $289 = (_i64Subtract(($287|0),($288|0),($$1158|0),($286|0))|0);
   $290 = (getTempRet0() | 0);
   $291 = $290;$292 = $289;
  }
 } while(0);
 setTempRet0(($291) | 0);
 return ($292|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $26 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $26 = $42;
   }
   $27 = ($26|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($27) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $26;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($7|0)==($39|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 31]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 31]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_753($0,$1,$2,-2147483648,0)|0);
 $4 = (getTempRet0() | 0);
 return ($3|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$$lcssa = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$$lcssa = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$$lcssa = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $$lcssa&255;
  $16 = HEAP8[$$0$lcssa>>0]|0;
  $17 = $16&255;
  $18 = (($15) - ($17))|0;
  $$020 = $18;
 }
 return ($$020|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select41 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 208|0;
 $4 = sp + 160|0;
 $5 = sp + 80|0;
 $6 = sp;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 31]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $spec$select = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $spec$select41 = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select41;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0;
 var $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0;
 var $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$3317 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa308 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre360 = 0, $$pre362 = 0, $$pre363 = 0, $$pre363$pre = 0, $$pre364 = 0;
 var $$pre368 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge326 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond283 = 0, $spec$select = 0, $spec$select281 = 0, $spec$select284 = 0;
 var $spec$select291 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $storemerge273$lcssa = 0, $storemerge273327 = 0, $storemerge274 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 56|0;
 $6 = sp + 40|0;
 $7 = sp;
 $8 = sp + 48|0;
 $9 = sp + 60|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243$ph = 0;$$0247$ph = 0;$$0269$ph = 0;
 L1: while(1) {
  $$0243 = $$0243$ph;$$0247 = $$0247$ph;
  while(1) {
   $15 = ($$0247|0)>(-1);
   do {
    if ($15) {
     $16 = (2147483647 - ($$0247))|0;
     $17 = ($$0243|0)>($16|0);
     if ($17) {
      $18 = (___errno_location()|0);
      HEAP32[$18>>2] = 75;
      $$1248 = -1;
      break;
     } else {
      $19 = (($$0243) + ($$0247))|0;
      $$1248 = $19;
      break;
     }
    } else {
     $$1248 = $$0247;
    }
   } while(0);
   $20 = HEAP32[$5>>2]|0;
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    label = 94;
    break L1;
   }
   $23 = $21;$25 = $20;
   L12: while(1) {
    switch ($23<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0249$lcssa = $25;
     break L12;
     break;
    }
    default: {
    }
    }
    $24 = ((($25)) + 1|0);
    HEAP32[$5>>2] = $24;
    $$pre = HEAP8[$24>>0]|0;
    $23 = $$pre;$25 = $24;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0249321 = $25;$27 = $25;
     while(1) {
      $26 = ((($27)) + 1|0);
      $28 = HEAP8[$26>>0]|0;
      $29 = ($28<<24>>24)==(37);
      if (!($29)) {
       $$0249$lcssa = $$0249321;
       break L15;
      }
      $30 = ((($$0249321)) + 1|0);
      $31 = ((($27)) + 2|0);
      HEAP32[$5>>2] = $31;
      $32 = HEAP8[$31>>0]|0;
      $33 = ($32<<24>>24)==(37);
      if ($33) {
       $$0249321 = $30;$27 = $31;
      } else {
       $$0249$lcssa = $30;
       break;
      }
     }
    }
   } while(0);
   $34 = $$0249$lcssa;
   $35 = $20;
   $36 = (($34) - ($35))|0;
   if ($10) {
    _out($0,$20,$36);
   }
   $37 = ($36|0)==(0);
   if ($37) {
    break;
   } else {
    $$0243 = $36;$$0247 = $$1248;
   }
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre360 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
  } else {
   $44 = ((($$pre360)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre360)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
   }
  }
  $51 = (($$pre360) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge326 = $55 | $58;
  if ($brmerge326) {
   $$0262$lcssa = 0;$$lcssa308 = $52;$storemerge273$lcssa = $51;
  } else {
   $$0262328 = 0;$60 = $54;$storemerge273327 = $51;
   while(1) {
    $59 = 1 << $60;
    $61 = $59 | $$0262328;
    $62 = ((($storemerge273327)) + 1|0);
    HEAP32[$5>>2] = $62;
    $63 = HEAP8[$62>>0]|0;
    $64 = $63 << 24 >> 24;
    $65 = (($64) + -32)|0;
    $66 = ($65>>>0)>(31);
    $67 = 1 << $65;
    $68 = $67 & 75913;
    $69 = ($68|0)==(0);
    $brmerge = $66 | $69;
    if ($brmerge) {
     $$0262$lcssa = $61;$$lcssa308 = $63;$storemerge273$lcssa = $62;
     break;
    } else {
     $$0262328 = $61;$60 = $65;$storemerge273327 = $62;
    }
   }
  }
  $70 = ($$lcssa308<<24>>24)==(42);
  if ($70) {
   $71 = ((($storemerge273$lcssa)) + 1|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72 << 24 >> 24;
   $74 = (_isdigit($73)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    label = 27;
   } else {
    $76 = HEAP32[$5>>2]|0;
    $77 = ((($76)) + 2|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ($78<<24>>24)==(36);
    if ($79) {
     $80 = ((($76)) + 1|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81 << 24 >> 24;
     $83 = (($82) + -48)|0;
     $84 = (($4) + ($83<<2)|0);
     HEAP32[$84>>2] = 10;
     $85 = HEAP8[$80>>0]|0;
     $86 = $85 << 24 >> 24;
     $87 = (($86) + -48)|0;
     $88 = (($3) + ($87<<3)|0);
     $89 = $88;
     $90 = $89;
     $91 = HEAP32[$90>>2]|0;
     $92 = (($89) + 4)|0;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($76)) + 3|0);
     $$0259 = $91;$$2271 = 1;$storemerge274 = $95;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $96 = ($$1270|0)==(0);
    if (!($96)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $97 = $arglist_current;
     $98 = ((0) + 4|0);
     $expanded4 = $98;
     $expanded = (($expanded4) - 1)|0;
     $99 = (($97) + ($expanded))|0;
     $100 = ((0) + 4|0);
     $expanded8 = $100;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $101 = $99 & $expanded6;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $arglist_next = ((($102)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $358 = $103;
    } else {
     $358 = 0;
    }
    $104 = HEAP32[$5>>2]|0;
    $105 = ((($104)) + 1|0);
    $$0259 = $358;$$2271 = 0;$storemerge274 = $105;
   }
   HEAP32[$5>>2] = $storemerge274;
   $106 = ($$0259|0)<(0);
   $107 = $$0262$lcssa | 8192;
   $108 = (0 - ($$0259))|0;
   $spec$select291 = $106 ? $107 : $$0262$lcssa;
   $spec$select292 = $106 ? $108 : $$0259;
   $$1260 = $spec$select292;$$1263 = $spec$select291;$$3272 = $$2271;$112 = $storemerge274;
  } else {
   $109 = (_getint($5)|0);
   $110 = ($109|0)<(0);
   if ($110) {
    $$0 = -1;
    break;
   }
   $$pre362 = HEAP32[$5>>2]|0;
   $$1260 = $109;$$1263 = $$0262$lcssa;$$3272 = $$1270;$112 = $$pre362;
  }
  $111 = HEAP8[$112>>0]|0;
  $113 = ($111<<24>>24)==(46);
  do {
   if ($113) {
    $114 = ((($112)) + 1|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = ($115<<24>>24)==(42);
    if (!($116)) {
     HEAP32[$5>>2] = $114;
     $152 = (_getint($5)|0);
     $$pre363$pre = HEAP32[$5>>2]|0;
     $$0254 = $152;$$pre363 = $$pre363$pre;
     break;
    }
    $117 = ((($112)) + 2|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118 << 24 >> 24;
    $120 = (_isdigit($119)|0);
    $121 = ($120|0)==(0);
    if (!($121)) {
     $122 = HEAP32[$5>>2]|0;
     $123 = ((($122)) + 3|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = ($124<<24>>24)==(36);
     if ($125) {
      $126 = ((($122)) + 2|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = (($128) + -48)|0;
      $130 = (($4) + ($129<<2)|0);
      HEAP32[$130>>2] = 10;
      $131 = HEAP8[$126>>0]|0;
      $132 = $131 << 24 >> 24;
      $133 = (($132) + -48)|0;
      $134 = (($3) + ($133<<3)|0);
      $135 = $134;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = (($135) + 4)|0;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($122)) + 4|0);
      HEAP32[$5>>2] = $141;
      $$0254 = $137;$$pre363 = $141;
      break;
     }
    }
    $142 = ($$3272|0)==(0);
    if (!($142)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $143 = $arglist_current2;
     $144 = ((0) + 4|0);
     $expanded11 = $144;
     $expanded10 = (($expanded11) - 1)|0;
     $145 = (($143) + ($expanded10))|0;
     $146 = ((0) + 4|0);
     $expanded15 = $146;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $147 = $145 & $expanded13;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $arglist_next3 = ((($148)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $359 = $149;
    } else {
     $359 = 0;
    }
    $150 = HEAP32[$5>>2]|0;
    $151 = ((($150)) + 2|0);
    HEAP32[$5>>2] = $151;
    $$0254 = $359;$$pre363 = $151;
   } else {
    $$0254 = -1;$$pre363 = $112;
   }
  } while(0);
  $$0252 = 0;$154 = $$pre363;
  while(1) {
   $153 = HEAP8[$154>>0]|0;
   $155 = $153 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($154)) + 1|0);
   HEAP32[$5>>2] = $158;
   $159 = HEAP8[$154>>0]|0;
   $160 = $159 << 24 >> 24;
   $161 = (($160) + -65)|0;
   $162 = ((1664 + (($$0252*58)|0)|0) + ($161)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = (($164) + -1)|0;
   $166 = ($165>>>0)<(8);
   if ($166) {
    $$0252 = $164;$154 = $158;
   } else {
    break;
   }
  }
  $167 = ($163<<24>>24)==(0);
  if ($167) {
   $$0 = -1;
   break;
  }
  $168 = ($163<<24>>24)==(19);
  $169 = ($$0253|0)>(-1);
  do {
   if ($168) {
    if ($169) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($169) {
     $170 = (($4) + ($$0253<<2)|0);
     HEAP32[$170>>2] = $164;
     $171 = (($3) + ($$0253<<3)|0);
     $172 = $171;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = (($172) + 4)|0;
     $176 = $175;
     $177 = HEAP32[$176>>2]|0;
     $178 = $6;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $180 = (($178) + 4)|0;
     $181 = $180;
     HEAP32[$181>>2] = $177;
     label = 54;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$164,$2);
    $$pre364 = HEAP32[$5>>2]|0;
    $183 = $$pre364;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($10) {
    $183 = $158;
    label = 55;
   } else {
    $$0243$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $182 = ((($183)) + -1|0);
    $184 = HEAP8[$182>>0]|0;
    $185 = $184 << 24 >> 24;
    $186 = ($$0252|0)!=(0);
    $187 = $185 & 15;
    $188 = ($187|0)==(3);
    $or$cond276 = $186 & $188;
    $189 = $185 & -33;
    $$0235 = $or$cond276 ? $189 : $185;
    $190 = $$1263 & 8192;
    $191 = ($190|0)==(0);
    $192 = $$1263 & -65537;
    $spec$select = $191 ? $$1263 : $192;
    L79: do {
     switch ($$0235|0) {
     case 110:  {
      $trunc = $$0252&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $199 = HEAP32[$6>>2]|0;
       HEAP32[$199>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $200 = HEAP32[$6>>2]|0;
       HEAP32[$200>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $201 = ($$1248|0)<(0);
       $202 = $201 << 31 >> 31;
       $203 = HEAP32[$6>>2]|0;
       $204 = $203;
       $205 = $204;
       HEAP32[$205>>2] = $$1248;
       $206 = (($204) + 4)|0;
       $207 = $206;
       HEAP32[$207>>2] = $202;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $208 = $$1248&65535;
       $209 = HEAP32[$6>>2]|0;
       HEAP16[$209>>1] = $208;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $210 = $$1248&255;
       $211 = HEAP32[$6>>2]|0;
       HEAP8[$211>>0] = $210;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $212 = HEAP32[$6>>2]|0;
       HEAP32[$212>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $213 = ($$1248|0)<(0);
       $214 = $213 << 31 >> 31;
       $215 = HEAP32[$6>>2]|0;
       $216 = $215;
       $217 = $216;
       HEAP32[$217>>2] = $$1248;
       $218 = (($216) + 4)|0;
       $219 = $218;
       HEAP32[$219>>2] = $214;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0243$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $220 = ($$0254>>>0)>(8);
      $221 = $220 ? $$0254 : 8;
      $222 = $spec$select | 8;
      $$1236 = 120;$$1255 = $221;$$3265 = $222;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1236 = $$0235;$$1255 = $$0254;$$3265 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $238 = $6;
      $239 = $238;
      $240 = HEAP32[$239>>2]|0;
      $241 = (($238) + 4)|0;
      $242 = $241;
      $243 = HEAP32[$242>>2]|0;
      $244 = (_fmt_o($240,$243,$11)|0);
      $245 = $spec$select & 8;
      $246 = ($245|0)==(0);
      $247 = $244;
      $248 = (($12) - ($247))|0;
      $249 = ($$0254|0)>($248|0);
      $250 = (($248) + 1)|0;
      $251 = $246 | $249;
      $spec$select295 = $251 ? $$0254 : $250;
      $$0228 = $244;$$1233 = 0;$$1238 = 7229;$$2256 = $spec$select295;$$4266 = $spec$select;$276 = $240;$278 = $243;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $252 = $6;
      $253 = $252;
      $254 = HEAP32[$253>>2]|0;
      $255 = (($252) + 4)|0;
      $256 = $255;
      $257 = HEAP32[$256>>2]|0;
      $258 = ($257|0)<(0);
      if ($258) {
       $259 = (_i64Subtract(0,0,($254|0),($257|0))|0);
       $260 = (getTempRet0() | 0);
       $261 = $6;
       $262 = $261;
       HEAP32[$262>>2] = $259;
       $263 = (($261) + 4)|0;
       $264 = $263;
       HEAP32[$264>>2] = $260;
       $$0232 = 1;$$0237 = 7229;$271 = $259;$272 = $260;
       label = 72;
       break L79;
      } else {
       $265 = $spec$select & 2048;
       $266 = ($265|0)==(0);
       $267 = $spec$select & 1;
       $268 = ($267|0)==(0);
       $$ = $268 ? 7229 : (7231);
       $spec$select296 = $266 ? $$ : (7230);
       $269 = $spec$select & 2049;
       $270 = ($269|0)!=(0);
       $spec$select297 = $270&1;
       $$0232 = $spec$select297;$$0237 = $spec$select296;$271 = $254;$272 = $257;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $193 = $6;
      $194 = $193;
      $195 = HEAP32[$194>>2]|0;
      $196 = (($193) + 4)|0;
      $197 = $196;
      $198 = HEAP32[$197>>2]|0;
      $$0232 = 0;$$0237 = 7229;$271 = $195;$272 = $198;
      label = 72;
      break;
     }
     case 99:  {
      $288 = $6;
      $289 = $288;
      $290 = HEAP32[$289>>2]|0;
      $291 = (($288) + 4)|0;
      $292 = $291;
      $293 = HEAP32[$292>>2]|0;
      $294 = $290&255;
      HEAP8[$13>>0] = $294;
      $$2 = $13;$$2234 = 0;$$2239 = 7229;$$5 = 1;$$6268 = $192;$$pre$phiZ2D = $12;
      break;
     }
     case 109:  {
      $295 = (___errno_location()|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (_strerror($296)|0);
      $$1 = $297;
      label = 77;
      break;
     }
     case 115:  {
      $298 = HEAP32[$6>>2]|0;
      $299 = ($298|0)==(0|0);
      $300 = $299 ? 7239 : $298;
      $$1 = $300;
      label = 77;
      break;
     }
     case 67:  {
      $307 = $6;
      $308 = $307;
      $309 = HEAP32[$308>>2]|0;
      $310 = (($307) + 4)|0;
      $311 = $310;
      $312 = HEAP32[$311>>2]|0;
      HEAP32[$8>>2] = $309;
      HEAP32[$14>>2] = 0;
      HEAP32[$6>>2] = $8;
      $$4258370 = -1;
      label = 81;
      break;
     }
     case 83:  {
      $313 = ($$0254|0)==(0);
      if ($313) {
       _pad_661($0,32,$$1260,0,$spec$select);
       $$0240313371 = 0;
       label = 91;
      } else {
       $$4258370 = $$0254;
       label = 81;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $336 = +HEAPF64[$6>>3];
      $337 = (_fmt_fp($0,$336,$$1260,$$0254,$spec$select,$$0235)|0);
      $$0243$ph$be = $337;
      break L77;
      break;
     }
     default: {
      $$2 = $20;$$2234 = 0;$$2239 = 7229;$$5 = $$0254;$$6268 = $spec$select;$$pre$phiZ2D = $12;
     }
     }
    } while(0);
    L103: do {
     if ((label|0) == 67) {
      label = 0;
      $223 = $6;
      $224 = $223;
      $225 = HEAP32[$224>>2]|0;
      $226 = (($223) + 4)|0;
      $227 = $226;
      $228 = HEAP32[$227>>2]|0;
      $229 = $$1236 & 32;
      $230 = (_fmt_x($225,$228,$11,$229)|0);
      $231 = ($225|0)==(0);
      $232 = ($228|0)==(0);
      $233 = $231 & $232;
      $234 = $$3265 & 8;
      $235 = ($234|0)==(0);
      $or$cond278 = $235 | $233;
      $236 = $$1236 >>> 4;
      $237 = (7229 + ($236)|0);
      $spec$select293 = $or$cond278 ? 7229 : $237;
      $spec$select294 = $or$cond278 ? 0 : 2;
      $$0228 = $230;$$1233 = $spec$select294;$$1238 = $spec$select293;$$2256 = $$1255;$$4266 = $$3265;$276 = $225;$278 = $228;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $273 = (_fmt_u($271,$272,$11)|0);
      $$0228 = $273;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $spec$select;$276 = $271;$278 = $272;
      label = 73;
     }
     else if ((label|0) == 77) {
      label = 0;
      $301 = (_memchr($$1,0,$$0254)|0);
      $302 = ($301|0)==(0|0);
      $303 = $301;
      $304 = $$1;
      $305 = (($303) - ($304))|0;
      $306 = (($$1) + ($$0254)|0);
      $$3257 = $302 ? $$0254 : $305;
      $$1250 = $302 ? $306 : $301;
      $$pre368 = $$1250;
      $$2 = $$1;$$2234 = 0;$$2239 = 7229;$$5 = $$3257;$$6268 = $192;$$pre$phiZ2D = $$pre368;
     }
     else if ((label|0) == 81) {
      label = 0;
      $314 = HEAP32[$6>>2]|0;
      $$0229334 = $314;$$0240333 = 0;
      while(1) {
       $315 = HEAP32[$$0229334>>2]|0;
       $316 = ($315|0)==(0);
       if ($316) {
        $$0240313 = $$0240333;
        break;
       }
       $317 = (_wctomb($9,$315)|0);
       $318 = ($317|0)<(0);
       $319 = (($$4258370) - ($$0240333))|0;
       $320 = ($317>>>0)>($319>>>0);
       $or$cond283 = $318 | $320;
       if ($or$cond283) {
        label = 85;
        break;
       }
       $321 = ((($$0229334)) + 4|0);
       $322 = (($317) + ($$0240333))|0;
       $323 = ($$4258370>>>0)>($322>>>0);
       if ($323) {
        $$0229334 = $321;$$0240333 = $322;
       } else {
        $$0240313 = $322;
        break;
       }
      }
      if ((label|0) == 85) {
       label = 0;
       if ($318) {
        $$0 = -1;
        break L1;
       } else {
        $$0240313 = $$0240333;
       }
      }
      _pad_661($0,32,$$1260,$$0240313,$spec$select);
      $324 = ($$0240313|0)==(0);
      if ($324) {
       $$0240313371 = 0;
       label = 91;
      } else {
       $325 = HEAP32[$6>>2]|0;
       $$1230340 = $325;$$1241339 = 0;
       while(1) {
        $326 = HEAP32[$$1230340>>2]|0;
        $327 = ($326|0)==(0);
        if ($327) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $328 = (_wctomb($9,$326)|0);
        $329 = (($328) + ($$1241339))|0;
        $330 = ($329|0)>($$0240313|0);
        if ($330) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $331 = ((($$1230340)) + 4|0);
        _out($0,$9,$328);
        $332 = ($329>>>0)<($$0240313>>>0);
        if ($332) {
         $$1230340 = $331;$$1241339 = $329;
        } else {
         $$0240313371 = $$0240313;
         label = 91;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $274 = ($$2256|0)>(-1);
     $275 = $$4266 & -65537;
     $spec$select281 = $274 ? $275 : $$4266;
     $277 = ($276|0)!=(0);
     $279 = ($278|0)!=(0);
     $280 = $277 | $279;
     $281 = ($$2256|0)!=(0);
     $or$cond = $281 | $280;
     $282 = $$0228;
     $283 = (($12) - ($282))|0;
     $284 = $280 ^ 1;
     $285 = $284&1;
     $286 = (($283) + ($285))|0;
     $287 = ($$2256|0)>($286|0);
     $$2256$ = $287 ? $$2256 : $286;
     $spec$select298 = $or$cond ? $$2256$ : 0;
     $spec$select299 = $or$cond ? $$0228 : $11;
     $$2 = $spec$select299;$$2234 = $$1233;$$2239 = $$1238;$$5 = $spec$select298;$$6268 = $spec$select281;$$pre$phiZ2D = $12;
    }
    else if ((label|0) == 91) {
     label = 0;
     $333 = $spec$select ^ 8192;
     _pad_661($0,32,$$1260,$$0240313371,$333);
     $334 = ($$1260|0)>($$0240313371|0);
     $335 = $334 ? $$1260 : $$0240313371;
     $$0243$ph$be = $335;
     break;
    }
    $338 = $$2;
    $339 = (($$pre$phiZ2D) - ($338))|0;
    $340 = ($$5|0)<($339|0);
    $spec$select284 = $340 ? $339 : $$5;
    $341 = (($spec$select284) + ($$2234))|0;
    $342 = ($$1260|0)<($341|0);
    $$2261 = $342 ? $341 : $$1260;
    _pad_661($0,32,$$2261,$341,$$6268);
    _out($0,$$2239,$$2234);
    $343 = $$6268 ^ 65536;
    _pad_661($0,48,$$2261,$341,$343);
    _pad_661($0,48,$spec$select284,$339,0);
    _out($0,$$2,$339);
    $344 = $$6268 ^ 8192;
    _pad_661($0,32,$$2261,$341,$344);
    $$0243$ph$be = $$2261;
   }
  } while(0);
  $$0243$ph = $$0243$ph$be;$$0247$ph = $$1248;$$0269$ph = $$3272;
 }
 L125: do {
  if ((label|0) == 94) {
   $345 = ($0|0)==(0|0);
   if ($345) {
    $346 = ($$0269$ph|0)==(0);
    if ($346) {
     $$0 = 0;
    } else {
     $$2242320 = 1;
     while(1) {
      $347 = (($4) + ($$2242320<<2)|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ($348|0)==(0);
      if ($349) {
       break;
      }
      $350 = (($3) + ($$2242320<<3)|0);
      _pop_arg($350,$348,$2);
      $351 = (($$2242320) + 1)|0;
      $352 = ($351>>>0)<(10);
      if ($352) {
       $$2242320 = $351;
      } else {
       $$0 = 1;
       break L125;
      }
     }
     $$3317 = $$2242320;
     while(1) {
      $355 = (($4) + ($$3317<<2)|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = ($356|0)==(0);
      $353 = (($$3317) + 1)|0;
      if (!($357)) {
       $$0 = -1;
       break L125;
      }
      $354 = ($353>>>0)<(10);
      if ($354) {
       $$3317 = $353;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (2128 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = (getTempRet0() | 0);
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = (getTempRet0() | 0);
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = (getTempRet0() | 0);
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_107()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function _pad_661($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS_662($1)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS_662($15)|0);
  $17 = (getTempRet0() | 0);
  $$0471 = $15;$$0522 = 1;$$0523 = 7246;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (7247) : (7252);
  $spec$select565 = $19 ? $$ : (7249);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 7265 : 7269;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 7273 : 7277;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_661($0,32,$2,$34,$35);
   _out($0,$$0523,$$0522);
   _out($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_661($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexpl($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = $63 >> 31;
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (2128 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_661($0,32,$2,$113,$4);
    _out($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_661($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_661($0,48,$118,0,0);
    _out($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_661($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$134 = $$pr;
    while(1) {
     $135 = ($134|0)<(29);
     $136 = $135 ? $134 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = (getTempRet0() | 0);
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = (getTempRet0() | 0);
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = (getTempRet0() | 0);
       $145 = (___muldi3(($143|0),($144|0),1000000000,0)|0);
       $146 = (getTempRet0() | 0);
       $147 = (_i64Subtract(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = (getTempRet0() | 0);
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $153 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$153>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $154 = ($153>>>0)>($$2483>>>0);
        if ($154) {
         $$3501676 = $153;
        } else {
         $$3501$lcssa = $153;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$134 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = 1000000000 >>> $168;
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = $176 >>> $168;
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = $191 >> 2;
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = $200 >> 2;
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = $216 >> 2;
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = $$1533$lcssa >>> 1;
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($132) - ($259))|0;
      $261 = $260 >> 2;
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $272 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$272>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $273 = ($272>>>0)>($$9>>>0);
      if ($273) {
       $$9507625 = $272;
      } else {
       $$9507$lcssa = $272;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($132))|0;
      $298 = $297 >> 2;
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = $4 >>> 3;
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = $$5521 >> 31;
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad_661($0,32,$2,$339,$4);
   _out($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad_661($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out($0,7281,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad_661($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out($0,7281,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($386)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad_661($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad_661($0,32,$2,$339,$410);
   $$sink757 = $339;
  }
 } while(0);
 $411 = ($$sink757|0)<($2|0);
 $$560 = $411 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function ___DOUBLE_BITS_662($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_440()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_440() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4192|0);
}
function ___pthread_self_107() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $2 = (2144 + ($$016)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 4;
   break;
  }
  $6 = (($$016) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$115$ph = 87;
   label = 5;
   break;
  } else {
   $$016 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = ($$016|0)==(0);
  if ($8) {
   $$012$lcssa = 2240;
  } else {
   $$115$ph = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $$01214 = 2240;$$115 = $$115$ph;
  while(1) {
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)==(0|0);
 $8 = $7 ? $0 : $$0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $$191 = $63 ? $$090 : $26;
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $spec$select = $61 ? $57 : 0;
      $$4 = $spec$select;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $spec$select = $2 ? $0 : $3;
 return ($spec$select|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 31]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $22 = (($$03846) + -1)|0;
      $24 = (($0) + ($22)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $23 = ($22|0)==(0);
      if ($23) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $22;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 31]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $spec$select = 0, $spec$select21 = 0.0, $spec$select22 = 0, $spec$select23 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $spec$store$select = $8 ? $7 : 1023;
  $spec$select = $5 ? $spec$store$select : $4;
  $spec$select21 = $5 ? $6 : $3;
  $$0 = $spec$select21;$$020 = $spec$select;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $spec$store$select1 = $15 ? $14 : -1022;
   $spec$select22 = $12 ? $spec$store$select1 : $11;
   $spec$select23 = $12 ? $13 : $10;
   $$0 = $spec$select23;$$020 = $spec$select22;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _ldexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 112|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_599()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 116|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_599() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(7283,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = $7 & 524288;
   $14 = ($13|0)==(0);
   if (!($14)) {
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $15 = (___fdopen($11,$1)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer8>>2] = $11;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $15;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $spec$select = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $spec$select | 524288;
 $$2 = $9 ? $spec$select : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $spec$select13 = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $spec$select13 | 512;
 $$4 = $13 ? $14 : $spec$select13;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $spec$select14 = $15 ? $16 : $$4;
 return ($spec$select14|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(7283,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = 0;
 } else {
  $8 = (_malloc(1156)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,124)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP8[$1>>0]|0;
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = (_strchr($1,101)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $17 = HEAP8[$1>>0]|0;
   $18 = ($17<<24>>24)==(97);
   if ($18) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $19 = (___syscall221(221,($vararg_buffer3|0))|0);
    $20 = $19 & 1024;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $19 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $22;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = $23 | 128;
    HEAP32[$8>>2] = $24;
    $31 = $24;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $31 = $$pre;
   }
   $25 = ((($8)) + 60|0);
   HEAP32[$25>>2] = $0;
   $26 = ((($8)) + 132|0);
   $27 = ((($8)) + 44|0);
   HEAP32[$27>>2] = $26;
   $28 = ((($8)) + 48|0);
   HEAP32[$28>>2] = 1024;
   $29 = ((($8)) + 75|0);
   HEAP8[$29>>0] = -1;
   $30 = $31 & 8;
   $32 = ($30|0)==(0);
   if ($32) {
    $33 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $33;
    $34 = (___syscall54(54,($vararg_buffer12|0))|0);
    $35 = ($34|0)==(0);
    if ($35) {
     HEAP8[$29>>0] = 10;
    }
   }
   $36 = ((($8)) + 32|0);
   HEAP32[$36>>2] = 16;
   $37 = ((($8)) + 36|0);
   HEAP32[$37>>2] = 15;
   $38 = ((($8)) + 40|0);
   HEAP32[$38>>2] = 6;
   $39 = ((($8)) + 12|0);
   HEAP32[$39>>2] = 4;
   $40 = HEAP32[(8868)>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = ((($8)) + 76|0);
    HEAP32[$42>>2] = -1;
   }
   $43 = (___ofl_add($8)|0);
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((8932|0));
 return (8940|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((8932|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 7]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $30 = ($29|0)==(0);
  if (!($30)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[1047]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[1047]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 31]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 31]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _feof($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 4;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   ___unlockfile($0);
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 4;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 31]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 31]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($0);
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 31]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054 = 0, $$056 = 0, $$15759 = 0, $$160 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = $19;
  $23 = ($20>>>0)<($4>>>0);
  $$ = $23 ? $20 : $4;
  (_memcpy(($0|0),($22|0),($$|0))|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (($24) + ($$)|0);
  HEAP32[$18>>2] = $25;
  $26 = (($0) + ($$)|0);
  $27 = (($4) - ($$))|0;
  $$054 = $27;$$056 = $26;
 } else {
  $$054 = $4;$$056 = $0;
 }
 $28 = ($$054|0)==(0);
 L7: do {
  if ($28) {
   label = 13;
  } else {
   $29 = ((($3)) + 32|0);
   $$15759 = $$056;$$160 = $$054;
   while(1) {
    $30 = (___toread($3)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$29>>2]|0;
    $33 = (FUNCTION_TABLE_iiii[$32 & 31]($3,$$15759,$$160)|0);
    $34 = (($33) + 1)|0;
    $35 = ($34>>>0)<(2);
    if ($35) {
     break;
    }
    $40 = (($$160) - ($33))|0;
    $41 = (($$15759) + ($33)|0);
    $42 = ($40|0)==(0);
    if ($42) {
     label = 13;
     break L7;
    } else {
     $$15759 = $41;$$160 = $40;
    }
   }
   $37 = ($36|0)==(0);
   if (!($37)) {
    ___unlockfile($3);
   }
   $38 = (($4) - ($$160))|0;
   $39 = (($38>>>0) / ($1>>>0))&-1;
   $$0 = $39;
  }
 } while(0);
 if ((label|0) == 13) {
  $43 = ($36|0)==(0);
  if ($43) {
   $$0 = $spec$select;
  } else {
   ___unlockfile($3);
   $$0 = $spec$select;
  }
 }
 return ($$0|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[1015]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&7](a1|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&7]();
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&3](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&15](a1|0,a2|0,a3|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b2(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(2);return 0;
}
function b3() {
 ; nullFunc_v(3);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(5);
}
function b6(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(6);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,b0,b0,_stbi__stdio_eof,___stdio_close,b0,b0,b0];
var FUNCTION_TABLE_iiii = [b1,_stbi__stdio_read,b1,b1,b1,___stdout_write,___stdio_seek,b1,b1,b1,b1,b1,b1,b1,b1,___stdio_write,___stdio_read,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_iiiiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_stbi__resample_row_hv_2,_resample_row_1,_stbi__resample_row_v_2,_stbi__resample_row_h_2,_stbi__resample_row_generic,b2];
var FUNCTION_TABLE_v = [b3,b3,b3,b3,b3,b3,b3,_mainLoop];
var FUNCTION_TABLE_vii = [b4,b4,_stbi__stdio_skip,b4];
var FUNCTION_TABLE_viii = [b5,b5,b5,b5,b5,b5,b5,b5,_stbi__idct_block,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_viiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,_stbi__YCbCr_to_RGB_row,b6,b6,b6,b6,b6,b6];

  return { ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_v: dynCall_v, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



